//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32345990
// Cuda compilation tools, release 12.1, V12.1.55
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_75
.address_size 64

	// .globl	compute_inertia_energy_hess_affine_cuda_kernel_forward
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.const .align 4 .b8 pnanovdb_grid_type_value_strides_bits[108] = {0, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 24, 0, 0, 0, 48, 0, 0, 0, 8, 0, 0, 0};
.const .align 4 .b8 pnanovdb_grid_type_table_strides_bits[108] = {64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 128, 0, 0, 0, 192, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 128, 0, 0, 0, 0, 1, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0};
.const .align 4 .b8 pnanovdb_grid_type_minmax_strides_bits[108] = {0, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 192, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 128, 0, 0, 0, 0, 1, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 24, 0, 0, 0, 48, 0, 0, 0, 8, 0, 0, 0};
.const .align 4 .b8 pnanovdb_grid_type_minmax_aligns_bits[108] = {0, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0};
.const .align 4 .b8 pnanovdb_grid_type_stat_strides_bits[108] = {0, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 8, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0};
.const .align 4 .b8 pnanovdb_grid_type_leaf_type[108] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.const .align 4 .b8 pnanovdb_grid_type_constants[3024] = {28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 32, 32, 0, 0, 32, 32, 0, 0, 32, 32, 0, 0, 32, 32, 0, 0, 32, 32, 4, 0, 32, 4, 0, 0, 32, 4, 0, 0, 32, 4, 0, 0, 32, 4, 0, 0, 32, 4, 0, 0, 32, 132, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 84, 0, 0, 0, 88, 0, 0, 0, 92, 0, 0, 0, 96, 0, 0, 0, 96, 8, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 64, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 40, 32, 0, 0, 48, 32, 0, 0, 56, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 40, 4, 0, 0, 48, 4, 0, 0, 56, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 88, 0, 0, 0, 96, 0, 0, 0, 104, 0, 0, 0, 128, 0, 0, 0, 128, 16, 0, 0, 28, 0, 0, 0, 30, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 34, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 34, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 82, 0, 0, 0, 84, 0, 0, 0, 88, 0, 0, 0, 96, 0, 0, 0, 96, 4, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 84, 0, 0, 0, 88, 0, 0, 0, 92, 0, 0, 0, 96, 0, 0, 0, 96, 8, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 64, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 40, 32, 0, 0, 48, 32, 0, 0, 56, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 40, 4, 0, 0, 48, 4, 0, 0, 56, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 88, 0, 0, 0, 96, 0, 0, 0, 104, 0, 0, 0, 128, 0, 0, 0, 128, 16, 0, 0, 28, 0, 0, 0, 40, 0, 0, 0, 52, 0, 0, 0, 64, 0, 0, 0, 68, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 44, 32, 0, 0, 56, 32, 0, 0, 60, 32, 0, 0, 64, 32, 0, 0, 64, 32, 8, 0, 32, 4, 0, 0, 44, 4, 0, 0, 56, 4, 0, 0, 60, 4, 0, 0, 64, 4, 0, 0, 64, 4, 1, 0, 80, 0, 0, 0, 92, 0, 0, 0, 104, 0, 0, 0, 108, 0, 0, 0, 128, 0, 0, 0, 128, 24, 0, 0, 32, 0, 0, 0, 56, 0, 0, 0, 80, 0, 0, 0, 104, 0, 0, 0, 112, 0, 0, 0, 128, 0, 0, 0, 192, 0, 0, 0, 24, 0, 0, 0, 24, 0, 0, 0, 64, 0, 0, 0, 32, 32, 0, 0, 56, 32, 0, 0, 80, 32, 0, 0, 88, 32, 0, 0, 96, 32, 0, 0, 96, 32, 12, 0, 32, 4, 0, 0, 56, 4, 0, 0, 80, 4, 0, 0, 88, 4, 0, 0, 96, 4, 0, 0, 96, 132, 1, 0, 80, 0, 0, 0, 104, 0, 0, 0, 128, 0, 0, 0, 136, 0, 0, 0, 160, 0, 0, 0, 160, 48, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 33, 32, 0, 0, 34, 32, 0, 0, 35, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 33, 4, 0, 0, 34, 4, 0, 0, 35, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 28, 0, 0, 0, 30, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 34, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 34, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 82, 0, 0, 0, 84, 0, 0, 0, 88, 0, 0, 0, 96, 0, 0, 0, 96, 4, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 84, 0, 0, 0, 88, 0, 0, 0, 92, 0, 0, 0, 96, 0, 0, 0, 96, 8, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 33, 32, 0, 0, 34, 32, 0, 0, 35, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 33, 4, 0, 0, 34, 4, 0, 0, 35, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 96, 0, 0, 0, 160, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 84, 0, 0, 0, 88, 0, 0, 0, 92, 0, 0, 0, 96, 0, 0, 0, 96, 8, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 88, 0, 0, 0, 90, 0, 0, 0, 92, 0, 0, 0, 94, 0, 0, 0, 96, 0, 0, 0, 96, 1, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 88, 0, 0, 0, 90, 0, 0, 0, 92, 0, 0, 0, 94, 0, 0, 0, 96, 0, 0, 0, 96, 2, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 88, 0, 0, 0, 90, 0, 0, 0, 92, 0, 0, 0, 94, 0, 0, 0, 96, 0, 0, 0, 96, 4, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 88, 0, 0, 0, 90, 0, 0, 0, 92, 0, 0, 0, 94, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 28, 0, 0, 0, 44, 0, 0, 0, 60, 0, 0, 0, 76, 0, 0, 0, 80, 0, 0, 0, 96, 0, 0, 0, 128, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 64, 0, 0, 0, 32, 32, 0, 0, 48, 32, 0, 0, 64, 32, 0, 0, 68, 32, 0, 0, 96, 32, 0, 0, 96, 32, 8, 0, 32, 4, 0, 0, 48, 4, 0, 0, 64, 4, 0, 0, 68, 4, 0, 0, 96, 4, 0, 0, 96, 4, 1, 0, 80, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 116, 0, 0, 0, 128, 0, 0, 0, 128, 32, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 128, 0, 0, 0, 136, 0, 0, 0, 160, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0, 0, 24, 0, 0, 0, 64, 0, 0, 0, 32, 32, 0, 0, 64, 32, 0, 0, 96, 32, 0, 0, 104, 32, 0, 0, 128, 32, 0, 0, 128, 32, 16, 0, 32, 4, 0, 0, 64, 4, 0, 0, 96, 4, 0, 0, 104, 4, 0, 0, 128, 4, 0, 0, 128, 4, 2, 0, 80, 0, 0, 0, 112, 0, 0, 0, 144, 0, 0, 0, 152, 0, 0, 0, 160, 0, 0, 0, 160, 64, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 40, 32, 0, 0, 48, 32, 0, 0, 56, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 40, 4, 0, 0, 48, 4, 0, 0, 56, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 96, 0, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 40, 32, 0, 0, 48, 32, 0, 0, 56, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 40, 4, 0, 0, 48, 4, 0, 0, 56, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 96, 0, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 40, 32, 0, 0, 48, 32, 0, 0, 56, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 40, 4, 0, 0, 48, 4, 0, 0, 56, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 160, 0, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 40, 32, 0, 0, 48, 32, 0, 0, 56, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 40, 4, 0, 0, 48, 4, 0, 0, 56, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 80, 0, 0, 0, 160, 0, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 40, 32, 0, 0, 48, 32, 0, 0, 56, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 40, 4, 0, 0, 48, 4, 0, 0, 56, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 88, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 4, 0, 0, 28, 0, 0, 0, 31, 0, 0, 0, 34, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 24, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 35, 32, 0, 0, 40, 32, 0, 0, 44, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 35, 4, 0, 0, 40, 4, 0, 0, 44, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 83, 0, 0, 0, 88, 0, 0, 0, 92, 0, 0, 0, 96, 0, 0, 0, 96, 6, 0, 0, 28, 0, 0, 0, 34, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0, 0, 64, 0, 0, 0, 48, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 38, 32, 0, 0, 44, 32, 0, 0, 48, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 38, 4, 0, 0, 44, 4, 0, 0, 48, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 86, 0, 0, 0, 92, 0, 0, 0, 96, 0, 0, 0, 128, 0, 0, 0, 128, 12, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 64, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 32, 32, 0, 0, 33, 32, 0, 0, 36, 32, 0, 0, 40, 32, 0, 0, 64, 32, 0, 0, 64, 32, 4, 0, 32, 4, 0, 0, 33, 4, 0, 0, 36, 4, 0, 0, 40, 4, 0, 0, 64, 4, 0, 0, 64, 132, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 84, 0, 0, 0, 88, 0, 0, 0, 96, 0, 0, 0, 96, 2, 0, 0};
.const .align 4 .b8 pnanovdb_dither_lut[2048] = {70, 182, 19, 62, 172, 173, 36, 63, 175, 149, 84, 63, 42, 171, 169, 62, 33, 148, 215, 61, 175, 178, 26, 63, 21, 170, 43, 62, 176, 170, 42, 63, 193, 141, 100, 63, 44, 155, 201, 62, 36, 172, 167, 61, 170, 181, 20, 63, 180, 146, 90, 63, 51, 165, 181, 62, 181, 138, 106, 63, 54, 149, 213, 62, 171, 177, 28, 63, 0, 140, 231, 61, 175, 153, 76, 63, 41, 179, 153, 62, 157, 190, 2, 63, 41, 160, 63, 60, 182, 134, 114, 63, 55, 141, 229, 62, 43, 163, 185, 62, 176, 145, 92, 63, 62, 152, 79, 61, 170, 185, 12, 63, 48, 189, 133, 62, 178, 158, 66, 63, 23, 154, 75, 62, 177, 166, 50, 63, 44, 184, 15, 62, 37, 174, 35, 63, 36, 182, 19, 63, 39, 176, 159, 61, 31, 189, 5, 63, 41, 160, 191, 60, 59, 138, 235, 62, 56, 133, 117, 63, 59, 142, 99, 63, 65, 156, 199, 62, 29, 172, 167, 62, 58, 150, 83, 63, 19, 186, 139, 62, 52, 157, 69, 63, 51, 165, 53, 63, 33, 148, 87, 62, 69, 132, 247, 62, 61, 130, 123, 63, 28, 180, 151, 62, 57, 154, 75, 63, 51, 136, 239, 61, 33, 177, 29, 63, 57, 144, 95, 61, 31, 185, 13, 63, 39, 162, 59, 63, 51, 136, 111, 62, 35, 186, 11, 63, 41, 160, 63, 61, 54, 145, 93, 63, 56, 162, 187, 62, 53, 153, 77, 63, 53, 178, 155, 62, 169, 189, 4, 63, 52, 176, 159, 60, 47, 139, 233, 62, 194, 133, 116, 63, 177, 162, 58, 63, 26, 138, 107, 62, 157, 186, 10, 63, 47, 168, 47, 61, 40, 187, 137, 62, 174, 157, 68, 63, 173, 165, 52, 63, 74, 150, 83, 62, 56, 133, 245, 62, 199, 130, 122, 63, 49, 181, 149, 62, 179, 154, 74, 63, 77, 134, 115, 62, 173, 161, 60, 63, 45, 147, 217, 62, 194, 137, 108, 63, 19, 186, 11, 62, 176, 174, 34, 63, 50, 173, 165, 62, 179, 150, 82, 63, 195, 129, 124, 63, 48, 131, 249, 62, 172, 169, 44, 63, 72, 166, 51, 62, 180, 142, 98, 63, 52, 157, 197, 62, 158, 182, 18, 63, 41, 180, 151, 61, 35, 190, 3, 63, 19, 128, 127, 60, 49, 152, 79, 62, 38, 166, 51, 63, 28, 180, 23, 62, 50, 173, 37, 63, 54, 149, 85, 63, 55, 170, 171, 62, 27, 188, 135, 62, 56, 158, 67, 63, 60, 134, 115, 63, 67, 140, 231, 62, 55, 141, 101, 63, 57, 154, 203, 62, 47, 168, 175, 61, 32, 181, 21, 63, 58, 146, 91, 63, 30, 164, 183, 62, 59, 138, 107, 63, 66, 148, 215, 62, 52, 161, 61, 63, 35, 132, 119, 62, 51, 169, 45, 63, 30, 164, 55, 62, 84, 144, 223, 61, 37, 178, 27, 63, 47, 168, 47, 62, 38, 170, 43, 63, 61, 130, 251, 62, 56, 129, 125, 63, 58, 146, 219, 62, 55, 137, 109, 63, 34, 188, 135, 61, 162, 183, 16, 63, 163, 175, 32, 63, 35, 190, 3, 62, 56, 162, 59, 62, 168, 168, 46, 63, 169, 160, 62, 63, 61, 130, 123, 62, 183, 151, 80, 63, 25, 175, 161, 62, 60, 159, 193, 62, 184, 143, 96, 63, 190, 136, 110, 63, 71, 145, 221, 62, 73, 129, 253, 62, 191, 128, 126, 63, 31, 184, 15, 61, 161, 187, 8, 63, 186, 131, 120, 63, 64, 135, 241, 62, 58, 146, 91, 62, 169, 164, 54, 63, 165, 188, 6, 63, 30, 144, 223, 60, 183, 155, 72, 63, 23, 183, 145, 62, 42, 142, 99, 62, 181, 163, 56, 63, 190, 132, 118, 63, 72, 137, 237, 62, 31, 185, 141, 62, 170, 156, 70, 63, 69, 132, 119, 63, 51, 136, 239, 62, 49, 152, 207, 62, 51, 140, 103, 63, 31, 184, 143, 61, 40, 183, 17, 63, 63, 143, 97, 63, 40, 158, 195, 62, 84, 144, 95, 62, 47, 164, 55, 63, 46, 172, 39, 63, 12, 176, 31, 62, 45, 151, 81, 63, 37, 174, 163, 62, 60, 188, 7, 62, 41, 175, 33, 63, 73, 128, 127, 61, 44, 184, 15, 63, 48, 160, 63, 63, 86, 128, 127, 62, 63, 139, 105, 63, 41, 150, 211, 62, 65, 131, 121, 63, 77, 134, 243, 62, 49, 152, 79, 63, 45, 176, 159, 62, 52, 128, 255, 62, 69, 128, 127, 63, 63, 172, 39, 62, 42, 171, 41, 63, 67, 140, 103, 62, 43, 163, 57, 63, 164, 167, 48, 63, 40, 158, 67, 62, 83, 128, 127, 59, 161, 191, 0, 63, 166, 184, 14, 63, 51, 136, 111, 61, 102, 132, 247, 61, 167, 176, 30, 63, 63, 143, 225, 62, 186, 135, 112, 63, 182, 159, 64, 63, 22, 191, 129, 62, 33, 177, 157, 62, 187, 152, 78, 63, 188, 144, 94, 63, 35, 161, 189, 62, 164, 171, 40, 63, 37, 174, 35, 62, 59, 167, 177, 62, 184, 147, 88, 63, 166, 180, 22, 63, 44, 164, 183, 61, 53, 178, 27, 62, 168, 172, 38, 63, 62, 151, 209, 62, 185, 139, 104, 63, 162, 179, 24, 63, 52, 156, 199, 61, 34, 169, 173, 62, 188, 148, 86, 63, 189, 140, 102, 63, 36, 153, 205, 62, 47, 168, 175, 62, 49, 148, 87, 63, 48, 156, 71, 63, 44, 184, 143, 62, 42, 167, 49, 63, 65, 156, 71, 62, 35, 190, 131, 62, 44, 159, 65, 63, 45, 180, 23, 63, 54, 160, 191, 61, 73, 128, 255, 60, 27, 188, 7, 63, 42, 142, 227, 62, 64, 135, 113, 63, 39, 191, 1, 63, 62, 128, 255, 59, 47, 168, 47, 63, 81, 160, 63, 62, 19, 128, 255, 61, 45, 176, 31, 63, 36, 182, 147, 62, 44, 155, 73, 63, 38, 166, 179, 62, 62, 147, 89, 63, 50, 144, 223, 62, 68, 136, 111, 63, 50, 144, 95, 63, 48, 160, 191, 62, 40, 187, 9, 63, 52, 176, 31, 61, 41, 179, 25, 63, 116, 152, 207, 61, 227, 54, 18, 63, 43, 182, 147, 61, 247, 30, 66, 63, 152, 189, 132, 62, 234, 35, 56, 63, 63, 143, 97, 62, 230, 59, 8, 63, 34, 188, 7, 61, 155, 173, 164, 62, 248, 22, 82, 63, 41, 176, 31, 60, 226, 62, 2, 63, 202, 135, 240, 62, 255, 3, 120, 63, 162, 183, 144, 62, 235, 27, 72, 63, 226, 58, 10, 63, 49, 172, 39, 61, 247, 34, 58, 63, 47, 139, 105, 62, 230, 63, 0, 63, 83, 128, 255, 58, 231, 55, 16, 63, 35, 190, 131, 61, 154, 181, 148, 62, 248, 26, 74, 63, 194, 133, 244, 62, 251, 2, 122, 63, 161, 191, 128, 62, 235, 31, 64, 63, 163, 175, 160, 62, 236, 23, 80, 63, 116, 7, 113, 63, 180, 142, 226, 62, 115, 15, 97, 63, 178, 158, 194, 62, 186, 160, 190, 62, 119, 16, 95, 63, 184, 176, 158, 62, 118, 24, 79, 63, 19, 157, 69, 62, 112, 39, 49, 63, 14, 189, 5, 62, 111, 47, 33, 63, 98, 48, 31, 63, 61, 130, 251, 61, 97, 56, 15, 63, 75, 132, 119, 61, 111, 43, 41, 63, 16, 173, 37, 62, 112, 35, 57, 63, 88, 141, 101, 62, 187, 152, 206, 62, 120, 12, 103, 63, 119, 20, 87, 63, 185, 168, 174, 62, 179, 150, 210, 62, 116, 11, 105, 63, 182, 134, 242, 62, 134, 3, 121, 63, 98, 44, 39, 63, 33, 177, 29, 62, 42, 162, 187, 61, 97, 52, 23, 63, 44, 155, 73, 62, 229, 38, 50, 63, 191, 157, 196, 62, 250, 14, 98, 63, 53, 158, 195, 61, 232, 51, 24, 63, 58, 175, 33, 62, 233, 43, 40, 63, 251, 6, 114, 63, 193, 141, 228, 62, 228, 46, 34, 63, 40, 187, 9, 62, 253, 19, 88, 63, 164, 167, 176, 62, 254, 11, 104, 63, 166, 151, 208, 62, 42, 171, 41, 62, 229, 42, 42, 63, 74, 150, 211, 61, 228, 50, 26, 63, 56, 191, 1, 62, 232, 47, 32, 63, 60, 159, 65, 62, 233, 39, 48, 63, 250, 10, 106, 63, 192, 149, 212, 62, 249, 18, 90, 63, 190, 165, 180, 62, 254, 15, 96, 63, 165, 159, 192, 62, 255, 7, 112, 63, 168, 143, 224, 62, 176, 174, 162, 62, 114, 23, 81, 63, 173, 190, 130, 62, 113, 31, 65, 63, 122, 0, 127, 63, 191, 128, 254, 62, 120, 8, 111, 63, 188, 144, 222, 62, 93, 55, 17, 63, 32, 186, 139, 61, 91, 63, 1, 63, 41, 160, 191, 59, 40, 129, 125, 62, 117, 32, 63, 63, 35, 161, 61, 62, 116, 40, 47, 63, 28, 180, 23, 61, 92, 59, 9, 63, 50, 154, 203, 61, 110, 51, 25, 63, 118, 28, 71, 63, 149, 184, 142, 62, 190, 136, 238, 62, 121, 4, 119, 63, 113, 27, 73, 63, 174, 182, 146, 62, 115, 19, 89, 63, 177, 166, 178, 62, 78, 136, 239, 60, 96, 60, 7, 63, 116, 36, 55, 63, 37, 145, 93, 62, 175, 153, 204, 62, 2, 13, 102, 63, 3, 5, 118, 63, 177, 137, 236, 62, 38, 156, 71, 61, 222, 57, 12, 63, 42, 142, 227, 61, 223, 49, 28, 63, 237, 44, 38, 63, 7, 179, 25, 62, 79, 147, 89, 62, 238, 36, 54, 63, 244, 25, 76, 63, 179, 179, 152, 62, 245, 17, 92, 63, 181, 163, 184, 62, 10, 134, 243, 61, 236, 48, 30, 63, 54, 140, 103, 61, 235, 56, 14, 63, 180, 171, 168, 62, 244, 21, 84, 63, 222, 61, 4, 63, 58, 184, 143, 60, 241, 16, 94, 63, 173, 161, 188, 62, 240, 24, 78, 63, 171, 177, 156, 62, 223, 53, 20, 63, 37, 174, 163, 61, 178, 187, 136, 62, 243, 29, 68, 63, 157, 186, 138, 62, 105, 29, 69, 63, 104, 37, 53, 63, 54, 149, 85, 62, 107, 42, 43, 63, 67, 169, 45, 62, 106, 50, 27, 63, 247, 145, 219, 61, 100, 61, 5, 63, 47, 168, 175, 60, 198, 138, 234, 62, 125, 5, 117, 63, 171, 148, 214, 62, 129, 10, 107, 63, 169, 164, 182, 62, 127, 18, 91, 63, 126, 1, 125, 63, 199, 130, 250, 62, 197, 146, 218, 62, 125, 9, 109, 63, 172, 140, 230, 62, 129, 6, 115, 63, 104, 62, 3, 63, 30, 144, 95, 60, 56, 133, 117, 62, 104, 33, 61, 63, 103, 41, 45, 63, 51, 165, 53, 62, 108, 38, 51, 63, 70, 153, 77, 62, 165, 188, 134, 62, 109, 30, 67, 63, 239, 28, 70, 63, 170, 185, 140, 62, 172, 169, 172, 62, 240, 20, 86, 63, 241, 41, 44, 63, 26, 167, 49, 62, 243, 33, 60, 63, 30, 135, 113, 62, 35, 152, 207, 60, 218, 60, 6, 63, 236, 52, 22, 63, 45, 166, 179, 61, 184, 147, 216, 62, 246, 9, 108, 63, 186, 131, 248, 62, 247, 1, 124, 63, 239, 32, 62, 63, 81, 131, 121, 62, 237, 40, 46, 63, 77, 163, 57, 62, 247, 5, 116, 63, 185, 139, 232, 62, 23, 183, 17, 62, 241, 45, 36, 63, 178, 129, 252, 62, 4, 1, 126, 63, 176, 145, 220, 62, 3, 9, 110, 63, 28, 151, 81, 62, 242, 37, 52, 63, 246, 13, 100, 63, 183, 155, 200, 62, 124, 13, 101, 63, 195, 154, 202, 62, 48, 170, 171, 61, 101, 53, 21, 63, 44, 164, 55, 61, 105, 58, 11, 63, 72, 137, 109, 62, 108, 34, 59, 63, 49, 181, 21, 62, 102, 45, 37, 63, 123, 21, 85, 63, 159, 170, 170, 62, 109, 26, 75, 63, 166, 180, 150, 62, 130, 2, 123, 63, 173, 132, 246, 62, 161, 162, 186, 62, 123, 17, 93, 63, 122, 25, 77, 63, 158, 178, 154, 62, 110, 22, 83, 63, 168, 172, 166, 62, 65, 185, 13, 62, 106, 46, 35, 63, 102, 49, 29, 63, 93, 138, 235, 61, 60, 148, 87, 61, 101, 57, 13, 63, 40, 178, 155, 61, 105, 54, 19, 63, 128, 14, 99, 63, 170, 156, 198, 62};
.global .align 8 .f64 _ZN2wp11_svd_configIdE17QR_GIVENS_EPSILONE = 0d3D719799812DEA11;
.global .align 4 .u32 _ZN2wp11_svd_configIdE17JACOBI_ITERATIONSE = 8;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsIiE9GRID_TYPEE = 4;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsIxE9GRID_TYPEE = 5;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsIjE9GRID_TYPEE = 10;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsIfE9GRID_TYPEE = 1;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsIdE9GRID_TYPEE = 2;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsINS_5vec_tILj3EfEEE9GRID_TYPEE = 6;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsINS_5vec_tILj3EdEEE9GRID_TYPEE = 7;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsINS_5vec_tILj4EfEEE9GRID_TYPEE = 17;
.global .align 4 .u32 _ZN2wp6volume12pnano_traitsINS_5vec_tILj4EdEEE9GRID_TYPEE = 18;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9all_hostsE = 1;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_35_bitE = 2;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_37_bitE = 4;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_50_bitE = 8;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_52_bitE = 16;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_53_bitE = 32;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_60_bitE = 64;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_61_bitE = 128;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_62_bitE = 256;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_70_bitE = 512;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_72_bitE = 1024;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_75_bitE = 2048;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_80_bitE = 4096;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_86_bitE = 8192;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_87_bitE = 16384;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_89_bitE = 32768;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail9sm_90_bitE = 65536;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target6detail11all_devicesE = 131070;
.global .align 8 .b8 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target7is_hostE[8] = {1, 0, 0, 0, 0, 0, 0, 0};
.global .align 8 .b8 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target9is_deviceE[8] = {254, 255, 1, 0, 0, 0, 0, 0};
.global .align 8 .b8 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target10any_targetE[8] = {255, 255, 1, 0, 0, 0, 0, 0};
.global .align 8 .b8 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target9no_targetE[8];
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_35E = 35;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_37E = 37;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_50E = 50;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_52E = 52;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_53E = 53;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_60E = 60;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_61E = 61;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_62E = 62;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_70E = 70;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_72E = 72;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_75E = 75;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_80E = 80;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_86E = 86;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_87E = 87;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_89E = 89;
.global .align 8 .u64 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2nv6target5sm_90E = 90;
.global .align 4 .u32 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2wp6volume7CLOSESTE;
.global .align 4 .u32 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2wp6volume6LINEARE = 1;
.global .align 4 .u32 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2wp15LAUNCH_MAX_DIMSE = 4;
.global .align 4 .u32 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2wp14ARRAY_MAX_DIMSE = 4;
.global .align 4 .u32 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2wp18ARRAY_TYPE_REGULARE;
.global .align 4 .u32 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2wp18ARRAY_TYPE_INDEXEDE = 1;
.global .align 4 .u32 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2wp17ARRAY_TYPE_FABRICE = 2;
.global .align 4 .u32 _ZN67_INTERNAL_00000000_36_wp_warp_ipc_energy_inertia_energy_cu_953a223e2wp25ARRAY_TYPE_FABRIC_INDEXEDE = 3;
.global .align 1 .b8 $str[54] = {91, 67, 79, 79, 77, 97, 116, 114, 105, 120, 32, 79, 70, 66, 32, 69, 114, 114, 111, 114, 93, 9, 98, 108, 111, 99, 107, 95, 105, 110, 100, 101, 120, 58, 32, 37, 100, 44, 32, 115, 105, 122, 101, 58, 32, 37, 100, 33, 33, 33, 33, 33, 10, 0};

.visible .entry compute_inertia_energy_hess_affine_cuda_kernel_forward(
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_forward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_forward_param_1[184],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_forward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_forward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_forward_param_4[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_forward_param_5[56]
)
{
	.local .align 8 .b8 	__local_depot0[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<45>;
	.reg .b16 	%rs<83>;
	.reg .b32 	%r<192>;
	.reg .f64 	%fd<305>;
	.reg .b64 	%rd<290>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.v2.u32 	{%r75, %r76}, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_0];
	ld.param.v2.u32 	{%r77, %r78}, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_0+8];
	mov.b64 	%rd33, compute_inertia_energy_hess_affine_cuda_kernel_forward_param_1;
	ld.param.v2.u32 	{%r83, %r84}, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_2+32];
	ld.param.v2.u32 	{%r91, %r92}, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_3+32];
	ld.param.v2.u32 	{%r99, %r100}, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_4+32];
	ld.param.v2.u32 	{%r107, %r108}, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_5+32];
	ld.param.u64 	%rd40, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_5];
	ld.param.u64 	%rd38, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_4];
	ld.param.u64 	%rd36, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_3];
	ld.param.u64 	%rd34, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_2];
	ld.param.u64 	%rd32, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_0+24];
	ld.param.u32 	%r38, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_0+16];
	mov.u32 	%r111, %ntid.x;
	cvt.u64.u32 	%rd1, %r111;
	mov.u32 	%r112, %ctaid.x;
	mul.wide.u32 	%rd42, %r111, %r112;
	mov.u32 	%r113, %tid.x;
	cvt.u64.u32 	%rd43, %r113;
	add.s64 	%rd286, %rd42, %rd43;
	setp.ge.u64 	%p1, %rd286, %rd32;
	@%p1 bra 	$L__BB0_65;

	add.u64 	%rd44, %SP, 0;
	add.u64 	%rd4, %SPL, 0;
	cvta.to.global.u64 	%rd5, %rd40;
	cvta.to.global.u64 	%rd6, %rd38;
	cvta.to.global.u64 	%rd7, %rd34;
	cvt.s64.s32 	%rd8, %r78;
	cvt.s64.s32 	%rd9, %r77;
	cvt.s64.s32 	%rd10, %r76;
	cvt.s64.s32 	%rd11, %r91;
	cvt.s64.s32 	%rd12, %r99;
	cvt.s64.s32 	%rd13, %r107;
	mov.u32 	%r114, %nctaid.x;
	cvt.u64.u32 	%rd45, %r114;
	mul.lo.s64 	%rd14, %rd1, %rd45;
	cvt.s64.s32 	%rd15, %r83;
	cvta.to.global.u64 	%rd16, %rd36;
	mov.u64 	%rd17, %rd33;

$L__BB0_2:
	setp.lt.s32 	%p2, %r38, 4;
	mov.u64 	%rd287, %rd286;
	@%p2 bra 	$L__BB0_6;

	or.b64  	%rd46, %rd286, %rd8;
	and.b64  	%rd47, %rd46, -4294967296;
	setp.eq.s64 	%p3, %rd47, 0;
	@%p3 bra 	$L__BB0_5;

	div.u64 	%rd287, %rd286, %rd8;
	bra.uni 	$L__BB0_6;

$L__BB0_5:
	cvt.u32.u64 	%r115, %rd8;
	cvt.u32.u64 	%r116, %rd286;
	div.u32 	%r117, %r116, %r115;
	cvt.u64.u32 	%rd287, %r117;

$L__BB0_6:
	setp.lt.s32 	%p4, %r38, 3;
	@%p4 bra 	$L__BB0_10;

	or.b64  	%rd48, %rd287, %rd9;
	and.b64  	%rd49, %rd48, -4294967296;
	setp.eq.s64 	%p5, %rd49, 0;
	@%p5 bra 	$L__BB0_9;

	div.u64 	%rd287, %rd287, %rd9;
	bra.uni 	$L__BB0_10;

$L__BB0_9:
	cvt.u32.u64 	%r118, %rd9;
	cvt.u32.u64 	%r119, %rd287;
	div.u32 	%r120, %r119, %r118;
	cvt.u64.u32 	%rd287, %r120;

$L__BB0_10:
	setp.lt.s32 	%p6, %r38, 2;
	@%p6 bra 	$L__BB0_14;

	or.b64  	%rd50, %rd287, %rd10;
	and.b64  	%rd51, %rd50, -4294967296;
	setp.eq.s64 	%p7, %rd51, 0;
	@%p7 bra 	$L__BB0_13;

	div.u64 	%rd287, %rd287, %rd10;
	bra.uni 	$L__BB0_14;

$L__BB0_13:
	cvt.u32.u64 	%r121, %rd10;
	cvt.u32.u64 	%r122, %rd287;
	div.u32 	%r123, %r122, %r121;
	cvt.u64.u32 	%rd287, %r123;

$L__BB0_14:
	cvt.u32.u64 	%r124, %rd287;
	setp.gt.s32 	%p8, %r38, 0;
	selp.b32 	%r125, %r124, 0, %p8;
	cvt.s64.s32 	%rd28, %r125;
	mul.lo.s64 	%rd52, %rd28, %rd11;
	add.s64 	%rd53, %rd16, %rd52;
	mul.lo.s64 	%rd54, %rd28, %rd12;
	add.s64 	%rd55, %rd6, %rd54;
	ld.global.s32 	%rd56, [%rd55];
	mul.lo.s64 	%rd57, %rd56, %rd13;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.u32 	%r126, [%rd58];
	add.s32 	%r127, %r126, -1;
	setp.lt.u32 	%p9, %r127, 2;
	ld.global.u8 	%rs33, [%rd53];
	setp.ne.s16 	%p10, %rs33, 0;
	or.pred  	%p11, %p10, %p9;
	@%p11 bra 	$L__BB0_64;

	cvt.u32.u64 	%r128, %rd28;
	mul.lo.s64 	%rd59, %rd28, %rd15;
	add.s64 	%rd60, %rd7, %rd59;
	ld.global.f64 	%fd1, [%rd60+120];
	ld.global.f64 	%fd2, [%rd60+112];
	ld.global.f64 	%fd3, [%rd60+104];
	ld.global.f64 	%fd4, [%rd60+96];
	ld.global.f64 	%fd5, [%rd60+88];
	ld.global.f64 	%fd6, [%rd60+80];
	ld.global.f64 	%fd7, [%rd60+72];
	ld.global.f64 	%fd8, [%rd60+64];
	ld.global.f64 	%fd9, [%rd60+56];
	ld.global.f64 	%fd10, [%rd60+48];
	ld.global.f64 	%fd11, [%rd60+40];
	ld.global.f64 	%fd12, [%rd60+32];
	ld.global.f64 	%fd13, [%rd60+24];
	ld.global.f64 	%fd14, [%rd60+16];
	ld.global.f64 	%fd15, [%rd60+8];
	ld.global.f64 	%fd16, [%rd60];
	shl.b32 	%r2, %r128, 4;
	ld.param.u32 	%r3, [%rd17+172];
	setp.le.s32 	%p12, %r3, %r2;
	selp.u16 	%rs34, 1, 0, %p12;
	shr.u32 	%r129, %r128, 27;
	cvt.u16.u32 	%rs35, %r129;
	and.b16  	%rs36, %rs35, 1;
	or.b16  	%rs37, %rs36, %rs34;
	setp.eq.s16 	%p13, %rs37, 0;
	@%p13 bra 	$L__BB0_17;

	st.local.v2.u32 	[%rd4], {%r2, %r3};
	mov.u64 	%rd61, $str;
	cvta.global.u64 	%rd62, %rd61;
	{ // callseq 126, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd62;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r130, [retval0+0];
	} // callseq 126
	bra.uni 	$L__BB0_18;

$L__BB0_17:
	ld.param.u32 	%r131, [%rd17+144];
	mul.wide.s32 	%rd73, %r131, %r2;
	ld.param.u64 	%rd74, [%rd17+112];
	add.s64 	%rd64, %rd74, %rd73;
	// begin inline asm
	{ atom.add.f64 %fd17,[%rd64],%fd16; }

	// end inline asm
	add.s64 	%rd65, %rd64, 8;
	mov.f64 	%fd32, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd19,[%rd65],%fd32; }

	// end inline asm
	add.s64 	%rd66, %rd64, 16;
	// begin inline asm
	{ atom.add.f64 %fd21,[%rd66],%fd32; }

	// end inline asm
	add.s64 	%rd67, %rd64, 24;
	// begin inline asm
	{ atom.add.f64 %fd23,[%rd67],%fd32; }

	// end inline asm
	add.s64 	%rd68, %rd64, 32;
	// begin inline asm
	{ atom.add.f64 %fd25,[%rd68],%fd16; }

	// end inline asm
	add.s64 	%rd69, %rd64, 40;
	// begin inline asm
	{ atom.add.f64 %fd27,[%rd69],%fd32; }

	// end inline asm
	add.s64 	%rd70, %rd64, 48;
	// begin inline asm
	{ atom.add.f64 %fd29,[%rd70],%fd32; }

	// end inline asm
	add.s64 	%rd71, %rd64, 56;
	// begin inline asm
	{ atom.add.f64 %fd31,[%rd71],%fd32; }

	// end inline asm
	add.s64 	%rd72, %rd64, 64;
	// begin inline asm
	{ atom.add.f64 %fd33,[%rd72],%fd16; }

	// end inline asm

$L__BB0_18:
	ld.param.u32 	%r4, [%rd17+172];
	add.s32 	%r5, %r2, 1;
	setp.le.s32 	%p14, %r4, %r5;
	selp.u16 	%rs38, 1, 0, %p14;
	shr.u32 	%r132, %r5, 31;
	cvt.u16.u32 	%rs39, %r132;
	or.b16  	%rs40, %rs38, %rs39;
	setp.eq.s16 	%p15, %rs40, 0;
	@%p15 bra 	$L__BB0_20;

	add.s32 	%r177, %r2, 1;
	st.local.v2.u32 	[%rd4], {%r177, %r4};
	mov.u64 	%rd75, $str;
	cvta.global.u64 	%rd76, %rd75;
	{ // callseq 127, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd76;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r133, [retval0+0];
	} // callseq 127
	bra.uni 	$L__BB0_21;

$L__BB0_20:
	ld.param.u32 	%r134, [%rd17+144];
	mul.wide.s32 	%rd87, %r134, %r5;
	ld.param.u64 	%rd88, [%rd17+112];
	add.s64 	%rd78, %rd88, %rd87;
	// begin inline asm
	{ atom.add.f64 %fd35,[%rd78],%fd15; }

	// end inline asm
	add.s64 	%rd79, %rd78, 8;
	mov.f64 	%fd50, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd37,[%rd79],%fd50; }

	// end inline asm
	add.s64 	%rd80, %rd78, 16;
	// begin inline asm
	{ atom.add.f64 %fd39,[%rd80],%fd50; }

	// end inline asm
	add.s64 	%rd81, %rd78, 24;
	// begin inline asm
	{ atom.add.f64 %fd41,[%rd81],%fd50; }

	// end inline asm
	add.s64 	%rd82, %rd78, 32;
	// begin inline asm
	{ atom.add.f64 %fd43,[%rd82],%fd15; }

	// end inline asm
	add.s64 	%rd83, %rd78, 40;
	// begin inline asm
	{ atom.add.f64 %fd45,[%rd83],%fd50; }

	// end inline asm
	add.s64 	%rd84, %rd78, 48;
	// begin inline asm
	{ atom.add.f64 %fd47,[%rd84],%fd50; }

	// end inline asm
	add.s64 	%rd85, %rd78, 56;
	// begin inline asm
	{ atom.add.f64 %fd49,[%rd85],%fd50; }

	// end inline asm
	add.s64 	%rd86, %rd78, 64;
	// begin inline asm
	{ atom.add.f64 %fd51,[%rd86],%fd15; }

	// end inline asm

$L__BB0_21:
	ld.param.u32 	%r6, [%rd17+172];
	add.s32 	%r7, %r2, 2;
	setp.le.s32 	%p16, %r6, %r7;
	selp.u16 	%rs41, 1, 0, %p16;
	shr.u32 	%r135, %r7, 31;
	cvt.u16.u32 	%rs42, %r135;
	or.b16  	%rs43, %rs41, %rs42;
	setp.eq.s16 	%p17, %rs43, 0;
	@%p17 bra 	$L__BB0_23;

	add.s32 	%r178, %r2, 2;
	st.local.v2.u32 	[%rd4], {%r178, %r6};
	mov.u64 	%rd89, $str;
	cvta.global.u64 	%rd90, %rd89;
	{ // callseq 128, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd90;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r136, [retval0+0];
	} // callseq 128
	bra.uni 	$L__BB0_24;

$L__BB0_23:
	ld.param.u32 	%r137, [%rd17+144];
	mul.wide.s32 	%rd101, %r137, %r7;
	ld.param.u64 	%rd102, [%rd17+112];
	add.s64 	%rd92, %rd102, %rd101;
	// begin inline asm
	{ atom.add.f64 %fd53,[%rd92],%fd14; }

	// end inline asm
	add.s64 	%rd93, %rd92, 8;
	mov.f64 	%fd68, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd55,[%rd93],%fd68; }

	// end inline asm
	add.s64 	%rd94, %rd92, 16;
	// begin inline asm
	{ atom.add.f64 %fd57,[%rd94],%fd68; }

	// end inline asm
	add.s64 	%rd95, %rd92, 24;
	// begin inline asm
	{ atom.add.f64 %fd59,[%rd95],%fd68; }

	// end inline asm
	add.s64 	%rd96, %rd92, 32;
	// begin inline asm
	{ atom.add.f64 %fd61,[%rd96],%fd14; }

	// end inline asm
	add.s64 	%rd97, %rd92, 40;
	// begin inline asm
	{ atom.add.f64 %fd63,[%rd97],%fd68; }

	// end inline asm
	add.s64 	%rd98, %rd92, 48;
	// begin inline asm
	{ atom.add.f64 %fd65,[%rd98],%fd68; }

	// end inline asm
	add.s64 	%rd99, %rd92, 56;
	// begin inline asm
	{ atom.add.f64 %fd67,[%rd99],%fd68; }

	// end inline asm
	add.s64 	%rd100, %rd92, 64;
	// begin inline asm
	{ atom.add.f64 %fd69,[%rd100],%fd14; }

	// end inline asm

$L__BB0_24:
	ld.param.u32 	%r8, [%rd17+172];
	add.s32 	%r9, %r2, 3;
	setp.le.s32 	%p18, %r8, %r9;
	selp.u16 	%rs44, 1, 0, %p18;
	shr.u32 	%r138, %r9, 31;
	cvt.u16.u32 	%rs45, %r138;
	or.b16  	%rs46, %rs44, %rs45;
	setp.eq.s16 	%p19, %rs46, 0;
	@%p19 bra 	$L__BB0_26;

	add.s32 	%r179, %r2, 3;
	st.local.v2.u32 	[%rd4], {%r179, %r8};
	mov.u64 	%rd103, $str;
	cvta.global.u64 	%rd104, %rd103;
	{ // callseq 129, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd104;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r139, [retval0+0];
	} // callseq 129
	bra.uni 	$L__BB0_27;

$L__BB0_26:
	ld.param.u32 	%r140, [%rd17+144];
	mul.wide.s32 	%rd115, %r140, %r9;
	ld.param.u64 	%rd116, [%rd17+112];
	add.s64 	%rd106, %rd116, %rd115;
	// begin inline asm
	{ atom.add.f64 %fd71,[%rd106],%fd13; }

	// end inline asm
	add.s64 	%rd107, %rd106, 8;
	mov.f64 	%fd86, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd73,[%rd107],%fd86; }

	// end inline asm
	add.s64 	%rd108, %rd106, 16;
	// begin inline asm
	{ atom.add.f64 %fd75,[%rd108],%fd86; }

	// end inline asm
	add.s64 	%rd109, %rd106, 24;
	// begin inline asm
	{ atom.add.f64 %fd77,[%rd109],%fd86; }

	// end inline asm
	add.s64 	%rd110, %rd106, 32;
	// begin inline asm
	{ atom.add.f64 %fd79,[%rd110],%fd13; }

	// end inline asm
	add.s64 	%rd111, %rd106, 40;
	// begin inline asm
	{ atom.add.f64 %fd81,[%rd111],%fd86; }

	// end inline asm
	add.s64 	%rd112, %rd106, 48;
	// begin inline asm
	{ atom.add.f64 %fd83,[%rd112],%fd86; }

	// end inline asm
	add.s64 	%rd113, %rd106, 56;
	// begin inline asm
	{ atom.add.f64 %fd85,[%rd113],%fd86; }

	// end inline asm
	add.s64 	%rd114, %rd106, 64;
	// begin inline asm
	{ atom.add.f64 %fd87,[%rd114],%fd13; }

	// end inline asm

$L__BB0_27:
	ld.param.u32 	%r10, [%rd17+172];
	add.s32 	%r11, %r2, 4;
	setp.le.s32 	%p20, %r10, %r11;
	selp.u16 	%rs47, 1, 0, %p20;
	shr.u32 	%r141, %r11, 31;
	cvt.u16.u32 	%rs48, %r141;
	or.b16  	%rs49, %rs47, %rs48;
	setp.eq.s16 	%p21, %rs49, 0;
	@%p21 bra 	$L__BB0_29;

	add.s32 	%r180, %r2, 4;
	st.local.v2.u32 	[%rd4], {%r180, %r10};
	mov.u64 	%rd117, $str;
	cvta.global.u64 	%rd118, %rd117;
	{ // callseq 130, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd118;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r142, [retval0+0];
	} // callseq 130
	bra.uni 	$L__BB0_30;

$L__BB0_29:
	ld.param.u32 	%r143, [%rd17+144];
	mul.wide.s32 	%rd129, %r143, %r11;
	ld.param.u64 	%rd130, [%rd17+112];
	add.s64 	%rd120, %rd130, %rd129;
	// begin inline asm
	{ atom.add.f64 %fd89,[%rd120],%fd12; }

	// end inline asm
	add.s64 	%rd121, %rd120, 8;
	mov.f64 	%fd104, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd91,[%rd121],%fd104; }

	// end inline asm
	add.s64 	%rd122, %rd120, 16;
	// begin inline asm
	{ atom.add.f64 %fd93,[%rd122],%fd104; }

	// end inline asm
	add.s64 	%rd123, %rd120, 24;
	// begin inline asm
	{ atom.add.f64 %fd95,[%rd123],%fd104; }

	// end inline asm
	add.s64 	%rd124, %rd120, 32;
	// begin inline asm
	{ atom.add.f64 %fd97,[%rd124],%fd12; }

	// end inline asm
	add.s64 	%rd125, %rd120, 40;
	// begin inline asm
	{ atom.add.f64 %fd99,[%rd125],%fd104; }

	// end inline asm
	add.s64 	%rd126, %rd120, 48;
	// begin inline asm
	{ atom.add.f64 %fd101,[%rd126],%fd104; }

	// end inline asm
	add.s64 	%rd127, %rd120, 56;
	// begin inline asm
	{ atom.add.f64 %fd103,[%rd127],%fd104; }

	// end inline asm
	add.s64 	%rd128, %rd120, 64;
	// begin inline asm
	{ atom.add.f64 %fd105,[%rd128],%fd12; }

	// end inline asm

$L__BB0_30:
	ld.param.u32 	%r12, [%rd17+172];
	add.s32 	%r13, %r2, 5;
	setp.le.s32 	%p22, %r12, %r13;
	selp.u16 	%rs50, 1, 0, %p22;
	shr.u32 	%r144, %r13, 31;
	cvt.u16.u32 	%rs51, %r144;
	or.b16  	%rs52, %rs50, %rs51;
	setp.eq.s16 	%p23, %rs52, 0;
	@%p23 bra 	$L__BB0_32;

	add.s32 	%r181, %r2, 5;
	st.local.v2.u32 	[%rd4], {%r181, %r12};
	mov.u64 	%rd131, $str;
	cvta.global.u64 	%rd132, %rd131;
	{ // callseq 131, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd132;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r145, [retval0+0];
	} // callseq 131
	bra.uni 	$L__BB0_33;

$L__BB0_32:
	ld.param.u32 	%r146, [%rd17+144];
	mul.wide.s32 	%rd143, %r146, %r13;
	ld.param.u64 	%rd144, [%rd17+112];
	add.s64 	%rd134, %rd144, %rd143;
	// begin inline asm
	{ atom.add.f64 %fd107,[%rd134],%fd11; }

	// end inline asm
	add.s64 	%rd135, %rd134, 8;
	mov.f64 	%fd122, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd109,[%rd135],%fd122; }

	// end inline asm
	add.s64 	%rd136, %rd134, 16;
	// begin inline asm
	{ atom.add.f64 %fd111,[%rd136],%fd122; }

	// end inline asm
	add.s64 	%rd137, %rd134, 24;
	// begin inline asm
	{ atom.add.f64 %fd113,[%rd137],%fd122; }

	// end inline asm
	add.s64 	%rd138, %rd134, 32;
	// begin inline asm
	{ atom.add.f64 %fd115,[%rd138],%fd11; }

	// end inline asm
	add.s64 	%rd139, %rd134, 40;
	// begin inline asm
	{ atom.add.f64 %fd117,[%rd139],%fd122; }

	// end inline asm
	add.s64 	%rd140, %rd134, 48;
	// begin inline asm
	{ atom.add.f64 %fd119,[%rd140],%fd122; }

	// end inline asm
	add.s64 	%rd141, %rd134, 56;
	// begin inline asm
	{ atom.add.f64 %fd121,[%rd141],%fd122; }

	// end inline asm
	add.s64 	%rd142, %rd134, 64;
	// begin inline asm
	{ atom.add.f64 %fd123,[%rd142],%fd11; }

	// end inline asm

$L__BB0_33:
	ld.param.u32 	%r14, [%rd17+172];
	add.s32 	%r15, %r2, 6;
	setp.le.s32 	%p24, %r14, %r15;
	selp.u16 	%rs53, 1, 0, %p24;
	shr.u32 	%r147, %r15, 31;
	cvt.u16.u32 	%rs54, %r147;
	or.b16  	%rs55, %rs53, %rs54;
	setp.eq.s16 	%p25, %rs55, 0;
	@%p25 bra 	$L__BB0_35;

	add.s32 	%r182, %r2, 6;
	st.local.v2.u32 	[%rd4], {%r182, %r14};
	mov.u64 	%rd145, $str;
	cvta.global.u64 	%rd146, %rd145;
	{ // callseq 132, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd146;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r148, [retval0+0];
	} // callseq 132
	bra.uni 	$L__BB0_36;

$L__BB0_35:
	ld.param.u32 	%r149, [%rd17+144];
	mul.wide.s32 	%rd157, %r149, %r15;
	ld.param.u64 	%rd158, [%rd17+112];
	add.s64 	%rd148, %rd158, %rd157;
	// begin inline asm
	{ atom.add.f64 %fd125,[%rd148],%fd10; }

	// end inline asm
	add.s64 	%rd149, %rd148, 8;
	mov.f64 	%fd140, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd127,[%rd149],%fd140; }

	// end inline asm
	add.s64 	%rd150, %rd148, 16;
	// begin inline asm
	{ atom.add.f64 %fd129,[%rd150],%fd140; }

	// end inline asm
	add.s64 	%rd151, %rd148, 24;
	// begin inline asm
	{ atom.add.f64 %fd131,[%rd151],%fd140; }

	// end inline asm
	add.s64 	%rd152, %rd148, 32;
	// begin inline asm
	{ atom.add.f64 %fd133,[%rd152],%fd10; }

	// end inline asm
	add.s64 	%rd153, %rd148, 40;
	// begin inline asm
	{ atom.add.f64 %fd135,[%rd153],%fd140; }

	// end inline asm
	add.s64 	%rd154, %rd148, 48;
	// begin inline asm
	{ atom.add.f64 %fd137,[%rd154],%fd140; }

	// end inline asm
	add.s64 	%rd155, %rd148, 56;
	// begin inline asm
	{ atom.add.f64 %fd139,[%rd155],%fd140; }

	// end inline asm
	add.s64 	%rd156, %rd148, 64;
	// begin inline asm
	{ atom.add.f64 %fd141,[%rd156],%fd10; }

	// end inline asm

$L__BB0_36:
	ld.param.u32 	%r16, [%rd17+172];
	add.s32 	%r17, %r2, 7;
	setp.le.s32 	%p26, %r16, %r17;
	selp.u16 	%rs56, 1, 0, %p26;
	shr.u32 	%r150, %r17, 31;
	cvt.u16.u32 	%rs57, %r150;
	or.b16  	%rs58, %rs56, %rs57;
	setp.eq.s16 	%p27, %rs58, 0;
	@%p27 bra 	$L__BB0_38;

	add.s32 	%r183, %r2, 7;
	st.local.v2.u32 	[%rd4], {%r183, %r16};
	mov.u64 	%rd159, $str;
	cvta.global.u64 	%rd160, %rd159;
	{ // callseq 133, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd160;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r151, [retval0+0];
	} // callseq 133
	bra.uni 	$L__BB0_39;

$L__BB0_38:
	ld.param.u32 	%r152, [%rd17+144];
	mul.wide.s32 	%rd171, %r152, %r17;
	ld.param.u64 	%rd172, [%rd17+112];
	add.s64 	%rd162, %rd172, %rd171;
	// begin inline asm
	{ atom.add.f64 %fd143,[%rd162],%fd9; }

	// end inline asm
	add.s64 	%rd163, %rd162, 8;
	mov.f64 	%fd158, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd145,[%rd163],%fd158; }

	// end inline asm
	add.s64 	%rd164, %rd162, 16;
	// begin inline asm
	{ atom.add.f64 %fd147,[%rd164],%fd158; }

	// end inline asm
	add.s64 	%rd165, %rd162, 24;
	// begin inline asm
	{ atom.add.f64 %fd149,[%rd165],%fd158; }

	// end inline asm
	add.s64 	%rd166, %rd162, 32;
	// begin inline asm
	{ atom.add.f64 %fd151,[%rd166],%fd9; }

	// end inline asm
	add.s64 	%rd167, %rd162, 40;
	// begin inline asm
	{ atom.add.f64 %fd153,[%rd167],%fd158; }

	// end inline asm
	add.s64 	%rd168, %rd162, 48;
	// begin inline asm
	{ atom.add.f64 %fd155,[%rd168],%fd158; }

	// end inline asm
	add.s64 	%rd169, %rd162, 56;
	// begin inline asm
	{ atom.add.f64 %fd157,[%rd169],%fd158; }

	// end inline asm
	add.s64 	%rd170, %rd162, 64;
	// begin inline asm
	{ atom.add.f64 %fd159,[%rd170],%fd9; }

	// end inline asm

$L__BB0_39:
	ld.param.u32 	%r18, [%rd17+172];
	add.s32 	%r19, %r2, 8;
	setp.le.s32 	%p28, %r18, %r19;
	selp.u16 	%rs59, 1, 0, %p28;
	shr.u32 	%r153, %r19, 31;
	cvt.u16.u32 	%rs60, %r153;
	or.b16  	%rs61, %rs59, %rs60;
	setp.eq.s16 	%p29, %rs61, 0;
	@%p29 bra 	$L__BB0_41;

	add.s32 	%r184, %r2, 8;
	st.local.v2.u32 	[%rd4], {%r184, %r18};
	mov.u64 	%rd173, $str;
	cvta.global.u64 	%rd174, %rd173;
	{ // callseq 134, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd174;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r154, [retval0+0];
	} // callseq 134
	bra.uni 	$L__BB0_42;

$L__BB0_41:
	ld.param.u32 	%r155, [%rd17+144];
	mul.wide.s32 	%rd185, %r155, %r19;
	ld.param.u64 	%rd186, [%rd17+112];
	add.s64 	%rd176, %rd186, %rd185;
	// begin inline asm
	{ atom.add.f64 %fd161,[%rd176],%fd8; }

	// end inline asm
	add.s64 	%rd177, %rd176, 8;
	mov.f64 	%fd176, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd163,[%rd177],%fd176; }

	// end inline asm
	add.s64 	%rd178, %rd176, 16;
	// begin inline asm
	{ atom.add.f64 %fd165,[%rd178],%fd176; }

	// end inline asm
	add.s64 	%rd179, %rd176, 24;
	// begin inline asm
	{ atom.add.f64 %fd167,[%rd179],%fd176; }

	// end inline asm
	add.s64 	%rd180, %rd176, 32;
	// begin inline asm
	{ atom.add.f64 %fd169,[%rd180],%fd8; }

	// end inline asm
	add.s64 	%rd181, %rd176, 40;
	// begin inline asm
	{ atom.add.f64 %fd171,[%rd181],%fd176; }

	// end inline asm
	add.s64 	%rd182, %rd176, 48;
	// begin inline asm
	{ atom.add.f64 %fd173,[%rd182],%fd176; }

	// end inline asm
	add.s64 	%rd183, %rd176, 56;
	// begin inline asm
	{ atom.add.f64 %fd175,[%rd183],%fd176; }

	// end inline asm
	add.s64 	%rd184, %rd176, 64;
	// begin inline asm
	{ atom.add.f64 %fd177,[%rd184],%fd8; }

	// end inline asm

$L__BB0_42:
	ld.param.u32 	%r20, [%rd17+172];
	add.s32 	%r21, %r2, 9;
	setp.le.s32 	%p30, %r20, %r21;
	selp.u16 	%rs62, 1, 0, %p30;
	shr.u32 	%r156, %r21, 31;
	cvt.u16.u32 	%rs63, %r156;
	or.b16  	%rs64, %rs62, %rs63;
	setp.eq.s16 	%p31, %rs64, 0;
	@%p31 bra 	$L__BB0_44;

	add.s32 	%r185, %r2, 9;
	st.local.v2.u32 	[%rd4], {%r185, %r20};
	mov.u64 	%rd187, $str;
	cvta.global.u64 	%rd188, %rd187;
	{ // callseq 135, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd188;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r157, [retval0+0];
	} // callseq 135
	bra.uni 	$L__BB0_45;

$L__BB0_44:
	ld.param.u32 	%r158, [%rd17+144];
	mul.wide.s32 	%rd199, %r158, %r21;
	ld.param.u64 	%rd200, [%rd17+112];
	add.s64 	%rd190, %rd200, %rd199;
	// begin inline asm
	{ atom.add.f64 %fd179,[%rd190],%fd7; }

	// end inline asm
	add.s64 	%rd191, %rd190, 8;
	mov.f64 	%fd194, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd181,[%rd191],%fd194; }

	// end inline asm
	add.s64 	%rd192, %rd190, 16;
	// begin inline asm
	{ atom.add.f64 %fd183,[%rd192],%fd194; }

	// end inline asm
	add.s64 	%rd193, %rd190, 24;
	// begin inline asm
	{ atom.add.f64 %fd185,[%rd193],%fd194; }

	// end inline asm
	add.s64 	%rd194, %rd190, 32;
	// begin inline asm
	{ atom.add.f64 %fd187,[%rd194],%fd7; }

	// end inline asm
	add.s64 	%rd195, %rd190, 40;
	// begin inline asm
	{ atom.add.f64 %fd189,[%rd195],%fd194; }

	// end inline asm
	add.s64 	%rd196, %rd190, 48;
	// begin inline asm
	{ atom.add.f64 %fd191,[%rd196],%fd194; }

	// end inline asm
	add.s64 	%rd197, %rd190, 56;
	// begin inline asm
	{ atom.add.f64 %fd193,[%rd197],%fd194; }

	// end inline asm
	add.s64 	%rd198, %rd190, 64;
	// begin inline asm
	{ atom.add.f64 %fd195,[%rd198],%fd7; }

	// end inline asm

$L__BB0_45:
	ld.param.u32 	%r22, [%rd17+172];
	add.s32 	%r23, %r2, 10;
	setp.le.s32 	%p32, %r22, %r23;
	selp.u16 	%rs65, 1, 0, %p32;
	shr.u32 	%r159, %r23, 31;
	cvt.u16.u32 	%rs66, %r159;
	or.b16  	%rs67, %rs65, %rs66;
	setp.eq.s16 	%p33, %rs67, 0;
	@%p33 bra 	$L__BB0_47;

	add.s32 	%r186, %r2, 10;
	st.local.v2.u32 	[%rd4], {%r186, %r22};
	mov.u64 	%rd201, $str;
	cvta.global.u64 	%rd202, %rd201;
	{ // callseq 136, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd202;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r160, [retval0+0];
	} // callseq 136
	bra.uni 	$L__BB0_48;

$L__BB0_47:
	ld.param.u32 	%r161, [%rd17+144];
	mul.wide.s32 	%rd213, %r161, %r23;
	ld.param.u64 	%rd214, [%rd17+112];
	add.s64 	%rd204, %rd214, %rd213;
	// begin inline asm
	{ atom.add.f64 %fd197,[%rd204],%fd6; }

	// end inline asm
	add.s64 	%rd205, %rd204, 8;
	mov.f64 	%fd212, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd199,[%rd205],%fd212; }

	// end inline asm
	add.s64 	%rd206, %rd204, 16;
	// begin inline asm
	{ atom.add.f64 %fd201,[%rd206],%fd212; }

	// end inline asm
	add.s64 	%rd207, %rd204, 24;
	// begin inline asm
	{ atom.add.f64 %fd203,[%rd207],%fd212; }

	// end inline asm
	add.s64 	%rd208, %rd204, 32;
	// begin inline asm
	{ atom.add.f64 %fd205,[%rd208],%fd6; }

	// end inline asm
	add.s64 	%rd209, %rd204, 40;
	// begin inline asm
	{ atom.add.f64 %fd207,[%rd209],%fd212; }

	// end inline asm
	add.s64 	%rd210, %rd204, 48;
	// begin inline asm
	{ atom.add.f64 %fd209,[%rd210],%fd212; }

	// end inline asm
	add.s64 	%rd211, %rd204, 56;
	// begin inline asm
	{ atom.add.f64 %fd211,[%rd211],%fd212; }

	// end inline asm
	add.s64 	%rd212, %rd204, 64;
	// begin inline asm
	{ atom.add.f64 %fd213,[%rd212],%fd6; }

	// end inline asm

$L__BB0_48:
	ld.param.u32 	%r24, [%rd17+172];
	add.s32 	%r25, %r2, 11;
	setp.le.s32 	%p34, %r24, %r25;
	selp.u16 	%rs68, 1, 0, %p34;
	shr.u32 	%r162, %r25, 31;
	cvt.u16.u32 	%rs69, %r162;
	or.b16  	%rs70, %rs68, %rs69;
	setp.eq.s16 	%p35, %rs70, 0;
	@%p35 bra 	$L__BB0_50;

	add.s32 	%r187, %r2, 11;
	st.local.v2.u32 	[%rd4], {%r187, %r24};
	mov.u64 	%rd215, $str;
	cvta.global.u64 	%rd216, %rd215;
	{ // callseq 137, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd216;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r163, [retval0+0];
	} // callseq 137
	bra.uni 	$L__BB0_51;

$L__BB0_50:
	ld.param.u32 	%r164, [%rd17+144];
	mul.wide.s32 	%rd227, %r164, %r25;
	ld.param.u64 	%rd228, [%rd17+112];
	add.s64 	%rd218, %rd228, %rd227;
	// begin inline asm
	{ atom.add.f64 %fd215,[%rd218],%fd5; }

	// end inline asm
	add.s64 	%rd219, %rd218, 8;
	mov.f64 	%fd230, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd217,[%rd219],%fd230; }

	// end inline asm
	add.s64 	%rd220, %rd218, 16;
	// begin inline asm
	{ atom.add.f64 %fd219,[%rd220],%fd230; }

	// end inline asm
	add.s64 	%rd221, %rd218, 24;
	// begin inline asm
	{ atom.add.f64 %fd221,[%rd221],%fd230; }

	// end inline asm
	add.s64 	%rd222, %rd218, 32;
	// begin inline asm
	{ atom.add.f64 %fd223,[%rd222],%fd5; }

	// end inline asm
	add.s64 	%rd223, %rd218, 40;
	// begin inline asm
	{ atom.add.f64 %fd225,[%rd223],%fd230; }

	// end inline asm
	add.s64 	%rd224, %rd218, 48;
	// begin inline asm
	{ atom.add.f64 %fd227,[%rd224],%fd230; }

	// end inline asm
	add.s64 	%rd225, %rd218, 56;
	// begin inline asm
	{ atom.add.f64 %fd229,[%rd225],%fd230; }

	// end inline asm
	add.s64 	%rd226, %rd218, 64;
	// begin inline asm
	{ atom.add.f64 %fd231,[%rd226],%fd5; }

	// end inline asm

$L__BB0_51:
	ld.param.u32 	%r26, [%rd17+172];
	add.s32 	%r27, %r2, 12;
	setp.le.s32 	%p36, %r26, %r27;
	selp.u16 	%rs71, 1, 0, %p36;
	shr.u32 	%r165, %r27, 31;
	cvt.u16.u32 	%rs72, %r165;
	or.b16  	%rs73, %rs71, %rs72;
	setp.eq.s16 	%p37, %rs73, 0;
	@%p37 bra 	$L__BB0_53;

	add.s32 	%r188, %r2, 12;
	st.local.v2.u32 	[%rd4], {%r188, %r26};
	mov.u64 	%rd229, $str;
	cvta.global.u64 	%rd230, %rd229;
	{ // callseq 138, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd230;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r166, [retval0+0];
	} // callseq 138
	bra.uni 	$L__BB0_54;

$L__BB0_53:
	ld.param.u32 	%r167, [%rd17+144];
	mul.wide.s32 	%rd241, %r167, %r27;
	ld.param.u64 	%rd242, [%rd17+112];
	add.s64 	%rd232, %rd242, %rd241;
	// begin inline asm
	{ atom.add.f64 %fd233,[%rd232],%fd4; }

	// end inline asm
	add.s64 	%rd233, %rd232, 8;
	mov.f64 	%fd248, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd235,[%rd233],%fd248; }

	// end inline asm
	add.s64 	%rd234, %rd232, 16;
	// begin inline asm
	{ atom.add.f64 %fd237,[%rd234],%fd248; }

	// end inline asm
	add.s64 	%rd235, %rd232, 24;
	// begin inline asm
	{ atom.add.f64 %fd239,[%rd235],%fd248; }

	// end inline asm
	add.s64 	%rd236, %rd232, 32;
	// begin inline asm
	{ atom.add.f64 %fd241,[%rd236],%fd4; }

	// end inline asm
	add.s64 	%rd237, %rd232, 40;
	// begin inline asm
	{ atom.add.f64 %fd243,[%rd237],%fd248; }

	// end inline asm
	add.s64 	%rd238, %rd232, 48;
	// begin inline asm
	{ atom.add.f64 %fd245,[%rd238],%fd248; }

	// end inline asm
	add.s64 	%rd239, %rd232, 56;
	// begin inline asm
	{ atom.add.f64 %fd247,[%rd239],%fd248; }

	// end inline asm
	add.s64 	%rd240, %rd232, 64;
	// begin inline asm
	{ atom.add.f64 %fd249,[%rd240],%fd4; }

	// end inline asm

$L__BB0_54:
	ld.param.u32 	%r28, [%rd17+172];
	add.s32 	%r29, %r2, 13;
	setp.le.s32 	%p38, %r28, %r29;
	selp.u16 	%rs74, 1, 0, %p38;
	shr.u32 	%r168, %r29, 31;
	cvt.u16.u32 	%rs75, %r168;
	or.b16  	%rs76, %rs74, %rs75;
	setp.eq.s16 	%p39, %rs76, 0;
	@%p39 bra 	$L__BB0_56;

	add.s32 	%r189, %r2, 13;
	st.local.v2.u32 	[%rd4], {%r189, %r28};
	mov.u64 	%rd243, $str;
	cvta.global.u64 	%rd244, %rd243;
	{ // callseq 139, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd244;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r169, [retval0+0];
	} // callseq 139
	bra.uni 	$L__BB0_57;

$L__BB0_56:
	ld.param.u32 	%r170, [%rd17+144];
	mul.wide.s32 	%rd255, %r170, %r29;
	ld.param.u64 	%rd256, [%rd17+112];
	add.s64 	%rd246, %rd256, %rd255;
	// begin inline asm
	{ atom.add.f64 %fd251,[%rd246],%fd3; }

	// end inline asm
	add.s64 	%rd247, %rd246, 8;
	mov.f64 	%fd266, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd253,[%rd247],%fd266; }

	// end inline asm
	add.s64 	%rd248, %rd246, 16;
	// begin inline asm
	{ atom.add.f64 %fd255,[%rd248],%fd266; }

	// end inline asm
	add.s64 	%rd249, %rd246, 24;
	// begin inline asm
	{ atom.add.f64 %fd257,[%rd249],%fd266; }

	// end inline asm
	add.s64 	%rd250, %rd246, 32;
	// begin inline asm
	{ atom.add.f64 %fd259,[%rd250],%fd3; }

	// end inline asm
	add.s64 	%rd251, %rd246, 40;
	// begin inline asm
	{ atom.add.f64 %fd261,[%rd251],%fd266; }

	// end inline asm
	add.s64 	%rd252, %rd246, 48;
	// begin inline asm
	{ atom.add.f64 %fd263,[%rd252],%fd266; }

	// end inline asm
	add.s64 	%rd253, %rd246, 56;
	// begin inline asm
	{ atom.add.f64 %fd265,[%rd253],%fd266; }

	// end inline asm
	add.s64 	%rd254, %rd246, 64;
	// begin inline asm
	{ atom.add.f64 %fd267,[%rd254],%fd3; }

	// end inline asm

$L__BB0_57:
	ld.param.u32 	%r30, [%rd17+172];
	add.s32 	%r31, %r2, 14;
	setp.le.s32 	%p40, %r30, %r31;
	selp.u16 	%rs77, 1, 0, %p40;
	shr.u32 	%r171, %r31, 31;
	cvt.u16.u32 	%rs78, %r171;
	or.b16  	%rs79, %rs77, %rs78;
	setp.eq.s16 	%p41, %rs79, 0;
	@%p41 bra 	$L__BB0_59;

	add.s32 	%r190, %r2, 14;
	st.local.v2.u32 	[%rd4], {%r190, %r30};
	mov.u64 	%rd257, $str;
	cvta.global.u64 	%rd258, %rd257;
	{ // callseq 140, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd258;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r172, [retval0+0];
	} // callseq 140
	bra.uni 	$L__BB0_60;

$L__BB0_59:
	ld.param.u32 	%r173, [%rd17+144];
	mul.wide.s32 	%rd269, %r173, %r31;
	ld.param.u64 	%rd270, [%rd17+112];
	add.s64 	%rd260, %rd270, %rd269;
	// begin inline asm
	{ atom.add.f64 %fd269,[%rd260],%fd2; }

	// end inline asm
	add.s64 	%rd261, %rd260, 8;
	mov.f64 	%fd284, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd271,[%rd261],%fd284; }

	// end inline asm
	add.s64 	%rd262, %rd260, 16;
	// begin inline asm
	{ atom.add.f64 %fd273,[%rd262],%fd284; }

	// end inline asm
	add.s64 	%rd263, %rd260, 24;
	// begin inline asm
	{ atom.add.f64 %fd275,[%rd263],%fd284; }

	// end inline asm
	add.s64 	%rd264, %rd260, 32;
	// begin inline asm
	{ atom.add.f64 %fd277,[%rd264],%fd2; }

	// end inline asm
	add.s64 	%rd265, %rd260, 40;
	// begin inline asm
	{ atom.add.f64 %fd279,[%rd265],%fd284; }

	// end inline asm
	add.s64 	%rd266, %rd260, 48;
	// begin inline asm
	{ atom.add.f64 %fd281,[%rd266],%fd284; }

	// end inline asm
	add.s64 	%rd267, %rd260, 56;
	// begin inline asm
	{ atom.add.f64 %fd283,[%rd267],%fd284; }

	// end inline asm
	add.s64 	%rd268, %rd260, 64;
	// begin inline asm
	{ atom.add.f64 %fd285,[%rd268],%fd2; }

	// end inline asm

$L__BB0_60:
	ld.param.u32 	%r32, [%rd17+172];
	add.s32 	%r33, %r2, 15;
	setp.le.s32 	%p42, %r32, %r33;
	selp.u16 	%rs80, 1, 0, %p42;
	shr.u32 	%r174, %r33, 31;
	cvt.u16.u32 	%rs81, %r174;
	or.b16  	%rs82, %rs80, %rs81;
	setp.eq.s16 	%p43, %rs82, 0;
	@%p43 bra 	$L__BB0_62;

	add.s32 	%r191, %r2, 15;
	st.local.v2.u32 	[%rd4], {%r191, %r32};
	mov.u64 	%rd271, $str;
	cvta.global.u64 	%rd272, %rd271;
	{ // callseq 141, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd272;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd44;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r175, [retval0+0];
	} // callseq 141
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	ld.param.u32 	%r176, [%rd17+144];
	mul.wide.s32 	%rd283, %r176, %r33;
	ld.param.u64 	%rd284, [%rd17+112];
	add.s64 	%rd274, %rd284, %rd283;
	// begin inline asm
	{ atom.add.f64 %fd287,[%rd274],%fd1; }

	// end inline asm
	add.s64 	%rd275, %rd274, 8;
	mov.f64 	%fd302, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd289,[%rd275],%fd302; }

	// end inline asm
	add.s64 	%rd276, %rd274, 16;
	// begin inline asm
	{ atom.add.f64 %fd291,[%rd276],%fd302; }

	// end inline asm
	add.s64 	%rd277, %rd274, 24;
	// begin inline asm
	{ atom.add.f64 %fd293,[%rd277],%fd302; }

	// end inline asm
	add.s64 	%rd278, %rd274, 32;
	// begin inline asm
	{ atom.add.f64 %fd295,[%rd278],%fd1; }

	// end inline asm
	add.s64 	%rd279, %rd274, 40;
	// begin inline asm
	{ atom.add.f64 %fd297,[%rd279],%fd302; }

	// end inline asm
	add.s64 	%rd280, %rd274, 48;
	// begin inline asm
	{ atom.add.f64 %fd299,[%rd280],%fd302; }

	// end inline asm
	add.s64 	%rd281, %rd274, 56;
	// begin inline asm
	{ atom.add.f64 %fd301,[%rd281],%fd302; }

	// end inline asm
	add.s64 	%rd282, %rd274, 64;
	// begin inline asm
	{ atom.add.f64 %fd303,[%rd282],%fd1; }

	// end inline asm

$L__BB0_64:
	ld.param.u64 	%rd285, [compute_inertia_energy_hess_affine_cuda_kernel_forward_param_0+24];
	add.s64 	%rd286, %rd286, %rd14;
	setp.lt.u64 	%p44, %rd286, %rd285;
	@%p44 bra 	$L__BB0_2;

$L__BB0_65:
	ret;

}
	// .globl	compute_inertia_energy_hess_affine_cuda_kernel_backward
.visible .entry compute_inertia_energy_hess_affine_cuda_kernel_backward(
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_1[184],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_4[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_5[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_6[184],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_7[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_8[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_9[56],
	.param .align 8 .b8 compute_inertia_energy_hess_affine_cuda_kernel_backward_param_10[56]
)
{
	.local .align 8 .b8 	__local_depot1[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<96>;
	.reg .b16 	%rs<127>;
	.reg .b32 	%r<283>;
	.reg .f64 	%fd<734>;
	.reg .b64 	%rd<439>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.v2.u32 	{%r100, %r101}, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_0];
	ld.param.v2.u32 	{%r102, %r103}, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_0+8];
	mov.b64 	%rd50, compute_inertia_energy_hess_affine_cuda_kernel_backward_param_1;
	ld.param.v2.u32 	{%r108, %r109}, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_2+32];
	ld.param.v2.u32 	{%r116, %r117}, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_3+32];
	ld.param.v2.u32 	{%r124, %r125}, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_4+32];
	ld.param.v2.u32 	{%r132, %r133}, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_5+32];
	ld.param.v2.u32 	{%r140, %r141}, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_7+32];
	ld.param.u64 	%rd59, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_7];
	ld.param.u64 	%rd57, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_5];
	ld.param.u64 	%rd55, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_4];
	ld.param.u64 	%rd53, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_3];
	ld.param.u64 	%rd52, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_2+8];
	ld.param.u64 	%rd49, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_0+24];
	ld.param.u32 	%r54, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_0+16];
	mov.u32 	%r144, %ntid.x;
	cvt.u64.u32 	%rd1, %r144;
	mov.u32 	%r145, %ctaid.x;
	mul.wide.u32 	%rd61, %r144, %r145;
	mov.u32 	%r146, %tid.x;
	cvt.u64.u32 	%rd62, %r146;
	add.s64 	%rd435, %rd61, %rd62;
	setp.ge.u64 	%p1, %rd435, %rd49;
	@%p1 bra 	$L__BB1_132;

	add.u64 	%rd63, %SP, 0;
	add.u64 	%rd6, %SPL, 0;
	cvta.to.global.u64 	%rd7, %rd57;
	cvta.to.global.u64 	%rd8, %rd55;
	cvt.s64.s32 	%rd9, %r103;
	cvt.s64.s32 	%rd10, %r102;
	cvt.s64.s32 	%rd11, %r101;
	cvt.s64.s32 	%rd12, %r116;
	cvt.s64.s32 	%rd13, %r124;
	cvt.s64.s32 	%rd14, %r132;
	mov.u32 	%r147, %nctaid.x;
	cvt.u64.u32 	%rd64, %r147;
	mul.lo.s64 	%rd15, %rd1, %rd64;
	cvt.s64.s32 	%rd16, %r108;
	mov.u64 	%rd65, %rd50;
	add.s64 	%rd17, %rd65, 172;
	cvt.s64.s32 	%rd18, %r140;
	cvta.to.global.u64 	%rd19, %rd53;

$L__BB1_2:
	setp.lt.s32 	%p2, %r54, 4;
	mov.u64 	%rd436, %rd435;
	@%p2 bra 	$L__BB1_6;

	or.b64  	%rd66, %rd435, %rd9;
	and.b64  	%rd67, %rd66, -4294967296;
	setp.eq.s64 	%p3, %rd67, 0;
	@%p3 bra 	$L__BB1_5;

	div.u64 	%rd436, %rd435, %rd9;
	bra.uni 	$L__BB1_6;

$L__BB1_5:
	cvt.u32.u64 	%r148, %rd9;
	cvt.u32.u64 	%r149, %rd435;
	div.u32 	%r150, %r149, %r148;
	cvt.u64.u32 	%rd436, %r150;

$L__BB1_6:
	setp.lt.s32 	%p4, %r54, 3;
	@%p4 bra 	$L__BB1_10;

	or.b64  	%rd68, %rd436, %rd10;
	and.b64  	%rd69, %rd68, -4294967296;
	setp.eq.s64 	%p5, %rd69, 0;
	@%p5 bra 	$L__BB1_9;

	div.u64 	%rd436, %rd436, %rd10;
	bra.uni 	$L__BB1_10;

$L__BB1_9:
	cvt.u32.u64 	%r151, %rd10;
	cvt.u32.u64 	%r152, %rd436;
	div.u32 	%r153, %r152, %r151;
	cvt.u64.u32 	%rd436, %r153;

$L__BB1_10:
	setp.lt.s32 	%p6, %r54, 2;
	@%p6 bra 	$L__BB1_14;

	or.b64  	%rd70, %rd436, %rd11;
	and.b64  	%rd71, %rd70, -4294967296;
	setp.eq.s64 	%p7, %rd71, 0;
	@%p7 bra 	$L__BB1_13;

	div.u64 	%rd436, %rd436, %rd11;
	bra.uni 	$L__BB1_14;

$L__BB1_13:
	cvt.u32.u64 	%r154, %rd11;
	cvt.u32.u64 	%r155, %rd436;
	div.u32 	%r156, %r155, %r154;
	cvt.u64.u32 	%rd436, %r156;

$L__BB1_14:
	cvt.u32.u64 	%r157, %rd436;
	setp.gt.s32 	%p8, %r54, 0;
	selp.b32 	%r158, %r157, 0, %p8;
	cvt.s64.s32 	%rd30, %r158;
	mul.lo.s64 	%rd72, %rd30, %rd12;
	add.s64 	%rd73, %rd19, %rd72;
	mul.lo.s64 	%rd74, %rd30, %rd13;
	add.s64 	%rd75, %rd8, %rd74;
	ld.global.s32 	%rd76, [%rd75];
	mul.lo.s64 	%rd77, %rd76, %rd14;
	add.s64 	%rd78, %rd7, %rd77;
	ld.global.u32 	%r159, [%rd78];
	add.s32 	%r160, %r159, -1;
	setp.lt.u32 	%p9, %r160, 2;
	ld.global.u8 	%rs57, [%rd73];
	setp.ne.s16 	%p10, %rs57, 0;
	or.pred  	%p11, %p10, %p9;
	@%p11 bra 	$L__BB1_131;

	cvt.u32.u64 	%r161, %rd30;
	shl.b32 	%r2, %r161, 4;
	ld.param.u32 	%r3, [%rd17];
	setp.le.s32 	%p12, %r3, %r2;
	selp.u16 	%rs58, 1, 0, %p12;
	shr.u32 	%r162, %r161, 27;
	cvt.u16.u32 	%rs59, %r162;
	and.b16  	%rs1, %rs59, 1;
	or.b16  	%rs60, %rs1, %rs58;
	setp.eq.s16 	%p13, %rs60, 0;
	@%p13 bra 	$L__BB1_17;

	st.local.v2.u32 	[%rd6], {%r2, %r3};
	mov.u64 	%rd79, $str;
	cvta.global.u64 	%rd80, %rd79;
	{ // callseq 142, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd80;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r163, [retval0+0];
	} // callseq 142
	bra.uni 	$L__BB1_18;

$L__BB1_17:
	ld.param.u32 	%r164, [%rd17+-28];
	mul.wide.s32 	%rd91, %r164, %r2;
	ld.param.u64 	%rd92, [%rd17+-60];
	add.s64 	%rd82, %rd92, %rd91;
	mov.f64 	%fd217, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd200,[%rd82],%fd217; }

	// end inline asm
	add.s64 	%rd83, %rd82, 8;
	// begin inline asm
	{ atom.add.f64 %fd202,[%rd83],%fd217; }

	// end inline asm
	add.s64 	%rd84, %rd82, 16;
	// begin inline asm
	{ atom.add.f64 %fd204,[%rd84],%fd217; }

	// end inline asm
	add.s64 	%rd85, %rd82, 24;
	// begin inline asm
	{ atom.add.f64 %fd206,[%rd85],%fd217; }

	// end inline asm
	add.s64 	%rd86, %rd82, 32;
	// begin inline asm
	{ atom.add.f64 %fd208,[%rd86],%fd217; }

	// end inline asm
	add.s64 	%rd87, %rd82, 40;
	// begin inline asm
	{ atom.add.f64 %fd210,[%rd87],%fd217; }

	// end inline asm
	add.s64 	%rd88, %rd82, 48;
	// begin inline asm
	{ atom.add.f64 %fd212,[%rd88],%fd217; }

	// end inline asm
	add.s64 	%rd89, %rd82, 56;
	// begin inline asm
	{ atom.add.f64 %fd214,[%rd89],%fd217; }

	// end inline asm
	add.s64 	%rd90, %rd82, 64;
	// begin inline asm
	{ atom.add.f64 %fd216,[%rd90],%fd217; }

	// end inline asm

$L__BB1_18:
	ld.param.u32 	%r4, [%rd17];
	add.s32 	%r5, %r2, 1;
	setp.le.s32 	%p14, %r4, %r5;
	selp.u16 	%rs61, 1, 0, %p14;
	shr.u32 	%r165, %r5, 31;
	cvt.u16.u32 	%rs2, %r165;
	or.b16  	%rs62, %rs61, %rs2;
	setp.eq.s16 	%p15, %rs62, 0;
	@%p15 bra 	$L__BB1_20;

	add.s32 	%r242, %r2, 1;
	st.local.v2.u32 	[%rd6], {%r242, %r4};
	mov.u64 	%rd93, $str;
	cvta.global.u64 	%rd94, %rd93;
	{ // callseq 143, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd94;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r166, [retval0+0];
	} // callseq 143
	bra.uni 	$L__BB1_21;

$L__BB1_20:
	ld.param.u32 	%r167, [%rd17+-28];
	mul.wide.s32 	%rd105, %r167, %r5;
	ld.param.u64 	%rd106, [%rd17+-60];
	add.s64 	%rd96, %rd106, %rd105;
	mov.f64 	%fd235, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd218,[%rd96],%fd235; }

	// end inline asm
	add.s64 	%rd97, %rd96, 8;
	// begin inline asm
	{ atom.add.f64 %fd220,[%rd97],%fd235; }

	// end inline asm
	add.s64 	%rd98, %rd96, 16;
	// begin inline asm
	{ atom.add.f64 %fd222,[%rd98],%fd235; }

	// end inline asm
	add.s64 	%rd99, %rd96, 24;
	// begin inline asm
	{ atom.add.f64 %fd224,[%rd99],%fd235; }

	// end inline asm
	add.s64 	%rd100, %rd96, 32;
	// begin inline asm
	{ atom.add.f64 %fd226,[%rd100],%fd235; }

	// end inline asm
	add.s64 	%rd101, %rd96, 40;
	// begin inline asm
	{ atom.add.f64 %fd228,[%rd101],%fd235; }

	// end inline asm
	add.s64 	%rd102, %rd96, 48;
	// begin inline asm
	{ atom.add.f64 %fd230,[%rd102],%fd235; }

	// end inline asm
	add.s64 	%rd103, %rd96, 56;
	// begin inline asm
	{ atom.add.f64 %fd232,[%rd103],%fd235; }

	// end inline asm
	add.s64 	%rd104, %rd96, 64;
	// begin inline asm
	{ atom.add.f64 %fd234,[%rd104],%fd235; }

	// end inline asm

$L__BB1_21:
	ld.param.u32 	%r6, [%rd17];
	add.s32 	%r7, %r2, 2;
	setp.le.s32 	%p16, %r6, %r7;
	selp.u16 	%rs63, 1, 0, %p16;
	shr.u32 	%r168, %r7, 31;
	cvt.u16.u32 	%rs3, %r168;
	or.b16  	%rs64, %rs63, %rs3;
	setp.eq.s16 	%p17, %rs64, 0;
	@%p17 bra 	$L__BB1_23;

	add.s32 	%r243, %r2, 2;
	st.local.v2.u32 	[%rd6], {%r243, %r6};
	mov.u64 	%rd107, $str;
	cvta.global.u64 	%rd108, %rd107;
	{ // callseq 144, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd108;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r169, [retval0+0];
	} // callseq 144
	bra.uni 	$L__BB1_24;

$L__BB1_23:
	ld.param.u32 	%r170, [%rd17+-28];
	mul.wide.s32 	%rd119, %r170, %r7;
	ld.param.u64 	%rd120, [%rd17+-60];
	add.s64 	%rd110, %rd120, %rd119;
	mov.f64 	%fd253, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd236,[%rd110],%fd253; }

	// end inline asm
	add.s64 	%rd111, %rd110, 8;
	// begin inline asm
	{ atom.add.f64 %fd238,[%rd111],%fd253; }

	// end inline asm
	add.s64 	%rd112, %rd110, 16;
	// begin inline asm
	{ atom.add.f64 %fd240,[%rd112],%fd253; }

	// end inline asm
	add.s64 	%rd113, %rd110, 24;
	// begin inline asm
	{ atom.add.f64 %fd242,[%rd113],%fd253; }

	// end inline asm
	add.s64 	%rd114, %rd110, 32;
	// begin inline asm
	{ atom.add.f64 %fd244,[%rd114],%fd253; }

	// end inline asm
	add.s64 	%rd115, %rd110, 40;
	// begin inline asm
	{ atom.add.f64 %fd246,[%rd115],%fd253; }

	// end inline asm
	add.s64 	%rd116, %rd110, 48;
	// begin inline asm
	{ atom.add.f64 %fd248,[%rd116],%fd253; }

	// end inline asm
	add.s64 	%rd117, %rd110, 56;
	// begin inline asm
	{ atom.add.f64 %fd250,[%rd117],%fd253; }

	// end inline asm
	add.s64 	%rd118, %rd110, 64;
	// begin inline asm
	{ atom.add.f64 %fd252,[%rd118],%fd253; }

	// end inline asm

$L__BB1_24:
	ld.param.u32 	%r8, [%rd17];
	add.s32 	%r9, %r2, 3;
	setp.le.s32 	%p18, %r8, %r9;
	selp.u16 	%rs65, 1, 0, %p18;
	shr.u32 	%r171, %r9, 31;
	cvt.u16.u32 	%rs4, %r171;
	or.b16  	%rs66, %rs65, %rs4;
	setp.eq.s16 	%p19, %rs66, 0;
	@%p19 bra 	$L__BB1_26;

	add.s32 	%r244, %r2, 3;
	st.local.v2.u32 	[%rd6], {%r244, %r8};
	mov.u64 	%rd121, $str;
	cvta.global.u64 	%rd122, %rd121;
	{ // callseq 145, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd122;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r172, [retval0+0];
	} // callseq 145
	bra.uni 	$L__BB1_27;

$L__BB1_26:
	ld.param.u32 	%r173, [%rd17+-28];
	mul.wide.s32 	%rd133, %r173, %r9;
	ld.param.u64 	%rd134, [%rd17+-60];
	add.s64 	%rd124, %rd134, %rd133;
	mov.f64 	%fd271, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd254,[%rd124],%fd271; }

	// end inline asm
	add.s64 	%rd125, %rd124, 8;
	// begin inline asm
	{ atom.add.f64 %fd256,[%rd125],%fd271; }

	// end inline asm
	add.s64 	%rd126, %rd124, 16;
	// begin inline asm
	{ atom.add.f64 %fd258,[%rd126],%fd271; }

	// end inline asm
	add.s64 	%rd127, %rd124, 24;
	// begin inline asm
	{ atom.add.f64 %fd260,[%rd127],%fd271; }

	// end inline asm
	add.s64 	%rd128, %rd124, 32;
	// begin inline asm
	{ atom.add.f64 %fd262,[%rd128],%fd271; }

	// end inline asm
	add.s64 	%rd129, %rd124, 40;
	// begin inline asm
	{ atom.add.f64 %fd264,[%rd129],%fd271; }

	// end inline asm
	add.s64 	%rd130, %rd124, 48;
	// begin inline asm
	{ atom.add.f64 %fd266,[%rd130],%fd271; }

	// end inline asm
	add.s64 	%rd131, %rd124, 56;
	// begin inline asm
	{ atom.add.f64 %fd268,[%rd131],%fd271; }

	// end inline asm
	add.s64 	%rd132, %rd124, 64;
	// begin inline asm
	{ atom.add.f64 %fd270,[%rd132],%fd271; }

	// end inline asm

$L__BB1_27:
	ld.param.u32 	%r10, [%rd17];
	add.s32 	%r11, %r2, 4;
	setp.le.s32 	%p20, %r10, %r11;
	selp.u16 	%rs67, 1, 0, %p20;
	shr.u32 	%r174, %r11, 31;
	cvt.u16.u32 	%rs5, %r174;
	or.b16  	%rs68, %rs67, %rs5;
	setp.eq.s16 	%p21, %rs68, 0;
	@%p21 bra 	$L__BB1_29;

	add.s32 	%r245, %r2, 4;
	st.local.v2.u32 	[%rd6], {%r245, %r10};
	mov.u64 	%rd135, $str;
	cvta.global.u64 	%rd136, %rd135;
	{ // callseq 146, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd136;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r175, [retval0+0];
	} // callseq 146
	bra.uni 	$L__BB1_30;

$L__BB1_29:
	ld.param.u32 	%r176, [%rd17+-28];
	mul.wide.s32 	%rd147, %r176, %r11;
	ld.param.u64 	%rd148, [%rd17+-60];
	add.s64 	%rd138, %rd148, %rd147;
	mov.f64 	%fd289, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd272,[%rd138],%fd289; }

	// end inline asm
	add.s64 	%rd139, %rd138, 8;
	// begin inline asm
	{ atom.add.f64 %fd274,[%rd139],%fd289; }

	// end inline asm
	add.s64 	%rd140, %rd138, 16;
	// begin inline asm
	{ atom.add.f64 %fd276,[%rd140],%fd289; }

	// end inline asm
	add.s64 	%rd141, %rd138, 24;
	// begin inline asm
	{ atom.add.f64 %fd278,[%rd141],%fd289; }

	// end inline asm
	add.s64 	%rd142, %rd138, 32;
	// begin inline asm
	{ atom.add.f64 %fd280,[%rd142],%fd289; }

	// end inline asm
	add.s64 	%rd143, %rd138, 40;
	// begin inline asm
	{ atom.add.f64 %fd282,[%rd143],%fd289; }

	// end inline asm
	add.s64 	%rd144, %rd138, 48;
	// begin inline asm
	{ atom.add.f64 %fd284,[%rd144],%fd289; }

	// end inline asm
	add.s64 	%rd145, %rd138, 56;
	// begin inline asm
	{ atom.add.f64 %fd286,[%rd145],%fd289; }

	// end inline asm
	add.s64 	%rd146, %rd138, 64;
	// begin inline asm
	{ atom.add.f64 %fd288,[%rd146],%fd289; }

	// end inline asm

$L__BB1_30:
	ld.param.u32 	%r12, [%rd17];
	add.s32 	%r13, %r2, 5;
	setp.le.s32 	%p22, %r12, %r13;
	selp.u16 	%rs69, 1, 0, %p22;
	shr.u32 	%r177, %r13, 31;
	cvt.u16.u32 	%rs6, %r177;
	or.b16  	%rs70, %rs69, %rs6;
	setp.eq.s16 	%p23, %rs70, 0;
	@%p23 bra 	$L__BB1_32;

	add.s32 	%r246, %r2, 5;
	st.local.v2.u32 	[%rd6], {%r246, %r12};
	mov.u64 	%rd149, $str;
	cvta.global.u64 	%rd150, %rd149;
	{ // callseq 147, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd150;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r178, [retval0+0];
	} // callseq 147
	bra.uni 	$L__BB1_33;

$L__BB1_32:
	ld.param.u32 	%r179, [%rd17+-28];
	mul.wide.s32 	%rd161, %r179, %r13;
	ld.param.u64 	%rd162, [%rd17+-60];
	add.s64 	%rd152, %rd162, %rd161;
	mov.f64 	%fd307, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd290,[%rd152],%fd307; }

	// end inline asm
	add.s64 	%rd153, %rd152, 8;
	// begin inline asm
	{ atom.add.f64 %fd292,[%rd153],%fd307; }

	// end inline asm
	add.s64 	%rd154, %rd152, 16;
	// begin inline asm
	{ atom.add.f64 %fd294,[%rd154],%fd307; }

	// end inline asm
	add.s64 	%rd155, %rd152, 24;
	// begin inline asm
	{ atom.add.f64 %fd296,[%rd155],%fd307; }

	// end inline asm
	add.s64 	%rd156, %rd152, 32;
	// begin inline asm
	{ atom.add.f64 %fd298,[%rd156],%fd307; }

	// end inline asm
	add.s64 	%rd157, %rd152, 40;
	// begin inline asm
	{ atom.add.f64 %fd300,[%rd157],%fd307; }

	// end inline asm
	add.s64 	%rd158, %rd152, 48;
	// begin inline asm
	{ atom.add.f64 %fd302,[%rd158],%fd307; }

	// end inline asm
	add.s64 	%rd159, %rd152, 56;
	// begin inline asm
	{ atom.add.f64 %fd304,[%rd159],%fd307; }

	// end inline asm
	add.s64 	%rd160, %rd152, 64;
	// begin inline asm
	{ atom.add.f64 %fd306,[%rd160],%fd307; }

	// end inline asm

$L__BB1_33:
	ld.param.u32 	%r14, [%rd17];
	add.s32 	%r15, %r2, 6;
	setp.le.s32 	%p24, %r14, %r15;
	selp.u16 	%rs71, 1, 0, %p24;
	shr.u32 	%r180, %r15, 31;
	cvt.u16.u32 	%rs7, %r180;
	or.b16  	%rs72, %rs71, %rs7;
	setp.eq.s16 	%p25, %rs72, 0;
	@%p25 bra 	$L__BB1_35;

	add.s32 	%r247, %r2, 6;
	st.local.v2.u32 	[%rd6], {%r247, %r14};
	mov.u64 	%rd163, $str;
	cvta.global.u64 	%rd164, %rd163;
	{ // callseq 148, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd164;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r181, [retval0+0];
	} // callseq 148
	bra.uni 	$L__BB1_36;

$L__BB1_35:
	ld.param.u32 	%r182, [%rd17+-28];
	mul.wide.s32 	%rd175, %r182, %r15;
	ld.param.u64 	%rd176, [%rd17+-60];
	add.s64 	%rd166, %rd176, %rd175;
	mov.f64 	%fd325, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd308,[%rd166],%fd325; }

	// end inline asm
	add.s64 	%rd167, %rd166, 8;
	// begin inline asm
	{ atom.add.f64 %fd310,[%rd167],%fd325; }

	// end inline asm
	add.s64 	%rd168, %rd166, 16;
	// begin inline asm
	{ atom.add.f64 %fd312,[%rd168],%fd325; }

	// end inline asm
	add.s64 	%rd169, %rd166, 24;
	// begin inline asm
	{ atom.add.f64 %fd314,[%rd169],%fd325; }

	// end inline asm
	add.s64 	%rd170, %rd166, 32;
	// begin inline asm
	{ atom.add.f64 %fd316,[%rd170],%fd325; }

	// end inline asm
	add.s64 	%rd171, %rd166, 40;
	// begin inline asm
	{ atom.add.f64 %fd318,[%rd171],%fd325; }

	// end inline asm
	add.s64 	%rd172, %rd166, 48;
	// begin inline asm
	{ atom.add.f64 %fd320,[%rd172],%fd325; }

	// end inline asm
	add.s64 	%rd173, %rd166, 56;
	// begin inline asm
	{ atom.add.f64 %fd322,[%rd173],%fd325; }

	// end inline asm
	add.s64 	%rd174, %rd166, 64;
	// begin inline asm
	{ atom.add.f64 %fd324,[%rd174],%fd325; }

	// end inline asm

$L__BB1_36:
	ld.param.u32 	%r16, [%rd17];
	add.s32 	%r17, %r2, 7;
	setp.le.s32 	%p26, %r16, %r17;
	selp.u16 	%rs73, 1, 0, %p26;
	shr.u32 	%r183, %r17, 31;
	cvt.u16.u32 	%rs8, %r183;
	or.b16  	%rs74, %rs73, %rs8;
	setp.eq.s16 	%p27, %rs74, 0;
	@%p27 bra 	$L__BB1_38;

	add.s32 	%r248, %r2, 7;
	st.local.v2.u32 	[%rd6], {%r248, %r16};
	mov.u64 	%rd177, $str;
	cvta.global.u64 	%rd178, %rd177;
	{ // callseq 149, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd178;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r184, [retval0+0];
	} // callseq 149
	bra.uni 	$L__BB1_39;

$L__BB1_38:
	ld.param.u32 	%r185, [%rd17+-28];
	mul.wide.s32 	%rd189, %r185, %r17;
	ld.param.u64 	%rd190, [%rd17+-60];
	add.s64 	%rd180, %rd190, %rd189;
	mov.f64 	%fd343, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd326,[%rd180],%fd343; }

	// end inline asm
	add.s64 	%rd181, %rd180, 8;
	// begin inline asm
	{ atom.add.f64 %fd328,[%rd181],%fd343; }

	// end inline asm
	add.s64 	%rd182, %rd180, 16;
	// begin inline asm
	{ atom.add.f64 %fd330,[%rd182],%fd343; }

	// end inline asm
	add.s64 	%rd183, %rd180, 24;
	// begin inline asm
	{ atom.add.f64 %fd332,[%rd183],%fd343; }

	// end inline asm
	add.s64 	%rd184, %rd180, 32;
	// begin inline asm
	{ atom.add.f64 %fd334,[%rd184],%fd343; }

	// end inline asm
	add.s64 	%rd185, %rd180, 40;
	// begin inline asm
	{ atom.add.f64 %fd336,[%rd185],%fd343; }

	// end inline asm
	add.s64 	%rd186, %rd180, 48;
	// begin inline asm
	{ atom.add.f64 %fd338,[%rd186],%fd343; }

	// end inline asm
	add.s64 	%rd187, %rd180, 56;
	// begin inline asm
	{ atom.add.f64 %fd340,[%rd187],%fd343; }

	// end inline asm
	add.s64 	%rd188, %rd180, 64;
	// begin inline asm
	{ atom.add.f64 %fd342,[%rd188],%fd343; }

	// end inline asm

$L__BB1_39:
	ld.param.u32 	%r18, [%rd17];
	add.s32 	%r19, %r2, 8;
	setp.le.s32 	%p28, %r18, %r19;
	selp.u16 	%rs75, 1, 0, %p28;
	shr.u32 	%r186, %r19, 31;
	cvt.u16.u32 	%rs9, %r186;
	or.b16  	%rs76, %rs75, %rs9;
	setp.eq.s16 	%p29, %rs76, 0;
	@%p29 bra 	$L__BB1_41;

	add.s32 	%r249, %r2, 8;
	st.local.v2.u32 	[%rd6], {%r249, %r18};
	mov.u64 	%rd191, $str;
	cvta.global.u64 	%rd192, %rd191;
	{ // callseq 150, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd192;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r187, [retval0+0];
	} // callseq 150
	bra.uni 	$L__BB1_42;

$L__BB1_41:
	ld.param.u32 	%r188, [%rd17+-28];
	mul.wide.s32 	%rd203, %r188, %r19;
	ld.param.u64 	%rd204, [%rd17+-60];
	add.s64 	%rd194, %rd204, %rd203;
	mov.f64 	%fd361, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd344,[%rd194],%fd361; }

	// end inline asm
	add.s64 	%rd195, %rd194, 8;
	// begin inline asm
	{ atom.add.f64 %fd346,[%rd195],%fd361; }

	// end inline asm
	add.s64 	%rd196, %rd194, 16;
	// begin inline asm
	{ atom.add.f64 %fd348,[%rd196],%fd361; }

	// end inline asm
	add.s64 	%rd197, %rd194, 24;
	// begin inline asm
	{ atom.add.f64 %fd350,[%rd197],%fd361; }

	// end inline asm
	add.s64 	%rd198, %rd194, 32;
	// begin inline asm
	{ atom.add.f64 %fd352,[%rd198],%fd361; }

	// end inline asm
	add.s64 	%rd199, %rd194, 40;
	// begin inline asm
	{ atom.add.f64 %fd354,[%rd199],%fd361; }

	// end inline asm
	add.s64 	%rd200, %rd194, 48;
	// begin inline asm
	{ atom.add.f64 %fd356,[%rd200],%fd361; }

	// end inline asm
	add.s64 	%rd201, %rd194, 56;
	// begin inline asm
	{ atom.add.f64 %fd358,[%rd201],%fd361; }

	// end inline asm
	add.s64 	%rd202, %rd194, 64;
	// begin inline asm
	{ atom.add.f64 %fd360,[%rd202],%fd361; }

	// end inline asm

$L__BB1_42:
	ld.param.u32 	%r20, [%rd17];
	add.s32 	%r21, %r2, 9;
	setp.le.s32 	%p30, %r20, %r21;
	selp.u16 	%rs77, 1, 0, %p30;
	shr.u32 	%r189, %r21, 31;
	cvt.u16.u32 	%rs10, %r189;
	or.b16  	%rs78, %rs77, %rs10;
	setp.eq.s16 	%p31, %rs78, 0;
	@%p31 bra 	$L__BB1_44;

	add.s32 	%r250, %r2, 9;
	st.local.v2.u32 	[%rd6], {%r250, %r20};
	mov.u64 	%rd205, $str;
	cvta.global.u64 	%rd206, %rd205;
	{ // callseq 151, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd206;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r190, [retval0+0];
	} // callseq 151
	bra.uni 	$L__BB1_45;

$L__BB1_44:
	ld.param.u32 	%r191, [%rd17+-28];
	mul.wide.s32 	%rd217, %r191, %r21;
	ld.param.u64 	%rd218, [%rd17+-60];
	add.s64 	%rd208, %rd218, %rd217;
	mov.f64 	%fd379, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd362,[%rd208],%fd379; }

	// end inline asm
	add.s64 	%rd209, %rd208, 8;
	// begin inline asm
	{ atom.add.f64 %fd364,[%rd209],%fd379; }

	// end inline asm
	add.s64 	%rd210, %rd208, 16;
	// begin inline asm
	{ atom.add.f64 %fd366,[%rd210],%fd379; }

	// end inline asm
	add.s64 	%rd211, %rd208, 24;
	// begin inline asm
	{ atom.add.f64 %fd368,[%rd211],%fd379; }

	// end inline asm
	add.s64 	%rd212, %rd208, 32;
	// begin inline asm
	{ atom.add.f64 %fd370,[%rd212],%fd379; }

	// end inline asm
	add.s64 	%rd213, %rd208, 40;
	// begin inline asm
	{ atom.add.f64 %fd372,[%rd213],%fd379; }

	// end inline asm
	add.s64 	%rd214, %rd208, 48;
	// begin inline asm
	{ atom.add.f64 %fd374,[%rd214],%fd379; }

	// end inline asm
	add.s64 	%rd215, %rd208, 56;
	// begin inline asm
	{ atom.add.f64 %fd376,[%rd215],%fd379; }

	// end inline asm
	add.s64 	%rd216, %rd208, 64;
	// begin inline asm
	{ atom.add.f64 %fd378,[%rd216],%fd379; }

	// end inline asm

$L__BB1_45:
	ld.param.u32 	%r22, [%rd17];
	add.s32 	%r23, %r2, 10;
	setp.le.s32 	%p32, %r22, %r23;
	selp.u16 	%rs79, 1, 0, %p32;
	shr.u32 	%r192, %r23, 31;
	cvt.u16.u32 	%rs11, %r192;
	or.b16  	%rs80, %rs79, %rs11;
	setp.eq.s16 	%p33, %rs80, 0;
	@%p33 bra 	$L__BB1_47;

	add.s32 	%r251, %r2, 10;
	st.local.v2.u32 	[%rd6], {%r251, %r22};
	mov.u64 	%rd219, $str;
	cvta.global.u64 	%rd220, %rd219;
	{ // callseq 152, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd220;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r193, [retval0+0];
	} // callseq 152
	bra.uni 	$L__BB1_48;

$L__BB1_47:
	ld.param.u32 	%r194, [%rd17+-28];
	mul.wide.s32 	%rd231, %r194, %r23;
	ld.param.u64 	%rd232, [%rd17+-60];
	add.s64 	%rd222, %rd232, %rd231;
	mov.f64 	%fd397, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd380,[%rd222],%fd397; }

	// end inline asm
	add.s64 	%rd223, %rd222, 8;
	// begin inline asm
	{ atom.add.f64 %fd382,[%rd223],%fd397; }

	// end inline asm
	add.s64 	%rd224, %rd222, 16;
	// begin inline asm
	{ atom.add.f64 %fd384,[%rd224],%fd397; }

	// end inline asm
	add.s64 	%rd225, %rd222, 24;
	// begin inline asm
	{ atom.add.f64 %fd386,[%rd225],%fd397; }

	// end inline asm
	add.s64 	%rd226, %rd222, 32;
	// begin inline asm
	{ atom.add.f64 %fd388,[%rd226],%fd397; }

	// end inline asm
	add.s64 	%rd227, %rd222, 40;
	// begin inline asm
	{ atom.add.f64 %fd390,[%rd227],%fd397; }

	// end inline asm
	add.s64 	%rd228, %rd222, 48;
	// begin inline asm
	{ atom.add.f64 %fd392,[%rd228],%fd397; }

	// end inline asm
	add.s64 	%rd229, %rd222, 56;
	// begin inline asm
	{ atom.add.f64 %fd394,[%rd229],%fd397; }

	// end inline asm
	add.s64 	%rd230, %rd222, 64;
	// begin inline asm
	{ atom.add.f64 %fd396,[%rd230],%fd397; }

	// end inline asm

$L__BB1_48:
	ld.param.u32 	%r24, [%rd17];
	add.s32 	%r25, %r2, 11;
	setp.le.s32 	%p34, %r24, %r25;
	selp.u16 	%rs81, 1, 0, %p34;
	shr.u32 	%r195, %r25, 31;
	cvt.u16.u32 	%rs12, %r195;
	or.b16  	%rs82, %rs81, %rs12;
	setp.eq.s16 	%p35, %rs82, 0;
	@%p35 bra 	$L__BB1_50;

	add.s32 	%r252, %r2, 11;
	st.local.v2.u32 	[%rd6], {%r252, %r24};
	mov.u64 	%rd233, $str;
	cvta.global.u64 	%rd234, %rd233;
	{ // callseq 153, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd234;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r196, [retval0+0];
	} // callseq 153
	bra.uni 	$L__BB1_51;

$L__BB1_50:
	ld.param.u32 	%r197, [%rd17+-28];
	mul.wide.s32 	%rd245, %r197, %r25;
	ld.param.u64 	%rd246, [%rd17+-60];
	add.s64 	%rd236, %rd246, %rd245;
	mov.f64 	%fd415, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd398,[%rd236],%fd415; }

	// end inline asm
	add.s64 	%rd237, %rd236, 8;
	// begin inline asm
	{ atom.add.f64 %fd400,[%rd237],%fd415; }

	// end inline asm
	add.s64 	%rd238, %rd236, 16;
	// begin inline asm
	{ atom.add.f64 %fd402,[%rd238],%fd415; }

	// end inline asm
	add.s64 	%rd239, %rd236, 24;
	// begin inline asm
	{ atom.add.f64 %fd404,[%rd239],%fd415; }

	// end inline asm
	add.s64 	%rd240, %rd236, 32;
	// begin inline asm
	{ atom.add.f64 %fd406,[%rd240],%fd415; }

	// end inline asm
	add.s64 	%rd241, %rd236, 40;
	// begin inline asm
	{ atom.add.f64 %fd408,[%rd241],%fd415; }

	// end inline asm
	add.s64 	%rd242, %rd236, 48;
	// begin inline asm
	{ atom.add.f64 %fd410,[%rd242],%fd415; }

	// end inline asm
	add.s64 	%rd243, %rd236, 56;
	// begin inline asm
	{ atom.add.f64 %fd412,[%rd243],%fd415; }

	// end inline asm
	add.s64 	%rd244, %rd236, 64;
	// begin inline asm
	{ atom.add.f64 %fd414,[%rd244],%fd415; }

	// end inline asm

$L__BB1_51:
	ld.param.u32 	%r26, [%rd17];
	add.s32 	%r27, %r2, 12;
	setp.le.s32 	%p36, %r26, %r27;
	selp.u16 	%rs83, 1, 0, %p36;
	shr.u32 	%r198, %r27, 31;
	cvt.u16.u32 	%rs13, %r198;
	or.b16  	%rs84, %rs83, %rs13;
	setp.eq.s16 	%p37, %rs84, 0;
	@%p37 bra 	$L__BB1_53;

	add.s32 	%r253, %r2, 12;
	st.local.v2.u32 	[%rd6], {%r253, %r26};
	mov.u64 	%rd247, $str;
	cvta.global.u64 	%rd248, %rd247;
	{ // callseq 154, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd248;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r199, [retval0+0];
	} // callseq 154
	bra.uni 	$L__BB1_54;

$L__BB1_53:
	ld.param.u32 	%r200, [%rd17+-28];
	mul.wide.s32 	%rd259, %r200, %r27;
	ld.param.u64 	%rd260, [%rd17+-60];
	add.s64 	%rd250, %rd260, %rd259;
	mov.f64 	%fd433, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd416,[%rd250],%fd433; }

	// end inline asm
	add.s64 	%rd251, %rd250, 8;
	// begin inline asm
	{ atom.add.f64 %fd418,[%rd251],%fd433; }

	// end inline asm
	add.s64 	%rd252, %rd250, 16;
	// begin inline asm
	{ atom.add.f64 %fd420,[%rd252],%fd433; }

	// end inline asm
	add.s64 	%rd253, %rd250, 24;
	// begin inline asm
	{ atom.add.f64 %fd422,[%rd253],%fd433; }

	// end inline asm
	add.s64 	%rd254, %rd250, 32;
	// begin inline asm
	{ atom.add.f64 %fd424,[%rd254],%fd433; }

	// end inline asm
	add.s64 	%rd255, %rd250, 40;
	// begin inline asm
	{ atom.add.f64 %fd426,[%rd255],%fd433; }

	// end inline asm
	add.s64 	%rd256, %rd250, 48;
	// begin inline asm
	{ atom.add.f64 %fd428,[%rd256],%fd433; }

	// end inline asm
	add.s64 	%rd257, %rd250, 56;
	// begin inline asm
	{ atom.add.f64 %fd430,[%rd257],%fd433; }

	// end inline asm
	add.s64 	%rd258, %rd250, 64;
	// begin inline asm
	{ atom.add.f64 %fd432,[%rd258],%fd433; }

	// end inline asm

$L__BB1_54:
	ld.param.u32 	%r28, [%rd17];
	add.s32 	%r29, %r2, 13;
	setp.le.s32 	%p38, %r28, %r29;
	selp.u16 	%rs85, 1, 0, %p38;
	shr.u32 	%r201, %r29, 31;
	cvt.u16.u32 	%rs14, %r201;
	or.b16  	%rs86, %rs85, %rs14;
	setp.eq.s16 	%p39, %rs86, 0;
	@%p39 bra 	$L__BB1_56;

	add.s32 	%r254, %r2, 13;
	st.local.v2.u32 	[%rd6], {%r254, %r28};
	mov.u64 	%rd261, $str;
	cvta.global.u64 	%rd262, %rd261;
	{ // callseq 155, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd262;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r202, [retval0+0];
	} // callseq 155
	bra.uni 	$L__BB1_57;

$L__BB1_56:
	ld.param.u32 	%r203, [%rd17+-28];
	mul.wide.s32 	%rd273, %r203, %r29;
	ld.param.u64 	%rd274, [%rd17+-60];
	add.s64 	%rd264, %rd274, %rd273;
	mov.f64 	%fd451, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd434,[%rd264],%fd451; }

	// end inline asm
	add.s64 	%rd265, %rd264, 8;
	// begin inline asm
	{ atom.add.f64 %fd436,[%rd265],%fd451; }

	// end inline asm
	add.s64 	%rd266, %rd264, 16;
	// begin inline asm
	{ atom.add.f64 %fd438,[%rd266],%fd451; }

	// end inline asm
	add.s64 	%rd267, %rd264, 24;
	// begin inline asm
	{ atom.add.f64 %fd440,[%rd267],%fd451; }

	// end inline asm
	add.s64 	%rd268, %rd264, 32;
	// begin inline asm
	{ atom.add.f64 %fd442,[%rd268],%fd451; }

	// end inline asm
	add.s64 	%rd269, %rd264, 40;
	// begin inline asm
	{ atom.add.f64 %fd444,[%rd269],%fd451; }

	// end inline asm
	add.s64 	%rd270, %rd264, 48;
	// begin inline asm
	{ atom.add.f64 %fd446,[%rd270],%fd451; }

	// end inline asm
	add.s64 	%rd271, %rd264, 56;
	// begin inline asm
	{ atom.add.f64 %fd448,[%rd271],%fd451; }

	// end inline asm
	add.s64 	%rd272, %rd264, 64;
	// begin inline asm
	{ atom.add.f64 %fd450,[%rd272],%fd451; }

	// end inline asm

$L__BB1_57:
	ld.param.u32 	%r30, [%rd17];
	add.s32 	%r31, %r2, 14;
	setp.le.s32 	%p40, %r30, %r31;
	selp.u16 	%rs87, 1, 0, %p40;
	shr.u32 	%r204, %r31, 31;
	cvt.u16.u32 	%rs15, %r204;
	or.b16  	%rs88, %rs87, %rs15;
	setp.eq.s16 	%p41, %rs88, 0;
	@%p41 bra 	$L__BB1_59;

	add.s32 	%r255, %r2, 14;
	st.local.v2.u32 	[%rd6], {%r255, %r30};
	mov.u64 	%rd275, $str;
	cvta.global.u64 	%rd276, %rd275;
	{ // callseq 156, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd276;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r205, [retval0+0];
	} // callseq 156
	bra.uni 	$L__BB1_60;

$L__BB1_59:
	ld.param.u32 	%r206, [%rd17+-28];
	mul.wide.s32 	%rd287, %r206, %r31;
	ld.param.u64 	%rd288, [%rd17+-60];
	add.s64 	%rd278, %rd288, %rd287;
	mov.f64 	%fd469, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd452,[%rd278],%fd469; }

	// end inline asm
	add.s64 	%rd279, %rd278, 8;
	// begin inline asm
	{ atom.add.f64 %fd454,[%rd279],%fd469; }

	// end inline asm
	add.s64 	%rd280, %rd278, 16;
	// begin inline asm
	{ atom.add.f64 %fd456,[%rd280],%fd469; }

	// end inline asm
	add.s64 	%rd281, %rd278, 24;
	// begin inline asm
	{ atom.add.f64 %fd458,[%rd281],%fd469; }

	// end inline asm
	add.s64 	%rd282, %rd278, 32;
	// begin inline asm
	{ atom.add.f64 %fd460,[%rd282],%fd469; }

	// end inline asm
	add.s64 	%rd283, %rd278, 40;
	// begin inline asm
	{ atom.add.f64 %fd462,[%rd283],%fd469; }

	// end inline asm
	add.s64 	%rd284, %rd278, 48;
	// begin inline asm
	{ atom.add.f64 %fd464,[%rd284],%fd469; }

	// end inline asm
	add.s64 	%rd285, %rd278, 56;
	// begin inline asm
	{ atom.add.f64 %fd466,[%rd285],%fd469; }

	// end inline asm
	add.s64 	%rd286, %rd278, 64;
	// begin inline asm
	{ atom.add.f64 %fd468,[%rd286],%fd469; }

	// end inline asm

$L__BB1_60:
	ld.param.u32 	%r32, [%rd17];
	add.s32 	%r33, %r2, 15;
	setp.le.s32 	%p42, %r32, %r33;
	selp.u16 	%rs89, 1, 0, %p42;
	shr.u32 	%r207, %r33, 31;
	cvt.u16.u32 	%rs16, %r207;
	or.b16  	%rs90, %rs89, %rs16;
	setp.eq.s16 	%p43, %rs90, 0;
	@%p43 bra 	$L__BB1_62;

	add.s32 	%r256, %r2, 15;
	st.local.v2.u32 	[%rd6], {%r256, %r32};
	mov.u64 	%rd289, $str;
	cvta.global.u64 	%rd290, %rd289;
	{ // callseq 157, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd290;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r208, [retval0+0];
	} // callseq 157
	bra.uni 	$L__BB1_63;

$L__BB1_62:
	ld.param.u32 	%r209, [%rd17+-28];
	mul.wide.s32 	%rd301, %r209, %r33;
	ld.param.u64 	%rd302, [%rd17+-60];
	add.s64 	%rd292, %rd302, %rd301;
	mov.f64 	%fd487, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd470,[%rd292],%fd487; }

	// end inline asm
	add.s64 	%rd293, %rd292, 8;
	// begin inline asm
	{ atom.add.f64 %fd472,[%rd293],%fd487; }

	// end inline asm
	add.s64 	%rd294, %rd292, 16;
	// begin inline asm
	{ atom.add.f64 %fd474,[%rd294],%fd487; }

	// end inline asm
	add.s64 	%rd295, %rd292, 24;
	// begin inline asm
	{ atom.add.f64 %fd476,[%rd295],%fd487; }

	// end inline asm
	add.s64 	%rd296, %rd292, 32;
	// begin inline asm
	{ atom.add.f64 %fd478,[%rd296],%fd487; }

	// end inline asm
	add.s64 	%rd297, %rd292, 40;
	// begin inline asm
	{ atom.add.f64 %fd480,[%rd297],%fd487; }

	// end inline asm
	add.s64 	%rd298, %rd292, 48;
	// begin inline asm
	{ atom.add.f64 %fd482,[%rd298],%fd487; }

	// end inline asm
	add.s64 	%rd299, %rd292, 56;
	// begin inline asm
	{ atom.add.f64 %fd484,[%rd299],%fd487; }

	// end inline asm
	add.s64 	%rd300, %rd292, 64;
	// begin inline asm
	{ atom.add.f64 %fd486,[%rd300],%fd487; }

	// end inline asm

$L__BB1_63:
	ld.param.u32 	%r34, [%rd17];
	setp.le.s32 	%p44, %r34, %r33;
	selp.u16 	%rs91, 1, 0, %p44;
	or.b16  	%rs92, %rs91, %rs16;
	setp.eq.s16 	%p45, %rs92, 0;
	mov.f64 	%fd650, 0d0000000000000000;
	mov.f64 	%fd651, 0d0000000000000000;
	mov.f64 	%fd652, 0d0000000000000000;
	@%p45 bra 	$L__BB1_65;

	add.s32 	%r257, %r2, 15;
	st.local.v2.u32 	[%rd6], {%r257, %r34};
	mov.u64 	%rd303, $str;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 158, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r210, [retval0+0];
	} // callseq 158
	bra.uni 	$L__BB1_67;

$L__BB1_65:
	ld.param.u64 	%rd32, [%rd17+-52];
	setp.eq.s64 	%p46, %rd32, 0;
	@%p46 bra 	$L__BB1_67;

	cvta.to.global.u64 	%rd306, %rd32;
	ld.param.u32 	%r211, [%rd17+-28];
	mul.wide.s32 	%rd307, %r211, %r33;
	add.s64 	%rd308, %rd306, %rd307;
	ld.global.f64 	%fd494, [%rd308];
	add.f64 	%fd652, %fd494, 0d0000000000000000;
	ld.global.f64 	%fd495, [%rd308+32];
	add.f64 	%fd651, %fd495, 0d0000000000000000;
	ld.global.f64 	%fd496, [%rd308+64];
	add.f64 	%fd650, %fd496, 0d0000000000000000;

$L__BB1_67:
	add.f64 	%fd7, %fd650, 0d0000000000000000;
	add.f64 	%fd8, %fd651, 0d0000000000000000;
	add.f64 	%fd9, %fd652, 0d0000000000000000;
	ld.param.u32 	%r35, [%rd17];
	setp.le.s32 	%p47, %r35, %r31;
	selp.u16 	%rs93, 1, 0, %p47;
	or.b16  	%rs94, %rs93, %rs15;
	setp.eq.s16 	%p48, %rs94, 0;
	@%p48 bra 	$L__BB1_69;

	add.s32 	%r258, %r2, 14;
	st.local.v2.u32 	[%rd6], {%r258, %r35};
	mov.u64 	%rd309, $str;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 159, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r212, [retval0+0];
	} // callseq 159
	mov.f64 	%fd647, %fd9;
	mov.f64 	%fd648, %fd8;
	mov.f64 	%fd649, %fd7;
	bra.uni 	$L__BB1_71;

$L__BB1_69:
	ld.param.u64 	%rd33, [%rd17+-52];
	setp.eq.s64 	%p49, %rd33, 0;
	mov.f64 	%fd647, %fd9;
	mov.f64 	%fd648, %fd8;
	mov.f64 	%fd649, %fd7;
	@%p49 bra 	$L__BB1_71;

	cvta.to.global.u64 	%rd312, %rd33;
	ld.param.u32 	%r213, [%rd17+-28];
	mul.wide.s32 	%rd313, %r213, %r31;
	add.s64 	%rd314, %rd312, %rd313;
	ld.global.f64 	%fd497, [%rd314];
	add.f64 	%fd652, %fd652, %fd497;
	ld.global.f64 	%fd498, [%rd314+32];
	add.f64 	%fd651, %fd651, %fd498;
	ld.global.f64 	%fd499, [%rd314+64];
	add.f64 	%fd650, %fd650, %fd499;
	add.f64 	%fd649, %fd650, 0d0000000000000000;
	add.f64 	%fd648, %fd651, 0d0000000000000000;
	add.f64 	%fd647, %fd652, 0d0000000000000000;

$L__BB1_71:
	ld.param.u32 	%r36, [%rd17];
	setp.le.s32 	%p50, %r36, %r29;
	selp.u16 	%rs95, 1, 0, %p50;
	or.b16  	%rs96, %rs95, %rs14;
	setp.eq.s16 	%p51, %rs96, 0;
	@%p51 bra 	$L__BB1_73;

	add.s32 	%r259, %r2, 13;
	st.local.v2.u32 	[%rd6], {%r259, %r36};
	mov.u64 	%rd315, $str;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 160, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r214, [retval0+0];
	} // callseq 160
	mov.f64 	%fd653, %fd647;
	mov.f64 	%fd654, %fd648;
	mov.f64 	%fd655, %fd649;
	bra.uni 	$L__BB1_75;

$L__BB1_73:
	ld.param.u64 	%rd34, [%rd17+-52];
	setp.eq.s64 	%p52, %rd34, 0;
	mov.f64 	%fd653, %fd647;
	mov.f64 	%fd654, %fd648;
	mov.f64 	%fd655, %fd649;
	@%p52 bra 	$L__BB1_75;

	cvta.to.global.u64 	%rd318, %rd34;
	ld.param.u32 	%r215, [%rd17+-28];
	mul.wide.s32 	%rd319, %r215, %r29;
	add.s64 	%rd320, %rd318, %rd319;
	ld.global.f64 	%fd500, [%rd320];
	add.f64 	%fd652, %fd652, %fd500;
	ld.global.f64 	%fd501, [%rd320+32];
	add.f64 	%fd651, %fd651, %fd501;
	ld.global.f64 	%fd502, [%rd320+64];
	add.f64 	%fd650, %fd650, %fd502;
	add.f64 	%fd655, %fd650, 0d0000000000000000;
	add.f64 	%fd654, %fd651, 0d0000000000000000;
	add.f64 	%fd653, %fd652, 0d0000000000000000;

$L__BB1_75:
	ld.param.u32 	%r37, [%rd17];
	setp.le.s32 	%p53, %r37, %r27;
	selp.u16 	%rs97, 1, 0, %p53;
	or.b16  	%rs98, %rs97, %rs13;
	setp.eq.s16 	%p54, %rs98, 0;
	@%p54 bra 	$L__BB1_77;

	add.s32 	%r260, %r2, 12;
	st.local.v2.u32 	[%rd6], {%r260, %r37};
	mov.u64 	%rd321, $str;
	cvta.global.u64 	%rd322, %rd321;
	{ // callseq 161, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd322;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r216, [retval0+0];
	} // callseq 161
	mov.f64 	%fd659, %fd653;
	mov.f64 	%fd660, %fd654;
	mov.f64 	%fd661, %fd655;
	bra.uni 	$L__BB1_79;

$L__BB1_77:
	ld.param.u64 	%rd35, [%rd17+-52];
	setp.eq.s64 	%p55, %rd35, 0;
	mov.f64 	%fd659, %fd653;
	mov.f64 	%fd660, %fd654;
	mov.f64 	%fd661, %fd655;
	@%p55 bra 	$L__BB1_79;

	cvta.to.global.u64 	%rd324, %rd35;
	ld.param.u32 	%r217, [%rd17+-28];
	mul.wide.s32 	%rd325, %r217, %r27;
	add.s64 	%rd326, %rd324, %rd325;
	ld.global.f64 	%fd503, [%rd326];
	add.f64 	%fd652, %fd652, %fd503;
	ld.global.f64 	%fd504, [%rd326+32];
	add.f64 	%fd651, %fd651, %fd504;
	ld.global.f64 	%fd505, [%rd326+64];
	add.f64 	%fd650, %fd650, %fd505;
	add.f64 	%fd661, %fd650, 0d0000000000000000;
	add.f64 	%fd660, %fd651, 0d0000000000000000;
	add.f64 	%fd659, %fd652, 0d0000000000000000;

$L__BB1_79:
	ld.param.u32 	%r38, [%rd17];
	setp.le.s32 	%p56, %r38, %r25;
	selp.u16 	%rs99, 1, 0, %p56;
	or.b16  	%rs100, %rs99, %rs12;
	setp.eq.s16 	%p57, %rs100, 0;
	@%p57 bra 	$L__BB1_81;

	add.s32 	%r261, %r2, 11;
	st.local.v2.u32 	[%rd6], {%r261, %r38};
	mov.u64 	%rd327, $str;
	cvta.global.u64 	%rd328, %rd327;
	{ // callseq 162, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd328;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r218, [retval0+0];
	} // callseq 162
	mov.f64 	%fd665, %fd659;
	mov.f64 	%fd666, %fd660;
	mov.f64 	%fd667, %fd661;
	bra.uni 	$L__BB1_83;

$L__BB1_81:
	ld.param.u64 	%rd36, [%rd17+-52];
	setp.eq.s64 	%p58, %rd36, 0;
	mov.f64 	%fd665, %fd659;
	mov.f64 	%fd666, %fd660;
	mov.f64 	%fd667, %fd661;
	@%p58 bra 	$L__BB1_83;

	cvta.to.global.u64 	%rd330, %rd36;
	ld.param.u32 	%r219, [%rd17+-28];
	mul.wide.s32 	%rd331, %r219, %r25;
	add.s64 	%rd332, %rd330, %rd331;
	ld.global.f64 	%fd506, [%rd332];
	add.f64 	%fd652, %fd652, %fd506;
	ld.global.f64 	%fd507, [%rd332+32];
	add.f64 	%fd651, %fd651, %fd507;
	ld.global.f64 	%fd508, [%rd332+64];
	add.f64 	%fd650, %fd650, %fd508;
	add.f64 	%fd667, %fd650, 0d0000000000000000;
	add.f64 	%fd666, %fd651, 0d0000000000000000;
	add.f64 	%fd665, %fd652, 0d0000000000000000;

$L__BB1_83:
	ld.param.u32 	%r39, [%rd17];
	setp.le.s32 	%p59, %r39, %r23;
	selp.u16 	%rs101, 1, 0, %p59;
	or.b16  	%rs102, %rs101, %rs11;
	setp.eq.s16 	%p60, %rs102, 0;
	@%p60 bra 	$L__BB1_85;

	add.s32 	%r262, %r2, 10;
	st.local.v2.u32 	[%rd6], {%r262, %r39};
	mov.u64 	%rd333, $str;
	cvta.global.u64 	%rd334, %rd333;
	{ // callseq 163, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd334;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r220, [retval0+0];
	} // callseq 163
	mov.f64 	%fd671, %fd665;
	mov.f64 	%fd672, %fd666;
	mov.f64 	%fd673, %fd667;
	bra.uni 	$L__BB1_87;

$L__BB1_85:
	ld.param.u64 	%rd37, [%rd17+-52];
	setp.eq.s64 	%p61, %rd37, 0;
	mov.f64 	%fd671, %fd665;
	mov.f64 	%fd672, %fd666;
	mov.f64 	%fd673, %fd667;
	@%p61 bra 	$L__BB1_87;

	cvta.to.global.u64 	%rd336, %rd37;
	ld.param.u32 	%r221, [%rd17+-28];
	mul.wide.s32 	%rd337, %r221, %r23;
	add.s64 	%rd338, %rd336, %rd337;
	ld.global.f64 	%fd509, [%rd338];
	add.f64 	%fd652, %fd652, %fd509;
	ld.global.f64 	%fd510, [%rd338+32];
	add.f64 	%fd651, %fd651, %fd510;
	ld.global.f64 	%fd511, [%rd338+64];
	add.f64 	%fd650, %fd650, %fd511;
	add.f64 	%fd673, %fd650, 0d0000000000000000;
	add.f64 	%fd672, %fd651, 0d0000000000000000;
	add.f64 	%fd671, %fd652, 0d0000000000000000;

$L__BB1_87:
	ld.param.u32 	%r40, [%rd17];
	setp.le.s32 	%p62, %r40, %r21;
	selp.u16 	%rs103, 1, 0, %p62;
	or.b16  	%rs104, %rs103, %rs10;
	setp.eq.s16 	%p63, %rs104, 0;
	@%p63 bra 	$L__BB1_89;

	add.s32 	%r263, %r2, 9;
	st.local.v2.u32 	[%rd6], {%r263, %r40};
	mov.u64 	%rd339, $str;
	cvta.global.u64 	%rd340, %rd339;
	{ // callseq 164, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd340;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r222, [retval0+0];
	} // callseq 164
	mov.f64 	%fd677, %fd671;
	mov.f64 	%fd678, %fd672;
	mov.f64 	%fd679, %fd673;
	bra.uni 	$L__BB1_91;

$L__BB1_89:
	ld.param.u64 	%rd38, [%rd17+-52];
	setp.eq.s64 	%p64, %rd38, 0;
	mov.f64 	%fd677, %fd671;
	mov.f64 	%fd678, %fd672;
	mov.f64 	%fd679, %fd673;
	@%p64 bra 	$L__BB1_91;

	cvta.to.global.u64 	%rd342, %rd38;
	ld.param.u32 	%r223, [%rd17+-28];
	mul.wide.s32 	%rd343, %r223, %r21;
	add.s64 	%rd344, %rd342, %rd343;
	ld.global.f64 	%fd512, [%rd344];
	add.f64 	%fd652, %fd652, %fd512;
	ld.global.f64 	%fd513, [%rd344+32];
	add.f64 	%fd651, %fd651, %fd513;
	ld.global.f64 	%fd514, [%rd344+64];
	add.f64 	%fd650, %fd650, %fd514;
	add.f64 	%fd679, %fd650, 0d0000000000000000;
	add.f64 	%fd678, %fd651, 0d0000000000000000;
	add.f64 	%fd677, %fd652, 0d0000000000000000;

$L__BB1_91:
	ld.param.u32 	%r41, [%rd17];
	setp.le.s32 	%p65, %r41, %r19;
	selp.u16 	%rs105, 1, 0, %p65;
	or.b16  	%rs106, %rs105, %rs9;
	setp.eq.s16 	%p66, %rs106, 0;
	@%p66 bra 	$L__BB1_93;

	add.s32 	%r264, %r2, 8;
	st.local.v2.u32 	[%rd6], {%r264, %r41};
	mov.u64 	%rd345, $str;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 165, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r224, [retval0+0];
	} // callseq 165
	mov.f64 	%fd683, %fd677;
	mov.f64 	%fd684, %fd678;
	mov.f64 	%fd685, %fd679;
	bra.uni 	$L__BB1_95;

$L__BB1_93:
	ld.param.u64 	%rd39, [%rd17+-52];
	setp.eq.s64 	%p67, %rd39, 0;
	mov.f64 	%fd683, %fd677;
	mov.f64 	%fd684, %fd678;
	mov.f64 	%fd685, %fd679;
	@%p67 bra 	$L__BB1_95;

	cvta.to.global.u64 	%rd348, %rd39;
	ld.param.u32 	%r225, [%rd17+-28];
	mul.wide.s32 	%rd349, %r225, %r19;
	add.s64 	%rd350, %rd348, %rd349;
	ld.global.f64 	%fd515, [%rd350];
	add.f64 	%fd652, %fd652, %fd515;
	ld.global.f64 	%fd516, [%rd350+32];
	add.f64 	%fd651, %fd651, %fd516;
	ld.global.f64 	%fd517, [%rd350+64];
	add.f64 	%fd650, %fd650, %fd517;
	add.f64 	%fd685, %fd650, 0d0000000000000000;
	add.f64 	%fd684, %fd651, 0d0000000000000000;
	add.f64 	%fd683, %fd652, 0d0000000000000000;

$L__BB1_95:
	ld.param.u32 	%r42, [%rd17];
	setp.le.s32 	%p68, %r42, %r17;
	selp.u16 	%rs107, 1, 0, %p68;
	or.b16  	%rs108, %rs107, %rs8;
	setp.eq.s16 	%p69, %rs108, 0;
	@%p69 bra 	$L__BB1_97;

	add.s32 	%r265, %r2, 7;
	st.local.v2.u32 	[%rd6], {%r265, %r42};
	mov.u64 	%rd351, $str;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 166, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r226, [retval0+0];
	} // callseq 166
	mov.f64 	%fd689, %fd683;
	mov.f64 	%fd690, %fd684;
	mov.f64 	%fd691, %fd685;
	bra.uni 	$L__BB1_99;

$L__BB1_97:
	ld.param.u64 	%rd40, [%rd17+-52];
	setp.eq.s64 	%p70, %rd40, 0;
	mov.f64 	%fd689, %fd683;
	mov.f64 	%fd690, %fd684;
	mov.f64 	%fd691, %fd685;
	@%p70 bra 	$L__BB1_99;

	cvta.to.global.u64 	%rd354, %rd40;
	ld.param.u32 	%r227, [%rd17+-28];
	mul.wide.s32 	%rd355, %r227, %r17;
	add.s64 	%rd356, %rd354, %rd355;
	ld.global.f64 	%fd518, [%rd356];
	add.f64 	%fd652, %fd652, %fd518;
	ld.global.f64 	%fd519, [%rd356+32];
	add.f64 	%fd651, %fd651, %fd519;
	ld.global.f64 	%fd520, [%rd356+64];
	add.f64 	%fd650, %fd650, %fd520;
	add.f64 	%fd691, %fd650, 0d0000000000000000;
	add.f64 	%fd690, %fd651, 0d0000000000000000;
	add.f64 	%fd689, %fd652, 0d0000000000000000;

$L__BB1_99:
	ld.param.u32 	%r43, [%rd17];
	setp.le.s32 	%p71, %r43, %r15;
	selp.u16 	%rs109, 1, 0, %p71;
	or.b16  	%rs110, %rs109, %rs7;
	setp.eq.s16 	%p72, %rs110, 0;
	@%p72 bra 	$L__BB1_101;

	add.s32 	%r266, %r2, 6;
	st.local.v2.u32 	[%rd6], {%r266, %r43};
	mov.u64 	%rd357, $str;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 167, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r228, [retval0+0];
	} // callseq 167
	mov.f64 	%fd695, %fd689;
	mov.f64 	%fd696, %fd690;
	mov.f64 	%fd697, %fd691;
	bra.uni 	$L__BB1_103;

$L__BB1_101:
	ld.param.u64 	%rd41, [%rd17+-52];
	setp.eq.s64 	%p73, %rd41, 0;
	mov.f64 	%fd695, %fd689;
	mov.f64 	%fd696, %fd690;
	mov.f64 	%fd697, %fd691;
	@%p73 bra 	$L__BB1_103;

	cvta.to.global.u64 	%rd360, %rd41;
	ld.param.u32 	%r229, [%rd17+-28];
	mul.wide.s32 	%rd361, %r229, %r15;
	add.s64 	%rd362, %rd360, %rd361;
	ld.global.f64 	%fd521, [%rd362];
	add.f64 	%fd652, %fd652, %fd521;
	ld.global.f64 	%fd522, [%rd362+32];
	add.f64 	%fd651, %fd651, %fd522;
	ld.global.f64 	%fd523, [%rd362+64];
	add.f64 	%fd650, %fd650, %fd523;
	add.f64 	%fd697, %fd650, 0d0000000000000000;
	add.f64 	%fd696, %fd651, 0d0000000000000000;
	add.f64 	%fd695, %fd652, 0d0000000000000000;

$L__BB1_103:
	ld.param.u32 	%r44, [%rd17];
	setp.le.s32 	%p74, %r44, %r13;
	selp.u16 	%rs111, 1, 0, %p74;
	or.b16  	%rs112, %rs111, %rs6;
	setp.eq.s16 	%p75, %rs112, 0;
	@%p75 bra 	$L__BB1_105;

	add.s32 	%r267, %r2, 5;
	st.local.v2.u32 	[%rd6], {%r267, %r44};
	mov.u64 	%rd363, $str;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 168, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r230, [retval0+0];
	} // callseq 168
	mov.f64 	%fd701, %fd695;
	mov.f64 	%fd702, %fd696;
	mov.f64 	%fd703, %fd697;
	bra.uni 	$L__BB1_107;

$L__BB1_105:
	ld.param.u64 	%rd42, [%rd17+-52];
	setp.eq.s64 	%p76, %rd42, 0;
	mov.f64 	%fd701, %fd695;
	mov.f64 	%fd702, %fd696;
	mov.f64 	%fd703, %fd697;
	@%p76 bra 	$L__BB1_107;

	cvta.to.global.u64 	%rd366, %rd42;
	ld.param.u32 	%r231, [%rd17+-28];
	mul.wide.s32 	%rd367, %r231, %r13;
	add.s64 	%rd368, %rd366, %rd367;
	ld.global.f64 	%fd524, [%rd368];
	add.f64 	%fd652, %fd652, %fd524;
	ld.global.f64 	%fd525, [%rd368+32];
	add.f64 	%fd651, %fd651, %fd525;
	ld.global.f64 	%fd526, [%rd368+64];
	add.f64 	%fd650, %fd650, %fd526;
	add.f64 	%fd703, %fd650, 0d0000000000000000;
	add.f64 	%fd702, %fd651, 0d0000000000000000;
	add.f64 	%fd701, %fd652, 0d0000000000000000;

$L__BB1_107:
	ld.param.u32 	%r45, [%rd17];
	setp.le.s32 	%p77, %r45, %r11;
	selp.u16 	%rs113, 1, 0, %p77;
	or.b16  	%rs114, %rs113, %rs5;
	setp.eq.s16 	%p78, %rs114, 0;
	@%p78 bra 	$L__BB1_109;

	add.s32 	%r268, %r2, 4;
	st.local.v2.u32 	[%rd6], {%r268, %r45};
	mov.u64 	%rd369, $str;
	cvta.global.u64 	%rd370, %rd369;
	{ // callseq 169, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd370;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r232, [retval0+0];
	} // callseq 169
	mov.f64 	%fd707, %fd701;
	mov.f64 	%fd708, %fd702;
	mov.f64 	%fd709, %fd703;
	bra.uni 	$L__BB1_111;

$L__BB1_109:
	ld.param.u64 	%rd43, [%rd17+-52];
	setp.eq.s64 	%p79, %rd43, 0;
	mov.f64 	%fd707, %fd701;
	mov.f64 	%fd708, %fd702;
	mov.f64 	%fd709, %fd703;
	@%p79 bra 	$L__BB1_111;

	cvta.to.global.u64 	%rd372, %rd43;
	ld.param.u32 	%r233, [%rd17+-28];
	mul.wide.s32 	%rd373, %r233, %r11;
	add.s64 	%rd374, %rd372, %rd373;
	ld.global.f64 	%fd527, [%rd374];
	add.f64 	%fd652, %fd652, %fd527;
	ld.global.f64 	%fd528, [%rd374+32];
	add.f64 	%fd651, %fd651, %fd528;
	ld.global.f64 	%fd529, [%rd374+64];
	add.f64 	%fd650, %fd650, %fd529;
	add.f64 	%fd709, %fd650, 0d0000000000000000;
	add.f64 	%fd708, %fd651, 0d0000000000000000;
	add.f64 	%fd707, %fd652, 0d0000000000000000;

$L__BB1_111:
	ld.param.u32 	%r46, [%rd17];
	setp.le.s32 	%p80, %r46, %r9;
	selp.u16 	%rs115, 1, 0, %p80;
	or.b16  	%rs116, %rs115, %rs4;
	setp.eq.s16 	%p81, %rs116, 0;
	@%p81 bra 	$L__BB1_113;

	add.s32 	%r269, %r2, 3;
	st.local.v2.u32 	[%rd6], {%r269, %r46};
	mov.u64 	%rd375, $str;
	cvta.global.u64 	%rd376, %rd375;
	{ // callseq 170, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd376;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r234, [retval0+0];
	} // callseq 170
	mov.f64 	%fd713, %fd707;
	mov.f64 	%fd714, %fd708;
	mov.f64 	%fd715, %fd709;
	bra.uni 	$L__BB1_115;

$L__BB1_113:
	ld.param.u64 	%rd44, [%rd17+-52];
	setp.eq.s64 	%p82, %rd44, 0;
	mov.f64 	%fd713, %fd707;
	mov.f64 	%fd714, %fd708;
	mov.f64 	%fd715, %fd709;
	@%p82 bra 	$L__BB1_115;

	add.s32 	%r282, %r2, 3;
	cvta.to.global.u64 	%rd378, %rd44;
	ld.param.u32 	%r235, [%rd17+-28];
	mul.wide.s32 	%rd379, %r235, %r282;
	add.s64 	%rd380, %rd378, %rd379;
	ld.global.f64 	%fd530, [%rd380];
	add.f64 	%fd652, %fd652, %fd530;
	ld.global.f64 	%fd531, [%rd380+32];
	add.f64 	%fd651, %fd651, %fd531;
	ld.global.f64 	%fd532, [%rd380+64];
	add.f64 	%fd650, %fd650, %fd532;
	add.f64 	%fd715, %fd650, 0d0000000000000000;
	add.f64 	%fd714, %fd651, 0d0000000000000000;
	add.f64 	%fd713, %fd652, 0d0000000000000000;

$L__BB1_115:
	add.s32 	%r273, %r2, 2;
	shr.u32 	%r272, %r273, 31;
	cvt.u16.u32 	%rs123, %r272;
	ld.param.u32 	%r47, [%rd17];
	setp.le.s32 	%p83, %r47, %r273;
	selp.u16 	%rs117, 1, 0, %p83;
	or.b16  	%rs118, %rs117, %rs123;
	setp.eq.s16 	%p84, %rs118, 0;
	@%p84 bra 	$L__BB1_117;

	add.s32 	%r270, %r2, 2;
	st.local.v2.u32 	[%rd6], {%r270, %r47};
	mov.u64 	%rd381, $str;
	cvta.global.u64 	%rd382, %rd381;
	{ // callseq 171, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd382;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r236, [retval0+0];
	} // callseq 171
	mov.f64 	%fd719, %fd713;
	mov.f64 	%fd720, %fd714;
	mov.f64 	%fd721, %fd715;
	bra.uni 	$L__BB1_119;

$L__BB1_117:
	ld.param.u64 	%rd45, [%rd17+-52];
	setp.eq.s64 	%p85, %rd45, 0;
	mov.f64 	%fd719, %fd713;
	mov.f64 	%fd720, %fd714;
	mov.f64 	%fd721, %fd715;
	@%p85 bra 	$L__BB1_119;

	add.s32 	%r281, %r2, 2;
	cvta.to.global.u64 	%rd384, %rd45;
	ld.param.u32 	%r237, [%rd17+-28];
	mul.wide.s32 	%rd385, %r237, %r281;
	add.s64 	%rd386, %rd384, %rd385;
	ld.global.f64 	%fd533, [%rd386];
	add.f64 	%fd652, %fd652, %fd533;
	ld.global.f64 	%fd534, [%rd386+32];
	add.f64 	%fd651, %fd651, %fd534;
	ld.global.f64 	%fd535, [%rd386+64];
	add.f64 	%fd650, %fd650, %fd535;
	add.f64 	%fd721, %fd650, 0d0000000000000000;
	add.f64 	%fd720, %fd651, 0d0000000000000000;
	add.f64 	%fd719, %fd652, 0d0000000000000000;

$L__BB1_119:
	add.s32 	%r275, %r2, 1;
	shr.u32 	%r274, %r275, 31;
	cvt.u16.u32 	%rs124, %r274;
	ld.param.u32 	%r48, [%rd17];
	setp.le.s32 	%p86, %r48, %r275;
	selp.u16 	%rs119, 1, 0, %p86;
	or.b16  	%rs120, %rs119, %rs124;
	setp.eq.s16 	%p87, %rs120, 0;
	@%p87 bra 	$L__BB1_121;

	add.s32 	%r271, %r2, 1;
	st.local.v2.u32 	[%rd6], {%r271, %r48};
	mov.u64 	%rd387, $str;
	cvta.global.u64 	%rd388, %rd387;
	{ // callseq 172, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd388;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r238, [retval0+0];
	} // callseq 172
	mov.f64 	%fd725, %fd719;
	mov.f64 	%fd726, %fd720;
	mov.f64 	%fd727, %fd721;
	bra.uni 	$L__BB1_123;

$L__BB1_121:
	ld.param.u64 	%rd46, [%rd17+-52];
	setp.eq.s64 	%p88, %rd46, 0;
	mov.f64 	%fd725, %fd719;
	mov.f64 	%fd726, %fd720;
	mov.f64 	%fd727, %fd721;
	@%p88 bra 	$L__BB1_123;

	add.s32 	%r280, %r2, 1;
	cvta.to.global.u64 	%rd390, %rd46;
	ld.param.u32 	%r239, [%rd17+-28];
	mul.wide.s32 	%rd391, %r239, %r280;
	add.s64 	%rd392, %rd390, %rd391;
	ld.global.f64 	%fd536, [%rd392];
	add.f64 	%fd652, %fd652, %fd536;
	ld.global.f64 	%fd537, [%rd392+32];
	add.f64 	%fd651, %fd651, %fd537;
	ld.global.f64 	%fd538, [%rd392+64];
	add.f64 	%fd650, %fd650, %fd538;
	add.f64 	%fd727, %fd650, 0d0000000000000000;
	add.f64 	%fd726, %fd651, 0d0000000000000000;
	add.f64 	%fd725, %fd652, 0d0000000000000000;

$L__BB1_123:
	setp.gt.s32 	%p95, %r54, 0;
	cvt.u32.u64 	%r279, %rd436;
	selp.b32 	%r278, %r279, 0, %p95;
	cvt.s64.s32 	%rd434, %r278;
	cvt.u32.u64 	%r277, %rd434;
	shr.u32 	%r276, %r277, 27;
	cvt.u16.u32 	%rs126, %r276;
	and.b16  	%rs125, %rs126, 1;
	ld.param.u32 	%r49, [%rd17];
	setp.le.s32 	%p89, %r49, %r2;
	selp.u16 	%rs121, 1, 0, %p89;
	or.b16  	%rs122, %rs125, %rs121;
	setp.eq.s16 	%p90, %rs122, 0;
	@%p90 bra 	$L__BB1_125;

	st.local.v2.u32 	[%rd6], {%r2, %r49};
	mov.u64 	%rd393, $str;
	cvta.global.u64 	%rd394, %rd393;
	{ // callseq 173, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd394;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd63;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r240, [retval0+0];
	} // callseq 173
	mov.f64 	%fd731, %fd725;
	mov.f64 	%fd732, %fd726;
	mov.f64 	%fd733, %fd727;
	bra.uni 	$L__BB1_127;

$L__BB1_125:
	ld.param.u64 	%rd47, [%rd17+-52];
	setp.eq.s64 	%p91, %rd47, 0;
	mov.f64 	%fd731, %fd725;
	mov.f64 	%fd732, %fd726;
	mov.f64 	%fd733, %fd727;
	@%p91 bra 	$L__BB1_127;

	cvta.to.global.u64 	%rd396, %rd47;
	ld.param.u32 	%r241, [%rd17+-28];
	mul.wide.s32 	%rd397, %r241, %r2;
	add.s64 	%rd398, %rd396, %rd397;
	ld.global.f64 	%fd539, [%rd398];
	add.f64 	%fd540, %fd652, %fd539;
	ld.global.f64 	%fd541, [%rd398+32];
	add.f64 	%fd542, %fd651, %fd541;
	ld.global.f64 	%fd543, [%rd398+64];
	add.f64 	%fd544, %fd650, %fd543;
	add.f64 	%fd733, %fd544, 0d0000000000000000;
	add.f64 	%fd732, %fd542, 0d0000000000000000;
	add.f64 	%fd731, %fd540, 0d0000000000000000;

$L__BB1_127:
	add.f64 	%fd545, %fd7, %fd8;
	add.f64 	%fd546, %fd545, %fd9;
	add.f64 	%fd547, %fd649, %fd648;
	add.f64 	%fd548, %fd547, %fd647;
	add.f64 	%fd549, %fd655, %fd654;
	add.f64 	%fd550, %fd549, %fd653;
	add.f64 	%fd551, %fd661, %fd660;
	add.f64 	%fd552, %fd551, %fd659;
	add.f64 	%fd553, %fd667, %fd666;
	add.f64 	%fd554, %fd553, %fd665;
	add.f64 	%fd555, %fd673, %fd672;
	add.f64 	%fd556, %fd555, %fd671;
	add.f64 	%fd557, %fd679, %fd678;
	add.f64 	%fd558, %fd557, %fd677;
	add.f64 	%fd559, %fd685, %fd684;
	add.f64 	%fd560, %fd559, %fd683;
	add.f64 	%fd561, %fd691, %fd690;
	add.f64 	%fd562, %fd561, %fd689;
	add.f64 	%fd563, %fd697, %fd696;
	add.f64 	%fd564, %fd563, %fd695;
	add.f64 	%fd565, %fd703, %fd702;
	add.f64 	%fd566, %fd565, %fd701;
	add.f64 	%fd567, %fd709, %fd708;
	add.f64 	%fd568, %fd567, %fd707;
	add.f64 	%fd569, %fd715, %fd714;
	add.f64 	%fd570, %fd569, %fd713;
	add.f64 	%fd571, %fd721, %fd720;
	add.f64 	%fd572, %fd571, %fd719;
	add.f64 	%fd573, %fd727, %fd726;
	add.f64 	%fd574, %fd573, %fd725;
	add.f64 	%fd575, %fd733, %fd732;
	add.f64 	%fd576, %fd575, %fd731;
	add.f64 	%fd184, %fd576, 0d0000000000000000;
	add.f64 	%fd185, %fd574, 0d0000000000000000;
	add.f64 	%fd186, %fd572, 0d0000000000000000;
	add.f64 	%fd187, %fd570, 0d0000000000000000;
	add.f64 	%fd188, %fd568, 0d0000000000000000;
	add.f64 	%fd189, %fd566, 0d0000000000000000;
	add.f64 	%fd190, %fd564, 0d0000000000000000;
	add.f64 	%fd191, %fd562, 0d0000000000000000;
	add.f64 	%fd192, %fd560, 0d0000000000000000;
	add.f64 	%fd193, %fd558, 0d0000000000000000;
	add.f64 	%fd194, %fd556, 0d0000000000000000;
	add.f64 	%fd195, %fd554, 0d0000000000000000;
	add.f64 	%fd196, %fd552, 0d0000000000000000;
	add.f64 	%fd197, %fd550, 0d0000000000000000;
	add.f64 	%fd198, %fd548, 0d0000000000000000;
	add.f64 	%fd199, %fd546, 0d0000000000000000;
	setp.eq.s64 	%p92, %rd59, 0;
	@%p92 bra 	$L__BB1_129;

	mul.lo.s64 	%rd415, %rd30, %rd18;
	add.s64 	%rd399, %rd59, %rd415;
	// begin inline asm
	{ atom.add.f64 %fd577,[%rd399],%fd184; }

	// end inline asm
	add.s64 	%rd400, %rd399, 8;
	// begin inline asm
	{ atom.add.f64 %fd579,[%rd400],%fd185; }

	// end inline asm
	add.s64 	%rd401, %rd399, 16;
	// begin inline asm
	{ atom.add.f64 %fd581,[%rd401],%fd186; }

	// end inline asm
	add.s64 	%rd402, %rd399, 24;
	// begin inline asm
	{ atom.add.f64 %fd583,[%rd402],%fd187; }

	// end inline asm
	add.s64 	%rd403, %rd399, 32;
	// begin inline asm
	{ atom.add.f64 %fd585,[%rd403],%fd188; }

	// end inline asm
	add.s64 	%rd404, %rd399, 40;
	// begin inline asm
	{ atom.add.f64 %fd587,[%rd404],%fd189; }

	// end inline asm
	add.s64 	%rd405, %rd399, 48;
	// begin inline asm
	{ atom.add.f64 %fd589,[%rd405],%fd190; }

	// end inline asm
	add.s64 	%rd406, %rd399, 56;
	// begin inline asm
	{ atom.add.f64 %fd591,[%rd406],%fd191; }

	// end inline asm
	add.s64 	%rd407, %rd399, 64;
	// begin inline asm
	{ atom.add.f64 %fd593,[%rd407],%fd192; }

	// end inline asm
	add.s64 	%rd408, %rd399, 72;
	// begin inline asm
	{ atom.add.f64 %fd595,[%rd408],%fd193; }

	// end inline asm
	add.s64 	%rd409, %rd399, 80;
	// begin inline asm
	{ atom.add.f64 %fd597,[%rd409],%fd194; }

	// end inline asm
	add.s64 	%rd410, %rd399, 88;
	// begin inline asm
	{ atom.add.f64 %fd599,[%rd410],%fd195; }

	// end inline asm
	add.s64 	%rd411, %rd399, 96;
	// begin inline asm
	{ atom.add.f64 %fd601,[%rd411],%fd196; }

	// end inline asm
	add.s64 	%rd412, %rd399, 104;
	// begin inline asm
	{ atom.add.f64 %fd603,[%rd412],%fd197; }

	// end inline asm
	add.s64 	%rd413, %rd399, 112;
	// begin inline asm
	{ atom.add.f64 %fd605,[%rd413],%fd198; }

	// end inline asm
	add.s64 	%rd414, %rd399, 120;
	// begin inline asm
	{ atom.add.f64 %fd607,[%rd414],%fd199; }

	// end inline asm
	bra.uni 	$L__BB1_131;

$L__BB1_129:
	setp.eq.s64 	%p93, %rd52, 0;
	@%p93 bra 	$L__BB1_131;

	mul.lo.s64 	%rd432, %rd30, %rd16;
	add.s64 	%rd416, %rd52, %rd432;
	// begin inline asm
	{ atom.add.f64 %fd609,[%rd416],%fd184; }

	// end inline asm
	add.s64 	%rd417, %rd416, 8;
	// begin inline asm
	{ atom.add.f64 %fd611,[%rd417],%fd185; }

	// end inline asm
	add.s64 	%rd418, %rd416, 16;
	// begin inline asm
	{ atom.add.f64 %fd613,[%rd418],%fd186; }

	// end inline asm
	add.s64 	%rd419, %rd416, 24;
	// begin inline asm
	{ atom.add.f64 %fd615,[%rd419],%fd187; }

	// end inline asm
	add.s64 	%rd420, %rd416, 32;
	// begin inline asm
	{ atom.add.f64 %fd617,[%rd420],%fd188; }

	// end inline asm
	add.s64 	%rd421, %rd416, 40;
	// begin inline asm
	{ atom.add.f64 %fd619,[%rd421],%fd189; }

	// end inline asm
	add.s64 	%rd422, %rd416, 48;
	// begin inline asm
	{ atom.add.f64 %fd621,[%rd422],%fd190; }

	// end inline asm
	add.s64 	%rd423, %rd416, 56;
	// begin inline asm
	{ atom.add.f64 %fd623,[%rd423],%fd191; }

	// end inline asm
	add.s64 	%rd424, %rd416, 64;
	// begin inline asm
	{ atom.add.f64 %fd625,[%rd424],%fd192; }

	// end inline asm
	add.s64 	%rd425, %rd416, 72;
	// begin inline asm
	{ atom.add.f64 %fd627,[%rd425],%fd193; }

	// end inline asm
	add.s64 	%rd426, %rd416, 80;
	// begin inline asm
	{ atom.add.f64 %fd629,[%rd426],%fd194; }

	// end inline asm
	add.s64 	%rd427, %rd416, 88;
	// begin inline asm
	{ atom.add.f64 %fd631,[%rd427],%fd195; }

	// end inline asm
	add.s64 	%rd428, %rd416, 96;
	// begin inline asm
	{ atom.add.f64 %fd633,[%rd428],%fd196; }

	// end inline asm
	add.s64 	%rd429, %rd416, 104;
	// begin inline asm
	{ atom.add.f64 %fd635,[%rd429],%fd197; }

	// end inline asm
	add.s64 	%rd430, %rd416, 112;
	// begin inline asm
	{ atom.add.f64 %fd637,[%rd430],%fd198; }

	// end inline asm
	add.s64 	%rd431, %rd416, 120;
	// begin inline asm
	{ atom.add.f64 %fd639,[%rd431],%fd199; }

	// end inline asm

$L__BB1_131:
	ld.param.u64 	%rd433, [compute_inertia_energy_hess_affine_cuda_kernel_backward_param_0+24];
	add.s64 	%rd435, %rd435, %rd15;
	setp.lt.u64 	%p94, %rd435, %rd433;
	@%p94 bra 	$L__BB1_2;

$L__BB1_132:
	ret;

}
	// .globl	compute_inertia_energy_hess_soft_cuda_kernel_forward
.visible .entry compute_inertia_energy_hess_soft_cuda_kernel_forward(
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_forward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_forward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_forward_param_2[184],
	.param .u32 compute_inertia_energy_hess_soft_cuda_kernel_forward_param_3,
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_forward_param_4[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_forward_param_5[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_forward_param_6[56]
)
{
	.local .align 8 .b8 	__local_depot2[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<26>;
	.reg .b16 	%rs<41>;
	.reg .b32 	%r<119>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<108>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.v2.u32 	{%r46, %r47}, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_0];
	ld.param.v2.u32 	{%r48, %r49}, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_0+8];
	ld.param.v2.u32 	{%r54, %r55}, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_1+32];
	mov.b64 	%rd42, compute_inertia_energy_hess_soft_cuda_kernel_forward_param_2;
	ld.param.u32 	%r18, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_3];
	ld.param.v2.u32 	{%r62, %r63}, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_4+32];
	ld.param.v2.u32 	{%r70, %r71}, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_5+32];
	ld.param.v2.u32 	{%r78, %r79}, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_6+32];
	ld.param.u64 	%rd47, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_6];
	ld.param.u64 	%rd45, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_5];
	ld.param.u64 	%rd43, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_4];
	ld.param.u64 	%rd40, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_1];
	ld.param.u64 	%rd39, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_0+24];
	ld.param.u32 	%r8, [compute_inertia_energy_hess_soft_cuda_kernel_forward_param_0+16];
	cvta.to.global.u64 	%rd1, %rd43;
	mov.u32 	%r82, %ntid.x;
	cvt.u64.u32 	%rd2, %r82;
	mov.u32 	%r83, %ctaid.x;
	mul.wide.u32 	%rd49, %r82, %r83;
	mov.u32 	%r84, %tid.x;
	cvt.u64.u32 	%rd50, %r84;
	add.s64 	%rd101, %rd49, %rd50;
	setp.ge.u64 	%p1, %rd101, %rd39;
	@%p1 bra 	$L__BB2_35;

	add.u64 	%rd51, %SP, 0;
	add.u64 	%rd17, %SPL, 0;
	cvta.to.global.u64 	%rd5, %rd47;
	cvta.to.global.u64 	%rd6, %rd45;
	cvta.to.global.u64 	%rd7, %rd40;
	cvt.s64.s32 	%rd8, %r49;
	cvt.s64.s32 	%rd9, %r48;
	cvt.s64.s32 	%rd10, %r47;
	cvt.s64.s32 	%rd11, %r62;
	cvt.s64.s32 	%rd12, %r70;
	cvt.s64.s32 	%rd13, %r78;
	mov.u32 	%r85, %nctaid.x;
	cvt.u64.u32 	%rd52, %r85;
	mul.lo.s64 	%rd14, %rd2, %rd52;
	cvt.s64.s32 	%rd15, %r54;
	mov.u64 	%rd16, %rd42;
	setp.gt.s32 	%p2, %r8, 3;
	@%p2 bra 	$L__BB2_17;
	bra.uni 	$L__BB2_2;

$L__BB2_17:
	cvt.u32.u64 	%r101, %rd8;
	cvt.u32.u64 	%r104, %rd9;
	cvt.u32.u64 	%r107, %rd10;

$L__BB2_18:
	or.b64  	%rd76, %rd101, %rd8;
	and.b64  	%rd77, %rd76, -4294967296;
	setp.eq.s64 	%p14, %rd77, 0;
	@%p14 bra 	$L__BB2_20;

	div.u64 	%rd106, %rd101, %rd8;
	bra.uni 	$L__BB2_21;

$L__BB2_20:
	cvt.u32.u64 	%r102, %rd101;
	div.u32 	%r103, %r102, %r101;
	cvt.u64.u32 	%rd106, %r103;

$L__BB2_21:
	setp.lt.s32 	%p15, %r8, 3;
	@%p15 bra 	$L__BB2_25;

	or.b64  	%rd78, %rd106, %rd9;
	and.b64  	%rd79, %rd78, -4294967296;
	setp.eq.s64 	%p16, %rd79, 0;
	@%p16 bra 	$L__BB2_24;

	div.u64 	%rd106, %rd106, %rd9;
	bra.uni 	$L__BB2_25;

$L__BB2_24:
	cvt.u32.u64 	%r105, %rd106;
	div.u32 	%r106, %r105, %r104;
	cvt.u64.u32 	%rd106, %r106;

$L__BB2_25:
	setp.lt.s32 	%p17, %r8, 2;
	@%p17 bra 	$L__BB2_29;

	or.b64  	%rd80, %rd106, %rd10;
	and.b64  	%rd81, %rd80, -4294967296;
	setp.eq.s64 	%p18, %rd81, 0;
	@%p18 bra 	$L__BB2_28;

	div.u64 	%rd106, %rd106, %rd10;
	bra.uni 	$L__BB2_29;

$L__BB2_28:
	cvt.u32.u64 	%r108, %rd106;
	div.u32 	%r109, %r108, %r107;
	cvt.u64.u32 	%rd106, %r109;

$L__BB2_29:
	cvt.u32.u64 	%r110, %rd106;
	setp.gt.s32 	%p19, %r8, 0;
	selp.b32 	%r111, %r110, 0, %p19;
	cvt.s64.s32 	%rd37, %r111;
	mul.lo.s64 	%rd82, %rd37, %rd11;
	add.s64 	%rd83, %rd1, %rd82;
	add.s32 	%r112, %r111, %r18;
	cvt.s64.s32 	%rd84, %r112;
	mul.lo.s64 	%rd85, %rd84, %rd12;
	add.s64 	%rd86, %rd6, %rd85;
	ld.global.s32 	%rd87, [%rd86];
	mul.lo.s64 	%rd88, %rd87, %rd13;
	add.s64 	%rd89, %rd5, %rd88;
	ld.global.u32 	%r113, [%rd89];
	add.s32 	%r114, %r113, -1;
	setp.lt.u32 	%p20, %r114, 2;
	ld.global.u8 	%rs37, [%rd83];
	setp.ne.s16 	%p21, %rs37, 0;
	or.pred  	%p22, %p21, %p20;
	@%p22 bra 	$L__BB2_34;

	cvt.u32.u64 	%r115, %rd37;
	mul.lo.s64 	%rd90, %rd37, %rd15;
	add.s64 	%rd91, %rd7, %rd90;
	ld.global.f64 	%fd2, [%rd91];
	ld.param.u32 	%r3, [%rd16+172];
	setp.le.s32 	%p23, %r3, %r115;
	selp.u16 	%rs38, 1, 0, %p23;
	shr.u32 	%r116, %r115, 31;
	cvt.u16.u32 	%rs39, %r116;
	or.b16  	%rs40, %rs38, %rs39;
	setp.eq.s16 	%p24, %rs40, 0;
	@%p24 bra 	$L__BB2_32;

	st.local.v2.u32 	[%rd17], {%r115, %r3};
	mov.u64 	%rd92, $str;
	cvta.global.u64 	%rd93, %rd92;
	{ // callseq 175, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd93;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r118, [retval0+0];
	} // callseq 175
	bra.uni 	$L__BB2_34;

$L__BB2_32:
	ld.param.u64 	%rd95, [%rd16+112];
	cvta.to.global.u64 	%rd96, %rd95;
	ld.param.s32 	%rd97, [%rd16+144];
	mul.lo.s64 	%rd98, %rd97, %rd37;
	add.s64 	%rd99, %rd96, %rd98;
	st.global.f64 	[%rd99], %fd2;
	mov.u64 	%rd100, 0;
	st.global.u64 	[%rd99+8], %rd100;
	st.global.u64 	[%rd99+16], %rd100;
	st.global.u64 	[%rd99+24], %rd100;
	st.global.f64 	[%rd99+32], %fd2;
	st.global.u64 	[%rd99+40], %rd100;
	st.global.u64 	[%rd99+48], %rd100;
	st.global.u64 	[%rd99+56], %rd100;
	st.global.f64 	[%rd99+64], %fd2;

$L__BB2_34:
	add.s64 	%rd101, %rd101, %rd14;
	setp.lt.u64 	%p25, %rd101, %rd39;
	@%p25 bra 	$L__BB2_18;
	bra.uni 	$L__BB2_35;

$L__BB2_2:
	cvt.u32.u64 	%r86, %rd9;
	cvt.u32.u64 	%r89, %rd10;

$L__BB2_3:
	setp.lt.s32 	%p3, %r8, 3;
	mov.u64 	%rd102, %rd101;
	@%p3 bra 	$L__BB2_7;

	or.b64  	%rd53, %rd101, %rd9;
	and.b64  	%rd54, %rd53, -4294967296;
	setp.eq.s64 	%p4, %rd54, 0;
	@%p4 bra 	$L__BB2_6;

	div.u64 	%rd102, %rd101, %rd9;
	bra.uni 	$L__BB2_7;

$L__BB2_6:
	cvt.u32.u64 	%r87, %rd101;
	div.u32 	%r88, %r87, %r86;
	cvt.u64.u32 	%rd102, %r88;

$L__BB2_7:
	setp.lt.s32 	%p5, %r8, 2;
	@%p5 bra 	$L__BB2_11;

	or.b64  	%rd55, %rd102, %rd10;
	and.b64  	%rd56, %rd55, -4294967296;
	setp.eq.s64 	%p6, %rd56, 0;
	@%p6 bra 	$L__BB2_10;

	div.u64 	%rd102, %rd102, %rd10;
	bra.uni 	$L__BB2_11;

$L__BB2_10:
	cvt.u32.u64 	%r90, %rd102;
	div.u32 	%r91, %r90, %r89;
	cvt.u64.u32 	%rd102, %r91;

$L__BB2_11:
	cvt.u32.u64 	%r92, %rd102;
	setp.gt.s32 	%p7, %r8, 0;
	selp.b32 	%r93, %r92, 0, %p7;
	cvt.s64.s32 	%rd25, %r93;
	mul.lo.s64 	%rd57, %rd25, %rd11;
	add.s64 	%rd58, %rd1, %rd57;
	add.s32 	%r94, %r93, %r18;
	cvt.s64.s32 	%rd59, %r94;
	mul.lo.s64 	%rd60, %rd59, %rd12;
	add.s64 	%rd61, %rd6, %rd60;
	ld.global.s32 	%rd62, [%rd61];
	mul.lo.s64 	%rd63, %rd62, %rd13;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.u32 	%r95, [%rd64];
	add.s32 	%r96, %r95, -1;
	setp.lt.u32 	%p8, %r96, 2;
	ld.global.u8 	%rs33, [%rd58];
	setp.ne.s16 	%p9, %rs33, 0;
	or.pred  	%p10, %p9, %p8;
	@%p10 bra 	$L__BB2_16;

	cvt.u32.u64 	%r97, %rd25;
	mul.lo.s64 	%rd65, %rd25, %rd15;
	add.s64 	%rd66, %rd7, %rd65;
	ld.global.f64 	%fd1, [%rd66];
	ld.param.u32 	%r2, [%rd16+172];
	setp.le.s32 	%p11, %r2, %r97;
	selp.u16 	%rs34, 1, 0, %p11;
	shr.u32 	%r98, %r97, 31;
	cvt.u16.u32 	%rs35, %r98;
	or.b16  	%rs36, %rs34, %rs35;
	setp.eq.s16 	%p12, %rs36, 0;
	@%p12 bra 	$L__BB2_14;

	st.local.v2.u32 	[%rd17], {%r97, %r2};
	mov.u64 	%rd67, $str;
	cvta.global.u64 	%rd68, %rd67;
	{ // callseq 174, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd68;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r100, [retval0+0];
	} // callseq 174
	bra.uni 	$L__BB2_16;

$L__BB2_14:
	ld.param.u64 	%rd70, [%rd16+112];
	cvta.to.global.u64 	%rd71, %rd70;
	ld.param.s32 	%rd72, [%rd16+144];
	mul.lo.s64 	%rd73, %rd72, %rd25;
	add.s64 	%rd74, %rd71, %rd73;
	st.global.f64 	[%rd74], %fd1;
	mov.u64 	%rd75, 0;
	st.global.u64 	[%rd74+8], %rd75;
	st.global.u64 	[%rd74+16], %rd75;
	st.global.u64 	[%rd74+24], %rd75;
	st.global.f64 	[%rd74+32], %fd1;
	st.global.u64 	[%rd74+40], %rd75;
	st.global.u64 	[%rd74+48], %rd75;
	st.global.u64 	[%rd74+56], %rd75;
	st.global.f64 	[%rd74+64], %fd1;

$L__BB2_16:
	add.s64 	%rd101, %rd101, %rd14;
	setp.lt.u64 	%p13, %rd101, %rd39;
	@%p13 bra 	$L__BB2_3;

$L__BB2_35:
	ret;

}
	// .globl	compute_inertia_energy_hess_soft_cuda_kernel_backward
.visible .entry compute_inertia_energy_hess_soft_cuda_kernel_backward(
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_2[184],
	.param .u32 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_3,
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_4[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_5[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_6[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_7[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_8[184],
	.param .u32 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_9,
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_10[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_11[56],
	.param .align 8 .b8 compute_inertia_energy_hess_soft_cuda_kernel_backward_param_12[56]
)
{
	.local .align 8 .b8 	__local_depot3[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<20>;
	.reg .b16 	%rs<47>;
	.reg .b32 	%r<124>;
	.reg .f64 	%fd<31>;
	.reg .b64 	%rd<91>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.v2.u32 	{%r55, %r56}, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_0];
	ld.param.v2.u32 	{%r57, %r58}, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_0+8];
	ld.param.v2.u32 	{%r63, %r64}, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_1+32];
	mov.b64 	%rd40, compute_inertia_energy_hess_soft_cuda_kernel_backward_param_2;
	ld.param.u32 	%r18, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_3];
	ld.param.v2.u32 	{%r71, %r72}, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_4+32];
	ld.param.v2.u32 	{%r79, %r80}, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_5+32];
	ld.param.v2.u32 	{%r87, %r88}, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_6+32];
	ld.param.v2.u32 	{%r95, %r96}, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_7+32];
	ld.param.u64 	%rd47, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_7];
	ld.param.u64 	%rd45, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_6];
	ld.param.u64 	%rd43, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_5];
	ld.param.u64 	%rd41, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_4];
	ld.param.u64 	%rd39, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_1+8];
	ld.param.u64 	%rd38, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_1];
	ld.param.u64 	%rd37, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_0+24];
	ld.param.u32 	%r8, [compute_inertia_energy_hess_soft_cuda_kernel_backward_param_0+16];
	mov.u32 	%r99, %ntid.x;
	cvt.u64.u32 	%rd1, %r99;
	mov.u32 	%r100, %ctaid.x;
	mul.wide.u32 	%rd49, %r99, %r100;
	mov.u32 	%r101, %tid.x;
	cvt.u64.u32 	%rd50, %r101;
	add.s64 	%rd87, %rd49, %rd50;
	setp.ge.u64 	%p1, %rd87, %rd37;
	@%p1 bra 	$L__BB3_27;

	add.u64 	%rd51, %SP, 0;
	add.u64 	%rd6, %SPL, 0;
	cvta.to.global.u64 	%rd7, %rd45;
	cvta.to.global.u64 	%rd8, %rd43;
	cvta.to.global.u64 	%rd9, %rd38;
	cvt.s64.s32 	%rd10, %r58;
	cvt.s64.s32 	%rd11, %r57;
	cvt.s64.s32 	%rd12, %r56;
	cvt.s64.s32 	%rd13, %r71;
	cvt.s64.s32 	%rd14, %r79;
	cvt.s64.s32 	%rd15, %r87;
	mov.u32 	%r102, %nctaid.x;
	cvt.u64.u32 	%rd52, %r102;
	mul.lo.s64 	%rd16, %rd1, %rd52;
	cvt.s64.s32 	%rd17, %r63;
	cvt.s64.s32 	%rd18, %r95;
	cvta.to.global.u64 	%rd19, %rd41;
	mov.u64 	%rd20, %rd40;

$L__BB3_2:
	setp.lt.s32 	%p2, %r8, 4;
	mov.u64 	%rd88, %rd87;
	@%p2 bra 	$L__BB3_6;

	or.b64  	%rd53, %rd87, %rd10;
	and.b64  	%rd54, %rd53, -4294967296;
	setp.eq.s64 	%p3, %rd54, 0;
	@%p3 bra 	$L__BB3_5;

	div.u64 	%rd88, %rd87, %rd10;
	bra.uni 	$L__BB3_6;

$L__BB3_5:
	cvt.u32.u64 	%r103, %rd10;
	cvt.u32.u64 	%r104, %rd87;
	div.u32 	%r105, %r104, %r103;
	cvt.u64.u32 	%rd88, %r105;

$L__BB3_6:
	setp.lt.s32 	%p4, %r8, 3;
	@%p4 bra 	$L__BB3_10;

	or.b64  	%rd55, %rd88, %rd11;
	and.b64  	%rd56, %rd55, -4294967296;
	setp.eq.s64 	%p5, %rd56, 0;
	@%p5 bra 	$L__BB3_9;

	div.u64 	%rd88, %rd88, %rd11;
	bra.uni 	$L__BB3_10;

$L__BB3_9:
	cvt.u32.u64 	%r106, %rd11;
	cvt.u32.u64 	%r107, %rd88;
	div.u32 	%r108, %r107, %r106;
	cvt.u64.u32 	%rd88, %r108;

$L__BB3_10:
	setp.lt.s32 	%p6, %r8, 2;
	@%p6 bra 	$L__BB3_14;

	or.b64  	%rd57, %rd88, %rd12;
	and.b64  	%rd58, %rd57, -4294967296;
	setp.eq.s64 	%p7, %rd58, 0;
	@%p7 bra 	$L__BB3_13;

	div.u64 	%rd88, %rd88, %rd12;
	bra.uni 	$L__BB3_14;

$L__BB3_13:
	cvt.u32.u64 	%r109, %rd12;
	cvt.u32.u64 	%r110, %rd88;
	div.u32 	%r111, %r110, %r109;
	cvt.u64.u32 	%rd88, %r111;

$L__BB3_14:
	cvt.u32.u64 	%r112, %rd88;
	setp.gt.s32 	%p8, %r8, 0;
	selp.b32 	%r113, %r112, 0, %p8;
	cvt.s64.s32 	%rd31, %r113;
	mul.lo.s64 	%rd59, %rd31, %rd13;
	add.s64 	%rd60, %rd19, %rd59;
	add.s32 	%r114, %r113, %r18;
	cvt.s64.s32 	%rd61, %r114;
	mul.lo.s64 	%rd62, %rd61, %rd14;
	add.s64 	%rd63, %rd8, %rd62;
	ld.global.s32 	%rd64, [%rd63];
	mul.lo.s64 	%rd65, %rd64, %rd15;
	add.s64 	%rd66, %rd7, %rd65;
	ld.global.u32 	%r115, [%rd66];
	add.s32 	%r116, %r115, -1;
	setp.lt.u32 	%p9, %r116, 2;
	ld.global.u8 	%rs42, [%rd60];
	setp.ne.s16 	%p10, %rs42, 0;
	or.pred  	%p11, %p10, %p9;
	@%p11 bra 	$L__BB3_26;

	cvt.u32.u64 	%r117, %rd31;
	mul.lo.s64 	%rd32, %rd31, %rd17;
	add.s64 	%rd67, %rd9, %rd32;
	ld.global.f64 	%fd1, [%rd67];
	ld.param.u32 	%r2, [%rd20+172];
	setp.le.s32 	%p12, %r2, %r117;
	selp.u16 	%rs43, 1, 0, %p12;
	shr.u32 	%r118, %r117, 31;
	cvt.u16.u32 	%rs1, %r118;
	or.b16  	%rs44, %rs43, %rs1;
	setp.eq.s16 	%p13, %rs44, 0;
	@%p13 bra 	$L__BB3_17;

	st.local.v2.u32 	[%rd6], {%r117, %r2};
	mov.u64 	%rd68, $str;
	cvta.global.u64 	%rd69, %rd68;
	{ // callseq 176, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd69;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r120, [retval0+0];
	} // callseq 176
	bra.uni 	$L__BB3_18;

$L__BB3_17:
	ld.param.u64 	%rd71, [%rd20+112];
	cvta.to.global.u64 	%rd72, %rd71;
	ld.param.s32 	%rd73, [%rd20+144];
	mul.lo.s64 	%rd74, %rd73, %rd31;
	add.s64 	%rd75, %rd72, %rd74;
	st.global.f64 	[%rd75], %fd1;
	mov.u64 	%rd76, 0;
	st.global.u64 	[%rd75+8], %rd76;
	st.global.u64 	[%rd75+16], %rd76;
	st.global.u64 	[%rd75+24], %rd76;
	st.global.f64 	[%rd75+32], %fd1;
	st.global.u64 	[%rd75+40], %rd76;
	st.global.u64 	[%rd75+48], %rd76;
	st.global.u64 	[%rd75+56], %rd76;
	st.global.f64 	[%rd75+64], %fd1;

$L__BB3_18:
	ld.param.u32 	%r3, [%rd20+172];
	setp.le.s32 	%p14, %r3, %r117;
	selp.u16 	%rs45, 1, 0, %p14;
	or.b16  	%rs46, %rs45, %rs1;
	setp.eq.s16 	%p15, %rs46, 0;
	mov.f64 	%fd28, 0d0000000000000000;
	mov.f64 	%fd29, 0d0000000000000000;
	mov.f64 	%fd30, 0d0000000000000000;
	@%p15 bra 	$L__BB3_20;

	st.local.v2.u32 	[%rd6], {%r117, %r3};
	mov.u64 	%rd77, $str;
	cvta.global.u64 	%rd78, %rd77;
	{ // callseq 177, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd78;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r123, [retval0+0];
	} // callseq 177
	bra.uni 	$L__BB3_22;

$L__BB3_20:
	ld.param.u64 	%rd35, [%rd20+120];
	setp.eq.s64 	%p16, %rd35, 0;
	@%p16 bra 	$L__BB3_22;

	cvta.to.global.u64 	%rd80, %rd35;
	ld.param.s32 	%rd81, [%rd20+144];
	mul.lo.s64 	%rd82, %rd81, %rd31;
	add.s64 	%rd83, %rd80, %rd82;
	ld.global.f64 	%fd15, [%rd83];
	add.f64 	%fd30, %fd15, 0d0000000000000000;
	ld.global.f64 	%fd16, [%rd83+32];
	add.f64 	%fd29, %fd16, 0d0000000000000000;
	ld.global.f64 	%fd17, [%rd83+64];
	add.f64 	%fd28, %fd17, 0d0000000000000000;

$L__BB3_22:
	add.f64 	%fd18, %fd30, 0d0000000000000000;
	add.f64 	%fd19, %fd18, %fd29;
	add.f64 	%fd20, %fd19, %fd28;
	add.f64 	%fd8, %fd20, 0d0000000000000000;
	setp.eq.s64 	%p17, %rd47, 0;
	@%p17 bra 	$L__BB3_24;

	mul.lo.s64 	%rd85, %rd31, %rd18;
	add.s64 	%rd84, %rd47, %rd85;
	// begin inline asm
	{ atom.add.f64 %fd21,[%rd84],%fd8; }

	// end inline asm
	bra.uni 	$L__BB3_26;

$L__BB3_24:
	setp.eq.s64 	%p18, %rd39, 0;
	@%p18 bra 	$L__BB3_26;

	add.s64 	%rd86, %rd39, %rd32;
	// begin inline asm
	{ atom.add.f64 %fd23,[%rd86],%fd8; }

	// end inline asm

$L__BB3_26:
	add.s64 	%rd87, %rd87, %rd16;
	setp.lt.u64 	%p19, %rd87, %rd37;
	@%p19 bra 	$L__BB3_2;

$L__BB3_27:
	ret;

}
	// .globl	compute_inertia_energy_val_affine_cuda_kernel_forward
.visible .entry compute_inertia_energy_val_affine_cuda_kernel_forward(
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_forward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_forward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_forward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_forward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_forward_param_4[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_forward_param_5[56]
)
{
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<42>;
	.reg .b32 	%r<109>;
	.reg .f64 	%fd<209>;
	.reg .b64 	%rd<112>;


	ld.param.v2.u32 	{%r52, %r53}, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_0];
	ld.param.v2.u32 	{%r54, %r55}, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_0+8];
	ld.param.v2.u32 	{%r60, %r61}, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_1+32];
	ld.param.v2.u32 	{%r68, %r69}, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_2+32];
	ld.param.v2.u32 	{%r76, %r77}, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_3+32];
	ld.param.v2.u32 	{%r84, %r85}, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_4+32];
	ld.param.v2.u32 	{%r92, %r93}, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_5+32];
	ld.param.u64 	%rd39, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_5];
	ld.param.u64 	%rd37, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_4];
	ld.param.u64 	%rd35, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_3];
	ld.param.u64 	%rd33, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_2];
	ld.param.u64 	%rd31, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_1];
	ld.param.u64 	%rd30, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_0+24];
	ld.param.u32 	%r6, [compute_inertia_energy_val_affine_cuda_kernel_forward_param_0+16];
	mov.u32 	%r96, %ntid.x;
	cvt.u64.u32 	%rd1, %r96;
	mov.u32 	%r97, %ctaid.x;
	mul.wide.u32 	%rd41, %r96, %r97;
	mov.u32 	%r98, %tid.x;
	cvt.u64.u32 	%rd42, %r98;
	add.s64 	%rd108, %rd41, %rd42;
	setp.ge.u64 	%p1, %rd108, %rd30;
	@%p1 bra 	$L__BB4_17;

	cvta.to.global.u64 	%rd5, %rd37;
	cvta.to.global.u64 	%rd6, %rd35;
	cvta.to.global.u64 	%rd7, %rd33;
	cvt.s64.s32 	%rd8, %r55;
	cvt.s64.s32 	%rd9, %r54;
	cvt.s64.s32 	%rd10, %r53;
	cvt.s64.s32 	%rd11, %r92;
	cvt.s64.s32 	%rd12, %r68;
	cvt.s64.s32 	%rd13, %r76;
	cvt.s64.s32 	%rd14, %r84;
	cvt.s64.s32 	%rd15, %r60;
	mov.u32 	%r99, %nctaid.x;
	cvt.u64.u32 	%rd43, %r99;
	mul.lo.s64 	%rd16, %rd1, %rd43;
	cvta.to.global.u64 	%rd17, %rd39;

$L__BB4_2:
	setp.lt.s32 	%p2, %r6, 4;
	mov.u64 	%rd109, %rd108;
	@%p2 bra 	$L__BB4_6;

	or.b64  	%rd44, %rd108, %rd8;
	and.b64  	%rd45, %rd44, -4294967296;
	setp.eq.s64 	%p3, %rd45, 0;
	@%p3 bra 	$L__BB4_5;

	div.u64 	%rd109, %rd108, %rd8;
	bra.uni 	$L__BB4_6;

$L__BB4_5:
	cvt.u32.u64 	%r100, %rd8;
	cvt.u32.u64 	%r101, %rd108;
	div.u32 	%r102, %r101, %r100;
	cvt.u64.u32 	%rd109, %r102;

$L__BB4_6:
	setp.lt.s32 	%p4, %r6, 3;
	@%p4 bra 	$L__BB4_10;

	or.b64  	%rd46, %rd109, %rd9;
	and.b64  	%rd47, %rd46, -4294967296;
	setp.eq.s64 	%p5, %rd47, 0;
	@%p5 bra 	$L__BB4_9;

	div.u64 	%rd109, %rd109, %rd9;
	bra.uni 	$L__BB4_10;

$L__BB4_9:
	cvt.u32.u64 	%r103, %rd9;
	cvt.u32.u64 	%r104, %rd109;
	div.u32 	%r105, %r104, %r103;
	cvt.u64.u32 	%rd109, %r105;

$L__BB4_10:
	setp.lt.s32 	%p6, %r6, 2;
	@%p6 bra 	$L__BB4_14;

	or.b64  	%rd48, %rd109, %rd10;
	and.b64  	%rd49, %rd48, -4294967296;
	setp.eq.s64 	%p7, %rd49, 0;
	@%p7 bra 	$L__BB4_13;

	div.u64 	%rd109, %rd109, %rd10;
	bra.uni 	$L__BB4_14;

$L__BB4_13:
	cvt.u32.u64 	%r106, %rd10;
	cvt.u32.u64 	%r107, %rd109;
	div.u32 	%r108, %r107, %r106;
	cvt.u64.u32 	%rd109, %r108;

$L__BB4_14:
	cvt.s64.s32 	%rd50, %rd109;
	setp.gt.s32 	%p8, %r6, 0;
	selp.b64 	%rd28, %rd50, 0, %p8;
	mul.lo.s64 	%rd51, %rd28, %rd11;
	add.s64 	%rd52, %rd17, %rd51;
	ld.global.u8 	%rs41, [%rd52];
	setp.ne.s16 	%p9, %rs41, 0;
	@%p9 bra 	$L__BB4_16;

	mul.lo.s64 	%rd101, %rd28, %rd12;
	add.s64 	%rd102, %rd7, %rd101;
	mul.lo.s64 	%rd103, %rd28, %rd13;
	add.s64 	%rd104, %rd6, %rd103;
	ld.global.f64 	%fd97, [%rd104];
	ld.global.f64 	%fd98, [%rd102];
	sub.f64 	%fd99, %fd98, %fd97;
	ld.global.f64 	%fd100, [%rd104+8];
	ld.global.f64 	%fd101, [%rd102+8];
	sub.f64 	%fd102, %fd101, %fd100;
	ld.global.f64 	%fd103, [%rd104+16];
	ld.global.f64 	%fd104, [%rd102+16];
	sub.f64 	%fd105, %fd104, %fd103;
	ld.global.f64 	%fd106, [%rd104+24];
	ld.global.f64 	%fd107, [%rd102+24];
	sub.f64 	%fd108, %fd107, %fd106;
	ld.global.f64 	%fd109, [%rd104+32];
	ld.global.f64 	%fd110, [%rd102+32];
	sub.f64 	%fd111, %fd110, %fd109;
	ld.global.f64 	%fd112, [%rd104+40];
	ld.global.f64 	%fd113, [%rd102+40];
	sub.f64 	%fd114, %fd113, %fd112;
	ld.global.f64 	%fd115, [%rd104+48];
	ld.global.f64 	%fd116, [%rd102+48];
	sub.f64 	%fd117, %fd116, %fd115;
	ld.global.f64 	%fd118, [%rd104+56];
	ld.global.f64 	%fd119, [%rd102+56];
	sub.f64 	%fd120, %fd119, %fd118;
	ld.global.f64 	%fd121, [%rd104+64];
	ld.global.f64 	%fd122, [%rd102+64];
	sub.f64 	%fd123, %fd122, %fd121;
	ld.global.f64 	%fd124, [%rd104+72];
	ld.global.f64 	%fd125, [%rd102+72];
	sub.f64 	%fd126, %fd125, %fd124;
	ld.global.f64 	%fd127, [%rd104+80];
	ld.global.f64 	%fd128, [%rd102+80];
	sub.f64 	%fd129, %fd128, %fd127;
	ld.global.f64 	%fd130, [%rd104+88];
	ld.global.f64 	%fd131, [%rd102+88];
	sub.f64 	%fd132, %fd131, %fd130;
	mul.lo.s64 	%rd105, %rd28, %rd14;
	add.s64 	%rd106, %rd5, %rd105;
	ld.global.f64 	%fd133, [%rd106+120];
	ld.global.f64 	%fd134, [%rd106+112];
	ld.global.f64 	%fd135, [%rd106+104];
	ld.global.f64 	%fd136, [%rd106+96];
	ld.global.f64 	%fd137, [%rd106+88];
	ld.global.f64 	%fd138, [%rd106+80];
	ld.global.f64 	%fd139, [%rd106+72];
	ld.global.f64 	%fd140, [%rd106+64];
	ld.global.f64 	%fd141, [%rd106+56];
	ld.global.f64 	%fd142, [%rd106+48];
	ld.global.f64 	%fd143, [%rd106+40];
	ld.global.f64 	%fd144, [%rd106+32];
	ld.global.f64 	%fd145, [%rd106+24];
	ld.global.f64 	%fd146, [%rd106+16];
	ld.global.f64 	%fd147, [%rd106+8];
	mul.f64 	%fd148, %fd99, 0d3FE0000000000000;
	ld.global.f64 	%fd149, [%rd106];
	mul.f64 	%fd150, %fd148, %fd149;
	mul.f64 	%fd2, %fd99, %fd150;
	mul.lo.s64 	%rd107, %rd28, %rd15;
	add.s64 	%rd100, %rd31, %rd107;
	// begin inline asm
	{ atom.add.f64 %fd1,[%rd100],%fd2; }

	// end inline asm
	mul.f64 	%fd151, %fd148, %fd147;
	mul.f64 	%fd4, %fd108, %fd151;
	// begin inline asm
	{ atom.add.f64 %fd3,[%rd100],%fd4; }

	// end inline asm
	mul.f64 	%fd152, %fd148, %fd146;
	mul.f64 	%fd6, %fd117, %fd152;
	// begin inline asm
	{ atom.add.f64 %fd5,[%rd100],%fd6; }

	// end inline asm
	mul.f64 	%fd153, %fd148, %fd145;
	mul.f64 	%fd8, %fd126, %fd153;
	// begin inline asm
	{ atom.add.f64 %fd7,[%rd100],%fd8; }

	// end inline asm
	mul.f64 	%fd154, %fd102, 0d3FE0000000000000;
	mul.f64 	%fd155, %fd154, %fd149;
	mul.f64 	%fd10, %fd102, %fd155;
	// begin inline asm
	{ atom.add.f64 %fd9,[%rd100],%fd10; }

	// end inline asm
	mul.f64 	%fd156, %fd154, %fd147;
	mul.f64 	%fd12, %fd111, %fd156;
	// begin inline asm
	{ atom.add.f64 %fd11,[%rd100],%fd12; }

	// end inline asm
	mul.f64 	%fd157, %fd154, %fd146;
	mul.f64 	%fd14, %fd120, %fd157;
	// begin inline asm
	{ atom.add.f64 %fd13,[%rd100],%fd14; }

	// end inline asm
	mul.f64 	%fd158, %fd154, %fd145;
	mul.f64 	%fd16, %fd129, %fd158;
	// begin inline asm
	{ atom.add.f64 %fd15,[%rd100],%fd16; }

	// end inline asm
	mul.f64 	%fd159, %fd105, 0d3FE0000000000000;
	mul.f64 	%fd160, %fd159, %fd149;
	mul.f64 	%fd18, %fd105, %fd160;
	// begin inline asm
	{ atom.add.f64 %fd17,[%rd100],%fd18; }

	// end inline asm
	mul.f64 	%fd161, %fd159, %fd147;
	mul.f64 	%fd20, %fd114, %fd161;
	// begin inline asm
	{ atom.add.f64 %fd19,[%rd100],%fd20; }

	// end inline asm
	mul.f64 	%fd162, %fd159, %fd146;
	mul.f64 	%fd22, %fd123, %fd162;
	// begin inline asm
	{ atom.add.f64 %fd21,[%rd100],%fd22; }

	// end inline asm
	mul.f64 	%fd163, %fd159, %fd145;
	mul.f64 	%fd24, %fd132, %fd163;
	// begin inline asm
	{ atom.add.f64 %fd23,[%rd100],%fd24; }

	// end inline asm
	mul.f64 	%fd164, %fd108, 0d3FE0000000000000;
	mul.f64 	%fd165, %fd164, %fd144;
	mul.f64 	%fd26, %fd99, %fd165;
	// begin inline asm
	{ atom.add.f64 %fd25,[%rd100],%fd26; }

	// end inline asm
	mul.f64 	%fd166, %fd164, %fd143;
	mul.f64 	%fd28, %fd108, %fd166;
	// begin inline asm
	{ atom.add.f64 %fd27,[%rd100],%fd28; }

	// end inline asm
	mul.f64 	%fd167, %fd164, %fd142;
	mul.f64 	%fd30, %fd117, %fd167;
	// begin inline asm
	{ atom.add.f64 %fd29,[%rd100],%fd30; }

	// end inline asm
	mul.f64 	%fd168, %fd164, %fd141;
	mul.f64 	%fd32, %fd126, %fd168;
	// begin inline asm
	{ atom.add.f64 %fd31,[%rd100],%fd32; }

	// end inline asm
	mul.f64 	%fd169, %fd111, 0d3FE0000000000000;
	mul.f64 	%fd170, %fd169, %fd144;
	mul.f64 	%fd34, %fd102, %fd170;
	// begin inline asm
	{ atom.add.f64 %fd33,[%rd100],%fd34; }

	// end inline asm
	mul.f64 	%fd171, %fd169, %fd143;
	mul.f64 	%fd36, %fd111, %fd171;
	// begin inline asm
	{ atom.add.f64 %fd35,[%rd100],%fd36; }

	// end inline asm
	mul.f64 	%fd172, %fd169, %fd142;
	mul.f64 	%fd38, %fd120, %fd172;
	// begin inline asm
	{ atom.add.f64 %fd37,[%rd100],%fd38; }

	// end inline asm
	mul.f64 	%fd173, %fd169, %fd141;
	mul.f64 	%fd40, %fd129, %fd173;
	// begin inline asm
	{ atom.add.f64 %fd39,[%rd100],%fd40; }

	// end inline asm
	mul.f64 	%fd174, %fd114, 0d3FE0000000000000;
	mul.f64 	%fd175, %fd174, %fd144;
	mul.f64 	%fd42, %fd105, %fd175;
	// begin inline asm
	{ atom.add.f64 %fd41,[%rd100],%fd42; }

	// end inline asm
	mul.f64 	%fd176, %fd174, %fd143;
	mul.f64 	%fd44, %fd114, %fd176;
	// begin inline asm
	{ atom.add.f64 %fd43,[%rd100],%fd44; }

	// end inline asm
	mul.f64 	%fd177, %fd174, %fd142;
	mul.f64 	%fd46, %fd123, %fd177;
	// begin inline asm
	{ atom.add.f64 %fd45,[%rd100],%fd46; }

	// end inline asm
	mul.f64 	%fd178, %fd174, %fd141;
	mul.f64 	%fd48, %fd132, %fd178;
	// begin inline asm
	{ atom.add.f64 %fd47,[%rd100],%fd48; }

	// end inline asm
	mul.f64 	%fd179, %fd117, 0d3FE0000000000000;
	mul.f64 	%fd180, %fd179, %fd140;
	mul.f64 	%fd50, %fd99, %fd180;
	// begin inline asm
	{ atom.add.f64 %fd49,[%rd100],%fd50; }

	// end inline asm
	mul.f64 	%fd181, %fd179, %fd139;
	mul.f64 	%fd52, %fd108, %fd181;
	// begin inline asm
	{ atom.add.f64 %fd51,[%rd100],%fd52; }

	// end inline asm
	mul.f64 	%fd182, %fd179, %fd138;
	mul.f64 	%fd54, %fd117, %fd182;
	// begin inline asm
	{ atom.add.f64 %fd53,[%rd100],%fd54; }

	// end inline asm
	mul.f64 	%fd183, %fd179, %fd137;
	mul.f64 	%fd56, %fd126, %fd183;
	// begin inline asm
	{ atom.add.f64 %fd55,[%rd100],%fd56; }

	// end inline asm
	mul.f64 	%fd184, %fd120, 0d3FE0000000000000;
	mul.f64 	%fd185, %fd184, %fd140;
	mul.f64 	%fd58, %fd102, %fd185;
	// begin inline asm
	{ atom.add.f64 %fd57,[%rd100],%fd58; }

	// end inline asm
	mul.f64 	%fd186, %fd184, %fd139;
	mul.f64 	%fd60, %fd111, %fd186;
	// begin inline asm
	{ atom.add.f64 %fd59,[%rd100],%fd60; }

	// end inline asm
	mul.f64 	%fd187, %fd184, %fd138;
	mul.f64 	%fd62, %fd120, %fd187;
	// begin inline asm
	{ atom.add.f64 %fd61,[%rd100],%fd62; }

	// end inline asm
	mul.f64 	%fd188, %fd184, %fd137;
	mul.f64 	%fd64, %fd129, %fd188;
	// begin inline asm
	{ atom.add.f64 %fd63,[%rd100],%fd64; }

	// end inline asm
	mul.f64 	%fd189, %fd123, 0d3FE0000000000000;
	mul.f64 	%fd190, %fd189, %fd140;
	mul.f64 	%fd66, %fd105, %fd190;
	// begin inline asm
	{ atom.add.f64 %fd65,[%rd100],%fd66; }

	// end inline asm
	mul.f64 	%fd191, %fd189, %fd139;
	mul.f64 	%fd68, %fd114, %fd191;
	// begin inline asm
	{ atom.add.f64 %fd67,[%rd100],%fd68; }

	// end inline asm
	mul.f64 	%fd192, %fd189, %fd138;
	mul.f64 	%fd70, %fd123, %fd192;
	// begin inline asm
	{ atom.add.f64 %fd69,[%rd100],%fd70; }

	// end inline asm
	mul.f64 	%fd193, %fd189, %fd137;
	mul.f64 	%fd72, %fd132, %fd193;
	// begin inline asm
	{ atom.add.f64 %fd71,[%rd100],%fd72; }

	// end inline asm
	mul.f64 	%fd194, %fd126, 0d3FE0000000000000;
	mul.f64 	%fd195, %fd194, %fd136;
	mul.f64 	%fd74, %fd99, %fd195;
	// begin inline asm
	{ atom.add.f64 %fd73,[%rd100],%fd74; }

	// end inline asm
	mul.f64 	%fd196, %fd194, %fd135;
	mul.f64 	%fd76, %fd108, %fd196;
	// begin inline asm
	{ atom.add.f64 %fd75,[%rd100],%fd76; }

	// end inline asm
	mul.f64 	%fd197, %fd194, %fd134;
	mul.f64 	%fd78, %fd117, %fd197;
	// begin inline asm
	{ atom.add.f64 %fd77,[%rd100],%fd78; }

	// end inline asm
	mul.f64 	%fd198, %fd194, %fd133;
	mul.f64 	%fd80, %fd126, %fd198;
	// begin inline asm
	{ atom.add.f64 %fd79,[%rd100],%fd80; }

	// end inline asm
	mul.f64 	%fd199, %fd129, 0d3FE0000000000000;
	mul.f64 	%fd200, %fd199, %fd136;
	mul.f64 	%fd82, %fd102, %fd200;
	// begin inline asm
	{ atom.add.f64 %fd81,[%rd100],%fd82; }

	// end inline asm
	mul.f64 	%fd201, %fd199, %fd135;
	mul.f64 	%fd84, %fd111, %fd201;
	// begin inline asm
	{ atom.add.f64 %fd83,[%rd100],%fd84; }

	// end inline asm
	mul.f64 	%fd202, %fd199, %fd134;
	mul.f64 	%fd86, %fd120, %fd202;
	// begin inline asm
	{ atom.add.f64 %fd85,[%rd100],%fd86; }

	// end inline asm
	mul.f64 	%fd203, %fd199, %fd133;
	mul.f64 	%fd88, %fd129, %fd203;
	// begin inline asm
	{ atom.add.f64 %fd87,[%rd100],%fd88; }

	// end inline asm
	mul.f64 	%fd204, %fd132, 0d3FE0000000000000;
	mul.f64 	%fd205, %fd204, %fd136;
	mul.f64 	%fd90, %fd105, %fd205;
	// begin inline asm
	{ atom.add.f64 %fd89,[%rd100],%fd90; }

	// end inline asm
	mul.f64 	%fd206, %fd204, %fd135;
	mul.f64 	%fd92, %fd114, %fd206;
	// begin inline asm
	{ atom.add.f64 %fd91,[%rd100],%fd92; }

	// end inline asm
	mul.f64 	%fd207, %fd204, %fd134;
	mul.f64 	%fd94, %fd123, %fd207;
	// begin inline asm
	{ atom.add.f64 %fd93,[%rd100],%fd94; }

	// end inline asm
	mul.f64 	%fd208, %fd204, %fd133;
	mul.f64 	%fd96, %fd132, %fd208;
	// begin inline asm
	{ atom.add.f64 %fd95,[%rd100],%fd96; }

	// end inline asm

$L__BB4_16:
	add.s64 	%rd108, %rd108, %rd16;
	setp.lt.u64 	%p10, %rd108, %rd30;
	@%p10 bra 	$L__BB4_2;

$L__BB4_17:
	ret;

}
	// .globl	compute_inertia_energy_val_affine_cuda_kernel_backward
.visible .entry compute_inertia_energy_val_affine_cuda_kernel_backward(
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_4[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_5[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_6[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_7[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_8[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_9[56],
	.param .align 8 .b8 compute_inertia_energy_val_affine_cuda_kernel_backward_param_10[56]
)
{
	.reg .pred 	%p<157>;
	.reg .b16 	%rs<74>;
	.reg .b32 	%r<177>;
	.reg .f64 	%fd<2094>;
	.reg .b64 	%rd<724>;


	ld.param.v2.u32 	{%r88, %r89}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_0];
	ld.param.v2.u32 	{%r90, %r91}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_0+8];
	ld.param.v2.u32 	{%r96, %r97}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_1+32];
	ld.param.v2.u32 	{%r104, %r105}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_2+32];
	ld.param.v2.u32 	{%r112, %r113}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_3+32];
	ld.param.v2.u32 	{%r120, %r121}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_4+32];
	ld.param.v2.u32 	{%r128, %r129}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_5+32];
	ld.param.v2.u32 	{%r136, %r137}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_6+32];
	ld.param.v2.u32 	{%r144, %r145}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_7+32];
	ld.param.v2.u32 	{%r152, %r153}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_8+32];
	ld.param.v2.u32 	{%r160, %r161}, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_9+32];
	ld.param.u64 	%rd65, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_9];
	ld.param.u64 	%rd63, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_8];
	ld.param.u64 	%rd61, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_7];
	ld.param.u64 	%rd59, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_6];
	ld.param.u64 	%rd57, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_5];
	ld.param.u64 	%rd56, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_4+8];
	ld.param.u64 	%rd55, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_4];
	ld.param.u64 	%rd54, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_3+8];
	ld.param.u64 	%rd53, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_3];
	ld.param.u64 	%rd52, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_2+8];
	ld.param.u64 	%rd51, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_2];
	ld.param.u64 	%rd50, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_1+8];
	ld.param.u64 	%rd48, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_0+24];
	ld.param.u32 	%r6, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_0+16];
	mov.u32 	%r164, %ntid.x;
	cvt.u64.u32 	%rd1, %r164;
	mov.u32 	%r165, %ctaid.x;
	mul.wide.u32 	%rd67, %r164, %r165;
	mov.u32 	%r166, %tid.x;
	cvt.u64.u32 	%rd68, %r166;
	add.s64 	%rd720, %rd67, %rd68;
	setp.ge.u64 	%p1, %rd720, %rd48;
	@%p1 bra 	$L__BB5_308;

	cvta.to.global.u64 	%rd12, %rd59;
	cvta.to.global.u64 	%rd14, %rd55;
	cvta.to.global.u64 	%rd15, %rd53;
	cvta.to.global.u64 	%rd16, %rd51;
	cvt.s64.s32 	%rd17, %r91;
	cvt.s64.s32 	%rd18, %r90;
	cvt.s64.s32 	%rd19, %r89;
	cvt.s64.s32 	%rd20, %r128;
	cvt.s64.s32 	%rd21, %r104;
	cvt.s64.s32 	%rd22, %r112;
	cvt.s64.s32 	%rd23, %r120;
	mov.u32 	%r167, %nctaid.x;
	cvt.u64.u32 	%rd69, %r167;
	mul.lo.s64 	%rd24, %rd1, %rd69;
	cvt.s64.s32 	%rd25, %r136;
	cvt.s64.s32 	%rd26, %r96;
	cvt.s64.s32 	%rd27, %r160;
	cvt.s64.s32 	%rd28, %r152;
	cvt.s64.s32 	%rd29, %r144;
	cvta.to.global.u64 	%rd30, %rd57;

$L__BB5_2:
	setp.lt.s32 	%p2, %r6, 4;
	mov.u64 	%rd721, %rd720;
	@%p2 bra 	$L__BB5_6;

	or.b64  	%rd70, %rd720, %rd17;
	and.b64  	%rd71, %rd70, -4294967296;
	setp.eq.s64 	%p3, %rd71, 0;
	@%p3 bra 	$L__BB5_5;

	div.u64 	%rd721, %rd720, %rd17;
	bra.uni 	$L__BB5_6;

$L__BB5_5:
	cvt.u32.u64 	%r168, %rd17;
	cvt.u32.u64 	%r169, %rd720;
	div.u32 	%r170, %r169, %r168;
	cvt.u64.u32 	%rd721, %r170;

$L__BB5_6:
	setp.lt.s32 	%p4, %r6, 3;
	@%p4 bra 	$L__BB5_10;

	or.b64  	%rd72, %rd721, %rd18;
	and.b64  	%rd73, %rd72, -4294967296;
	setp.eq.s64 	%p5, %rd73, 0;
	@%p5 bra 	$L__BB5_9;

	div.u64 	%rd721, %rd721, %rd18;
	bra.uni 	$L__BB5_10;

$L__BB5_9:
	cvt.u32.u64 	%r171, %rd18;
	cvt.u32.u64 	%r172, %rd721;
	div.u32 	%r173, %r172, %r171;
	cvt.u64.u32 	%rd721, %r173;

$L__BB5_10:
	setp.lt.s32 	%p6, %r6, 2;
	@%p6 bra 	$L__BB5_14;

	or.b64  	%rd74, %rd721, %rd19;
	and.b64  	%rd75, %rd74, -4294967296;
	setp.eq.s64 	%p7, %rd75, 0;
	@%p7 bra 	$L__BB5_13;

	div.u64 	%rd721, %rd721, %rd19;
	bra.uni 	$L__BB5_14;

$L__BB5_13:
	cvt.u32.u64 	%r174, %rd19;
	cvt.u32.u64 	%r175, %rd721;
	div.u32 	%r176, %r175, %r174;
	cvt.u64.u32 	%rd721, %r176;

$L__BB5_14:
	cvt.s64.s32 	%rd76, %rd721;
	setp.gt.s32 	%p8, %r6, 0;
	selp.b64 	%rd41, %rd76, 0, %p8;
	mul.lo.s64 	%rd77, %rd41, %rd20;
	add.s64 	%rd78, %rd30, %rd77;
	ld.global.u8 	%rs73, [%rd78];
	setp.ne.s16 	%p9, %rs73, 0;
	@%p9 bra 	$L__BB5_307;

	cvta.to.global.u64 	%rd719, %rd50;
	ld.param.u64 	%rd718, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_6];
	setp.eq.s64 	%p10, %rd718, 0;
	mul.lo.s64 	%rd42, %rd41, %rd21;
	add.s64 	%rd79, %rd16, %rd42;
	mul.lo.s64 	%rd43, %rd41, %rd22;
	add.s64 	%rd80, %rd15, %rd43;
	ld.global.f64 	%fd356, [%rd80];
	ld.global.f64 	%fd357, [%rd79];
	sub.f64 	%fd1, %fd357, %fd356;
	ld.global.f64 	%fd358, [%rd80+8];
	ld.global.f64 	%fd359, [%rd79+8];
	sub.f64 	%fd2, %fd359, %fd358;
	ld.global.f64 	%fd360, [%rd80+16];
	ld.global.f64 	%fd361, [%rd79+16];
	sub.f64 	%fd3, %fd361, %fd360;
	ld.global.f64 	%fd362, [%rd80+24];
	ld.global.f64 	%fd363, [%rd79+24];
	sub.f64 	%fd4, %fd363, %fd362;
	ld.global.f64 	%fd364, [%rd80+32];
	ld.global.f64 	%fd365, [%rd79+32];
	sub.f64 	%fd5, %fd365, %fd364;
	ld.global.f64 	%fd366, [%rd80+40];
	ld.global.f64 	%fd367, [%rd79+40];
	sub.f64 	%fd6, %fd367, %fd366;
	ld.global.f64 	%fd368, [%rd80+48];
	ld.global.f64 	%fd369, [%rd79+48];
	sub.f64 	%fd7, %fd369, %fd368;
	ld.global.f64 	%fd370, [%rd80+56];
	ld.global.f64 	%fd371, [%rd79+56];
	sub.f64 	%fd8, %fd371, %fd370;
	ld.global.f64 	%fd372, [%rd80+64];
	ld.global.f64 	%fd373, [%rd79+64];
	sub.f64 	%fd9, %fd373, %fd372;
	ld.global.f64 	%fd374, [%rd80+72];
	ld.global.f64 	%fd375, [%rd79+72];
	sub.f64 	%fd10, %fd375, %fd374;
	ld.global.f64 	%fd376, [%rd80+80];
	ld.global.f64 	%fd377, [%rd79+80];
	sub.f64 	%fd11, %fd377, %fd376;
	ld.global.f64 	%fd378, [%rd80+88];
	ld.global.f64 	%fd379, [%rd79+88];
	sub.f64 	%fd12, %fd379, %fd378;
	mul.lo.s64 	%rd44, %rd41, %rd23;
	add.s64 	%rd81, %rd14, %rd44;
	mul.f64 	%fd13, %fd1, 0d3FE0000000000000;
	ld.global.f64 	%fd14, [%rd81];
	ld.global.f64 	%fd15, [%rd81+8];
	ld.global.f64 	%fd16, [%rd81+16];
	ld.global.f64 	%fd17, [%rd81+24];
	mul.f64 	%fd18, %fd2, 0d3FE0000000000000;
	mul.f64 	%fd19, %fd3, 0d3FE0000000000000;
	mul.f64 	%fd20, %fd4, 0d3FE0000000000000;
	ld.global.f64 	%fd21, [%rd81+32];
	ld.global.f64 	%fd22, [%rd81+40];
	ld.global.f64 	%fd23, [%rd81+48];
	ld.global.f64 	%fd24, [%rd81+56];
	mul.f64 	%fd25, %fd5, 0d3FE0000000000000;
	mul.f64 	%fd26, %fd6, 0d3FE0000000000000;
	mul.f64 	%fd27, %fd7, 0d3FE0000000000000;
	ld.global.f64 	%fd28, [%rd81+64];
	ld.global.f64 	%fd29, [%rd81+72];
	ld.global.f64 	%fd30, [%rd81+80];
	ld.global.f64 	%fd31, [%rd81+88];
	mul.f64 	%fd32, %fd8, 0d3FE0000000000000;
	mul.f64 	%fd33, %fd9, 0d3FE0000000000000;
	mul.f64 	%fd34, %fd10, 0d3FE0000000000000;
	ld.global.f64 	%fd35, [%rd81+96];
	ld.global.f64 	%fd36, [%rd81+104];
	ld.global.f64 	%fd37, [%rd81+112];
	ld.global.f64 	%fd38, [%rd81+120];
	mul.f64 	%fd39, %fd11, 0d3FE0000000000000;
	mul.f64 	%fd40, %fd12, 0d3FE0000000000000;
	mul.lo.s64 	%rd82, %rd41, %rd25;
	add.s64 	%rd45, %rd12, %rd82;
	mul.lo.s64 	%rd83, %rd41, %rd26;
	add.s64 	%rd46, %rd719, %rd83;
	@%p10 bra 	$L__BB5_17;

	ld.global.f64 	%fd380, [%rd45];
	add.f64 	%fd2046, %fd380, 0d0000000000000000;
	bra.uni 	$L__BB5_19;

$L__BB5_17:
	setp.eq.s64 	%p11, %rd50, 0;
	mov.f64 	%fd2046, 0d0000000000000000;
	@%p11 bra 	$L__BB5_19;

	ld.global.f64 	%fd382, [%rd46];
	add.f64 	%fd2046, %fd382, 0d0000000000000000;

$L__BB5_19:
	fma.rn.f64 	%fd383, %fd12, %fd2046, 0d0000000000000000;
	mul.f64 	%fd384, %fd40, %fd38;
	fma.rn.f64 	%fd385, %fd384, %fd2046, 0d0000000000000000;
	fma.rn.f64 	%fd386, %fd38, %fd383, 0d0000000000000000;
	fma.rn.f64 	%fd44, %fd40, %fd383, 0d0000000000000000;
	fma.rn.f64 	%fd387, %fd386, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd45, %fd385, %fd387;
	@%p10 bra 	$L__BB5_21;

	ld.global.f64 	%fd388, [%rd45];
	add.f64 	%fd2047, %fd388, 0d0000000000000000;
	bra.uni 	$L__BB5_23;

$L__BB5_21:
	setp.eq.s64 	%p13, %rd50, 0;
	mov.f64 	%fd2047, 0d0000000000000000;
	@%p13 bra 	$L__BB5_23;

	ld.global.f64 	%fd390, [%rd46];
	add.f64 	%fd2047, %fd390, 0d0000000000000000;

$L__BB5_23:
	fma.rn.f64 	%fd391, %fd9, %fd2047, 0d0000000000000000;
	fma.rn.f64 	%fd393, %fd37, %fd391, 0d0000000000000000;
	fma.rn.f64 	%fd50, %fd40, %fd391, 0d0000000000000000;
	fma.rn.f64 	%fd394, %fd393, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd51, %fd45, %fd394;
	@%p10 bra 	$L__BB5_25;

	ld.global.f64 	%fd395, [%rd45];
	add.f64 	%fd2048, %fd395, 0d0000000000000000;
	bra.uni 	$L__BB5_27;

$L__BB5_25:
	setp.eq.s64 	%p15, %rd50, 0;
	mov.f64 	%fd2048, 0d0000000000000000;
	@%p15 bra 	$L__BB5_27;

	ld.global.f64 	%fd397, [%rd46];
	add.f64 	%fd2048, %fd397, 0d0000000000000000;

$L__BB5_27:
	fma.rn.f64 	%fd398, %fd6, %fd2048, 0d0000000000000000;
	fma.rn.f64 	%fd400, %fd36, %fd398, 0d0000000000000000;
	fma.rn.f64 	%fd56, %fd40, %fd398, 0d0000000000000000;
	fma.rn.f64 	%fd401, %fd400, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd57, %fd51, %fd401;
	@%p10 bra 	$L__BB5_29;

	ld.global.f64 	%fd402, [%rd45];
	add.f64 	%fd2049, %fd402, 0d0000000000000000;
	bra.uni 	$L__BB5_31;

$L__BB5_29:
	setp.eq.s64 	%p17, %rd50, 0;
	mov.f64 	%fd2049, 0d0000000000000000;
	@%p17 bra 	$L__BB5_31;

	ld.global.f64 	%fd404, [%rd46];
	add.f64 	%fd2049, %fd404, 0d0000000000000000;

$L__BB5_31:
	fma.rn.f64 	%fd405, %fd3, %fd2049, 0d0000000000000000;
	fma.rn.f64 	%fd407, %fd35, %fd405, 0d0000000000000000;
	fma.rn.f64 	%fd62, %fd40, %fd405, 0d0000000000000000;
	fma.rn.f64 	%fd408, %fd407, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd63, %fd57, %fd408;
	@%p10 bra 	$L__BB5_33;

	ld.global.f64 	%fd409, [%rd45];
	add.f64 	%fd2050, %fd409, 0d0000000000000000;
	bra.uni 	$L__BB5_35;

$L__BB5_33:
	setp.eq.s64 	%p19, %rd50, 0;
	mov.f64 	%fd2050, 0d0000000000000000;
	@%p19 bra 	$L__BB5_35;

	ld.global.f64 	%fd411, [%rd46];
	add.f64 	%fd2050, %fd411, 0d0000000000000000;

$L__BB5_35:
	fma.rn.f64 	%fd412, %fd11, %fd2050, 0d0000000000000000;
	mul.f64 	%fd413, %fd39, %fd38;
	fma.rn.f64 	%fd414, %fd413, %fd2050, 0d0000000000000000;
	fma.rn.f64 	%fd415, %fd38, %fd412, 0d0000000000000000;
	fma.rn.f64 	%fd416, %fd39, %fd412, 0d0000000000000000;
	add.f64 	%fd67, %fd44, %fd416;
	fma.rn.f64 	%fd417, %fd415, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd68, %fd414, %fd417;
	@%p10 bra 	$L__BB5_37;

	ld.global.f64 	%fd418, [%rd45];
	add.f64 	%fd2051, %fd418, 0d0000000000000000;
	bra.uni 	$L__BB5_39;

$L__BB5_37:
	setp.eq.s64 	%p21, %rd50, 0;
	mov.f64 	%fd2051, 0d0000000000000000;
	@%p21 bra 	$L__BB5_39;

	ld.global.f64 	%fd420, [%rd46];
	add.f64 	%fd2051, %fd420, 0d0000000000000000;

$L__BB5_39:
	fma.rn.f64 	%fd421, %fd8, %fd2051, 0d0000000000000000;
	mul.f64 	%fd422, %fd39, %fd37;
	fma.rn.f64 	%fd72, %fd422, %fd2051, 0d0000000000000000;
	fma.rn.f64 	%fd423, %fd37, %fd421, 0d0000000000000000;
	fma.rn.f64 	%fd424, %fd39, %fd421, 0d0000000000000000;
	add.f64 	%fd73, %fd50, %fd424;
	fma.rn.f64 	%fd425, %fd423, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd74, %fd68, %fd425;
	@%p10 bra 	$L__BB5_41;

	ld.global.f64 	%fd426, [%rd45];
	add.f64 	%fd2052, %fd426, 0d0000000000000000;
	bra.uni 	$L__BB5_43;

$L__BB5_41:
	setp.eq.s64 	%p23, %rd50, 0;
	mov.f64 	%fd2052, 0d0000000000000000;
	@%p23 bra 	$L__BB5_43;

	ld.global.f64 	%fd428, [%rd46];
	add.f64 	%fd2052, %fd428, 0d0000000000000000;

$L__BB5_43:
	fma.rn.f64 	%fd429, %fd5, %fd2052, 0d0000000000000000;
	mul.f64 	%fd430, %fd39, %fd36;
	fma.rn.f64 	%fd78, %fd430, %fd2052, 0d0000000000000000;
	fma.rn.f64 	%fd431, %fd36, %fd429, 0d0000000000000000;
	fma.rn.f64 	%fd432, %fd39, %fd429, 0d0000000000000000;
	add.f64 	%fd79, %fd56, %fd432;
	fma.rn.f64 	%fd433, %fd431, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd80, %fd74, %fd433;
	@%p10 bra 	$L__BB5_45;

	ld.global.f64 	%fd434, [%rd45];
	add.f64 	%fd2053, %fd434, 0d0000000000000000;
	bra.uni 	$L__BB5_47;

$L__BB5_45:
	setp.eq.s64 	%p25, %rd50, 0;
	mov.f64 	%fd2053, 0d0000000000000000;
	@%p25 bra 	$L__BB5_47;

	ld.global.f64 	%fd436, [%rd46];
	add.f64 	%fd2053, %fd436, 0d0000000000000000;

$L__BB5_47:
	fma.rn.f64 	%fd437, %fd2, %fd2053, 0d0000000000000000;
	mul.f64 	%fd438, %fd39, %fd35;
	fma.rn.f64 	%fd84, %fd438, %fd2053, 0d0000000000000000;
	fma.rn.f64 	%fd439, %fd35, %fd437, 0d0000000000000000;
	fma.rn.f64 	%fd440, %fd39, %fd437, 0d0000000000000000;
	add.f64 	%fd85, %fd62, %fd440;
	fma.rn.f64 	%fd441, %fd439, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd86, %fd80, %fd441;
	@%p10 bra 	$L__BB5_49;

	ld.global.f64 	%fd442, [%rd45];
	add.f64 	%fd2054, %fd442, 0d0000000000000000;
	bra.uni 	$L__BB5_51;

$L__BB5_49:
	setp.eq.s64 	%p27, %rd50, 0;
	mov.f64 	%fd2054, 0d0000000000000000;
	@%p27 bra 	$L__BB5_51;

	ld.global.f64 	%fd444, [%rd46];
	add.f64 	%fd2054, %fd444, 0d0000000000000000;

$L__BB5_51:
	fma.rn.f64 	%fd445, %fd10, %fd2054, 0d0000000000000000;
	mul.f64 	%fd446, %fd34, %fd38;
	fma.rn.f64 	%fd447, %fd446, %fd2054, 0d0000000000000000;
	fma.rn.f64 	%fd448, %fd38, %fd445, 0d0000000000000000;
	fma.rn.f64 	%fd449, %fd34, %fd445, 0d0000000000000000;
	add.f64 	%fd90, %fd67, %fd449;
	fma.rn.f64 	%fd450, %fd448, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd91, %fd447, %fd450;
	@%p10 bra 	$L__BB5_53;

	ld.global.f64 	%fd451, [%rd45];
	add.f64 	%fd2055, %fd451, 0d0000000000000000;
	bra.uni 	$L__BB5_55;

$L__BB5_53:
	setp.eq.s64 	%p29, %rd50, 0;
	mov.f64 	%fd2055, 0d0000000000000000;
	@%p29 bra 	$L__BB5_55;

	ld.global.f64 	%fd453, [%rd46];
	add.f64 	%fd2055, %fd453, 0d0000000000000000;

$L__BB5_55:
	fma.rn.f64 	%fd454, %fd7, %fd2055, 0d0000000000000000;
	mul.f64 	%fd455, %fd34, %fd37;
	fma.rn.f64 	%fd95, %fd455, %fd2055, 0d0000000000000000;
	fma.rn.f64 	%fd456, %fd37, %fd454, 0d0000000000000000;
	fma.rn.f64 	%fd457, %fd34, %fd454, 0d0000000000000000;
	add.f64 	%fd96, %fd73, %fd457;
	fma.rn.f64 	%fd458, %fd456, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd97, %fd91, %fd458;
	@%p10 bra 	$L__BB5_57;

	ld.global.f64 	%fd459, [%rd45];
	add.f64 	%fd2056, %fd459, 0d0000000000000000;
	bra.uni 	$L__BB5_59;

$L__BB5_57:
	setp.eq.s64 	%p31, %rd50, 0;
	mov.f64 	%fd2056, 0d0000000000000000;
	@%p31 bra 	$L__BB5_59;

	ld.global.f64 	%fd461, [%rd46];
	add.f64 	%fd2056, %fd461, 0d0000000000000000;

$L__BB5_59:
	fma.rn.f64 	%fd462, %fd4, %fd2056, 0d0000000000000000;
	mul.f64 	%fd463, %fd34, %fd36;
	fma.rn.f64 	%fd101, %fd463, %fd2056, 0d0000000000000000;
	fma.rn.f64 	%fd464, %fd36, %fd462, 0d0000000000000000;
	fma.rn.f64 	%fd465, %fd34, %fd462, 0d0000000000000000;
	add.f64 	%fd102, %fd79, %fd465;
	fma.rn.f64 	%fd466, %fd464, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd103, %fd97, %fd466;
	@%p10 bra 	$L__BB5_61;

	ld.global.f64 	%fd467, [%rd45];
	add.f64 	%fd2057, %fd467, 0d0000000000000000;
	bra.uni 	$L__BB5_63;

$L__BB5_61:
	setp.eq.s64 	%p33, %rd50, 0;
	mov.f64 	%fd2057, 0d0000000000000000;
	@%p33 bra 	$L__BB5_63;

	ld.global.f64 	%fd469, [%rd46];
	add.f64 	%fd2057, %fd469, 0d0000000000000000;

$L__BB5_63:
	fma.rn.f64 	%fd470, %fd1, %fd2057, 0d0000000000000000;
	mul.f64 	%fd471, %fd34, %fd35;
	fma.rn.f64 	%fd107, %fd471, %fd2057, 0d0000000000000000;
	fma.rn.f64 	%fd472, %fd35, %fd470, 0d0000000000000000;
	fma.rn.f64 	%fd473, %fd34, %fd470, 0d0000000000000000;
	add.f64 	%fd108, %fd85, %fd473;
	fma.rn.f64 	%fd474, %fd472, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd109, %fd103, %fd474;
	@%p10 bra 	$L__BB5_65;

	ld.global.f64 	%fd475, [%rd45];
	add.f64 	%fd2058, %fd475, 0d0000000000000000;
	bra.uni 	$L__BB5_67;

$L__BB5_65:
	setp.eq.s64 	%p35, %rd50, 0;
	mov.f64 	%fd2058, 0d0000000000000000;
	@%p35 bra 	$L__BB5_67;

	ld.global.f64 	%fd477, [%rd46];
	add.f64 	%fd2058, %fd477, 0d0000000000000000;

$L__BB5_67:
	mul.f64 	%fd2039, %fd12, 0d3FE0000000000000;
	mul.f64 	%fd2038, %fd2039, %fd37;
	fma.rn.f64 	%fd2037, %fd2038, %fd2047, 0d0000000000000000;
	fma.rn.f64 	%fd478, %fd12, %fd2058, 0d0000000000000000;
	mul.f64 	%fd479, %fd33, %fd31;
	fma.rn.f64 	%fd480, %fd479, %fd2058, 0d0000000000000000;
	add.f64 	%fd113, %fd63, %fd480;
	fma.rn.f64 	%fd481, %fd31, %fd478, 0d0000000000000000;
	fma.rn.f64 	%fd114, %fd33, %fd478, 0d0000000000000000;
	fma.rn.f64 	%fd482, %fd481, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd115, %fd2037, %fd482;
	@%p10 bra 	$L__BB5_69;

	ld.global.f64 	%fd483, [%rd45];
	add.f64 	%fd2059, %fd483, 0d0000000000000000;
	bra.uni 	$L__BB5_71;

$L__BB5_69:
	setp.eq.s64 	%p37, %rd50, 0;
	mov.f64 	%fd2059, 0d0000000000000000;
	@%p37 bra 	$L__BB5_71;

	ld.global.f64 	%fd485, [%rd46];
	add.f64 	%fd2059, %fd485, 0d0000000000000000;

$L__BB5_71:
	fma.rn.f64 	%fd486, %fd9, %fd2059, 0d0000000000000000;
	mul.f64 	%fd487, %fd33, %fd30;
	fma.rn.f64 	%fd488, %fd487, %fd2059, 0d0000000000000000;
	add.f64 	%fd489, %fd115, %fd488;
	fma.rn.f64 	%fd490, %fd30, %fd486, 0d0000000000000000;
	fma.rn.f64 	%fd119, %fd33, %fd486, 0d0000000000000000;
	fma.rn.f64 	%fd491, %fd490, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd120, %fd489, %fd491;
	@%p10 bra 	$L__BB5_73;

	ld.global.f64 	%fd492, [%rd45];
	add.f64 	%fd2060, %fd492, 0d0000000000000000;
	bra.uni 	$L__BB5_75;

$L__BB5_73:
	setp.eq.s64 	%p39, %rd50, 0;
	mov.f64 	%fd2060, 0d0000000000000000;
	@%p39 bra 	$L__BB5_75;

	ld.global.f64 	%fd494, [%rd46];
	add.f64 	%fd2060, %fd494, 0d0000000000000000;

$L__BB5_75:
	mul.f64 	%fd2042, %fd12, 0d3FE0000000000000;
	mul.f64 	%fd2041, %fd2042, %fd36;
	fma.rn.f64 	%fd2040, %fd2041, %fd2048, 0d0000000000000000;
	fma.rn.f64 	%fd495, %fd6, %fd2060, 0d0000000000000000;
	mul.f64 	%fd496, %fd33, %fd29;
	fma.rn.f64 	%fd497, %fd496, %fd2060, 0d0000000000000000;
	add.f64 	%fd124, %fd2040, %fd497;
	fma.rn.f64 	%fd498, %fd29, %fd495, 0d0000000000000000;
	fma.rn.f64 	%fd125, %fd33, %fd495, 0d0000000000000000;
	fma.rn.f64 	%fd499, %fd498, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd126, %fd120, %fd499;
	@%p10 bra 	$L__BB5_77;

	ld.global.f64 	%fd500, [%rd45];
	add.f64 	%fd2061, %fd500, 0d0000000000000000;
	bra.uni 	$L__BB5_79;

$L__BB5_77:
	setp.eq.s64 	%p41, %rd50, 0;
	mov.f64 	%fd2061, 0d0000000000000000;
	@%p41 bra 	$L__BB5_79;

	ld.global.f64 	%fd502, [%rd46];
	add.f64 	%fd2061, %fd502, 0d0000000000000000;

$L__BB5_79:
	mul.f64 	%fd2045, %fd12, 0d3FE0000000000000;
	mul.f64 	%fd2044, %fd2045, %fd35;
	fma.rn.f64 	%fd2043, %fd2044, %fd2049, 0d0000000000000000;
	fma.rn.f64 	%fd503, %fd3, %fd2061, 0d0000000000000000;
	mul.f64 	%fd504, %fd33, %fd28;
	fma.rn.f64 	%fd505, %fd504, %fd2061, 0d0000000000000000;
	add.f64 	%fd130, %fd2043, %fd505;
	fma.rn.f64 	%fd506, %fd28, %fd503, 0d0000000000000000;
	fma.rn.f64 	%fd131, %fd33, %fd503, 0d0000000000000000;
	fma.rn.f64 	%fd507, %fd506, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd132, %fd126, %fd507;
	@%p10 bra 	$L__BB5_81;

	ld.global.f64 	%fd508, [%rd45];
	add.f64 	%fd2062, %fd508, 0d0000000000000000;
	bra.uni 	$L__BB5_83;

$L__BB5_81:
	setp.eq.s64 	%p43, %rd50, 0;
	mov.f64 	%fd2062, 0d0000000000000000;
	@%p43 bra 	$L__BB5_83;

	ld.global.f64 	%fd510, [%rd46];
	add.f64 	%fd2062, %fd510, 0d0000000000000000;

$L__BB5_83:
	fma.rn.f64 	%fd511, %fd11, %fd2062, 0d0000000000000000;
	mul.f64 	%fd512, %fd32, %fd31;
	fma.rn.f64 	%fd513, %fd512, %fd2062, 0d0000000000000000;
	add.f64 	%fd136, %fd86, %fd513;
	fma.rn.f64 	%fd514, %fd31, %fd511, 0d0000000000000000;
	fma.rn.f64 	%fd515, %fd32, %fd511, 0d0000000000000000;
	add.f64 	%fd137, %fd114, %fd515;
	fma.rn.f64 	%fd516, %fd514, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd138, %fd72, %fd516;
	@%p10 bra 	$L__BB5_85;

	ld.global.f64 	%fd517, [%rd45];
	add.f64 	%fd2063, %fd517, 0d0000000000000000;
	bra.uni 	$L__BB5_87;

$L__BB5_85:
	setp.eq.s64 	%p45, %rd50, 0;
	mov.f64 	%fd2063, 0d0000000000000000;
	@%p45 bra 	$L__BB5_87;

	ld.global.f64 	%fd519, [%rd46];
	add.f64 	%fd2063, %fd519, 0d0000000000000000;

$L__BB5_87:
	fma.rn.f64 	%fd520, %fd8, %fd2063, 0d0000000000000000;
	mul.f64 	%fd521, %fd32, %fd30;
	fma.rn.f64 	%fd522, %fd521, %fd2063, 0d0000000000000000;
	add.f64 	%fd523, %fd138, %fd522;
	fma.rn.f64 	%fd524, %fd30, %fd520, 0d0000000000000000;
	fma.rn.f64 	%fd525, %fd32, %fd520, 0d0000000000000000;
	add.f64 	%fd142, %fd119, %fd525;
	fma.rn.f64 	%fd526, %fd524, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd143, %fd523, %fd526;
	@%p10 bra 	$L__BB5_89;

	ld.global.f64 	%fd527, [%rd45];
	add.f64 	%fd2064, %fd527, 0d0000000000000000;
	bra.uni 	$L__BB5_91;

$L__BB5_89:
	setp.eq.s64 	%p47, %rd50, 0;
	mov.f64 	%fd2064, 0d0000000000000000;
	@%p47 bra 	$L__BB5_91;

	ld.global.f64 	%fd529, [%rd46];
	add.f64 	%fd2064, %fd529, 0d0000000000000000;

$L__BB5_91:
	fma.rn.f64 	%fd530, %fd5, %fd2064, 0d0000000000000000;
	mul.f64 	%fd531, %fd32, %fd29;
	fma.rn.f64 	%fd532, %fd531, %fd2064, 0d0000000000000000;
	add.f64 	%fd147, %fd78, %fd532;
	fma.rn.f64 	%fd533, %fd29, %fd530, 0d0000000000000000;
	fma.rn.f64 	%fd534, %fd32, %fd530, 0d0000000000000000;
	add.f64 	%fd148, %fd125, %fd534;
	fma.rn.f64 	%fd535, %fd533, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd149, %fd143, %fd535;
	@%p10 bra 	$L__BB5_93;

	ld.global.f64 	%fd536, [%rd45];
	add.f64 	%fd2065, %fd536, 0d0000000000000000;
	bra.uni 	$L__BB5_95;

$L__BB5_93:
	setp.eq.s64 	%p49, %rd50, 0;
	mov.f64 	%fd2065, 0d0000000000000000;
	@%p49 bra 	$L__BB5_95;

	ld.global.f64 	%fd538, [%rd46];
	add.f64 	%fd2065, %fd538, 0d0000000000000000;

$L__BB5_95:
	fma.rn.f64 	%fd539, %fd2, %fd2065, 0d0000000000000000;
	mul.f64 	%fd540, %fd32, %fd28;
	fma.rn.f64 	%fd541, %fd540, %fd2065, 0d0000000000000000;
	add.f64 	%fd153, %fd84, %fd541;
	fma.rn.f64 	%fd542, %fd28, %fd539, 0d0000000000000000;
	fma.rn.f64 	%fd543, %fd32, %fd539, 0d0000000000000000;
	add.f64 	%fd154, %fd131, %fd543;
	fma.rn.f64 	%fd544, %fd542, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd155, %fd149, %fd544;
	@%p10 bra 	$L__BB5_97;

	ld.global.f64 	%fd545, [%rd45];
	add.f64 	%fd2066, %fd545, 0d0000000000000000;
	bra.uni 	$L__BB5_99;

$L__BB5_97:
	setp.eq.s64 	%p51, %rd50, 0;
	mov.f64 	%fd2066, 0d0000000000000000;
	@%p51 bra 	$L__BB5_99;

	ld.global.f64 	%fd547, [%rd46];
	add.f64 	%fd2066, %fd547, 0d0000000000000000;

$L__BB5_99:
	fma.rn.f64 	%fd548, %fd10, %fd2066, 0d0000000000000000;
	mul.f64 	%fd549, %fd27, %fd31;
	fma.rn.f64 	%fd550, %fd549, %fd2066, 0d0000000000000000;
	add.f64 	%fd159, %fd109, %fd550;
	fma.rn.f64 	%fd551, %fd31, %fd548, 0d0000000000000000;
	fma.rn.f64 	%fd552, %fd27, %fd548, 0d0000000000000000;
	add.f64 	%fd160, %fd137, %fd552;
	fma.rn.f64 	%fd553, %fd551, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd161, %fd95, %fd553;
	@%p10 bra 	$L__BB5_101;

	ld.global.f64 	%fd554, [%rd45];
	add.f64 	%fd2067, %fd554, 0d0000000000000000;
	bra.uni 	$L__BB5_103;

$L__BB5_101:
	setp.eq.s64 	%p53, %rd50, 0;
	mov.f64 	%fd2067, 0d0000000000000000;
	@%p53 bra 	$L__BB5_103;

	ld.global.f64 	%fd556, [%rd46];
	add.f64 	%fd2067, %fd556, 0d0000000000000000;

$L__BB5_103:
	fma.rn.f64 	%fd557, %fd7, %fd2067, 0d0000000000000000;
	mul.f64 	%fd558, %fd27, %fd30;
	fma.rn.f64 	%fd559, %fd558, %fd2067, 0d0000000000000000;
	add.f64 	%fd560, %fd161, %fd559;
	fma.rn.f64 	%fd561, %fd30, %fd557, 0d0000000000000000;
	fma.rn.f64 	%fd562, %fd27, %fd557, 0d0000000000000000;
	add.f64 	%fd165, %fd142, %fd562;
	fma.rn.f64 	%fd563, %fd561, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd166, %fd560, %fd563;
	@%p10 bra 	$L__BB5_105;

	ld.global.f64 	%fd564, [%rd45];
	add.f64 	%fd2068, %fd564, 0d0000000000000000;
	bra.uni 	$L__BB5_107;

$L__BB5_105:
	setp.eq.s64 	%p55, %rd50, 0;
	mov.f64 	%fd2068, 0d0000000000000000;
	@%p55 bra 	$L__BB5_107;

	ld.global.f64 	%fd566, [%rd46];
	add.f64 	%fd2068, %fd566, 0d0000000000000000;

$L__BB5_107:
	fma.rn.f64 	%fd567, %fd4, %fd2068, 0d0000000000000000;
	mul.f64 	%fd568, %fd27, %fd29;
	fma.rn.f64 	%fd569, %fd568, %fd2068, 0d0000000000000000;
	add.f64 	%fd170, %fd101, %fd569;
	fma.rn.f64 	%fd570, %fd29, %fd567, 0d0000000000000000;
	fma.rn.f64 	%fd571, %fd27, %fd567, 0d0000000000000000;
	add.f64 	%fd171, %fd148, %fd571;
	fma.rn.f64 	%fd572, %fd570, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd172, %fd166, %fd572;
	@%p10 bra 	$L__BB5_109;

	ld.global.f64 	%fd573, [%rd45];
	add.f64 	%fd2069, %fd573, 0d0000000000000000;
	bra.uni 	$L__BB5_111;

$L__BB5_109:
	setp.eq.s64 	%p57, %rd50, 0;
	mov.f64 	%fd2069, 0d0000000000000000;
	@%p57 bra 	$L__BB5_111;

	ld.global.f64 	%fd575, [%rd46];
	add.f64 	%fd2069, %fd575, 0d0000000000000000;

$L__BB5_111:
	fma.rn.f64 	%fd576, %fd1, %fd2069, 0d0000000000000000;
	mul.f64 	%fd577, %fd27, %fd28;
	fma.rn.f64 	%fd578, %fd577, %fd2069, 0d0000000000000000;
	add.f64 	%fd176, %fd107, %fd578;
	fma.rn.f64 	%fd579, %fd28, %fd576, 0d0000000000000000;
	fma.rn.f64 	%fd580, %fd27, %fd576, 0d0000000000000000;
	add.f64 	%fd177, %fd154, %fd580;
	fma.rn.f64 	%fd581, %fd579, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd178, %fd172, %fd581;
	@%p10 bra 	$L__BB5_113;

	ld.global.f64 	%fd582, [%rd45];
	add.f64 	%fd2070, %fd582, 0d0000000000000000;
	bra.uni 	$L__BB5_115;

$L__BB5_113:
	setp.eq.s64 	%p59, %rd50, 0;
	mov.f64 	%fd2070, 0d0000000000000000;
	@%p59 bra 	$L__BB5_115;

	ld.global.f64 	%fd584, [%rd46];
	add.f64 	%fd2070, %fd584, 0d0000000000000000;

$L__BB5_115:
	fma.rn.f64 	%fd585, %fd12, %fd2070, 0d0000000000000000;
	mul.f64 	%fd586, %fd26, %fd24;
	fma.rn.f64 	%fd587, %fd586, %fd2070, 0d0000000000000000;
	add.f64 	%fd182, %fd113, %fd587;
	fma.rn.f64 	%fd588, %fd24, %fd585, 0d0000000000000000;
	fma.rn.f64 	%fd183, %fd26, %fd585, 0d0000000000000000;
	fma.rn.f64 	%fd589, %fd588, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd184, %fd124, %fd589;
	@%p10 bra 	$L__BB5_117;

	ld.global.f64 	%fd590, [%rd45];
	add.f64 	%fd2071, %fd590, 0d0000000000000000;
	bra.uni 	$L__BB5_119;

$L__BB5_117:
	setp.eq.s64 	%p61, %rd50, 0;
	mov.f64 	%fd2071, 0d0000000000000000;
	@%p61 bra 	$L__BB5_119;

	ld.global.f64 	%fd592, [%rd46];
	add.f64 	%fd2071, %fd592, 0d0000000000000000;

$L__BB5_119:
	fma.rn.f64 	%fd593, %fd9, %fd2071, 0d0000000000000000;
	mul.f64 	%fd594, %fd26, %fd23;
	fma.rn.f64 	%fd595, %fd594, %fd2071, 0d0000000000000000;
	add.f64 	%fd188, %fd132, %fd595;
	fma.rn.f64 	%fd596, %fd23, %fd593, 0d0000000000000000;
	fma.rn.f64 	%fd189, %fd26, %fd593, 0d0000000000000000;
	fma.rn.f64 	%fd597, %fd596, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd190, %fd184, %fd597;
	@%p10 bra 	$L__BB5_121;

	ld.global.f64 	%fd598, [%rd45];
	add.f64 	%fd2072, %fd598, 0d0000000000000000;
	bra.uni 	$L__BB5_123;

$L__BB5_121:
	setp.eq.s64 	%p63, %rd50, 0;
	mov.f64 	%fd2072, 0d0000000000000000;
	@%p63 bra 	$L__BB5_123;

	ld.global.f64 	%fd600, [%rd46];
	add.f64 	%fd2072, %fd600, 0d0000000000000000;

$L__BB5_123:
	fma.rn.f64 	%fd601, %fd6, %fd2072, 0d0000000000000000;
	mul.f64 	%fd602, %fd26, %fd22;
	fma.rn.f64 	%fd603, %fd602, %fd2072, 0d0000000000000000;
	add.f64 	%fd604, %fd190, %fd603;
	fma.rn.f64 	%fd605, %fd22, %fd601, 0d0000000000000000;
	fma.rn.f64 	%fd194, %fd26, %fd601, 0d0000000000000000;
	fma.rn.f64 	%fd606, %fd605, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd195, %fd604, %fd606;
	@%p10 bra 	$L__BB5_125;

	ld.global.f64 	%fd607, [%rd45];
	add.f64 	%fd2073, %fd607, 0d0000000000000000;
	bra.uni 	$L__BB5_127;

$L__BB5_125:
	setp.eq.s64 	%p65, %rd50, 0;
	mov.f64 	%fd2073, 0d0000000000000000;
	@%p65 bra 	$L__BB5_127;

	ld.global.f64 	%fd609, [%rd46];
	add.f64 	%fd2073, %fd609, 0d0000000000000000;

$L__BB5_127:
	fma.rn.f64 	%fd610, %fd3, %fd2073, 0d0000000000000000;
	mul.f64 	%fd611, %fd26, %fd21;
	fma.rn.f64 	%fd612, %fd611, %fd2073, 0d0000000000000000;
	add.f64 	%fd199, %fd130, %fd612;
	fma.rn.f64 	%fd613, %fd21, %fd610, 0d0000000000000000;
	fma.rn.f64 	%fd200, %fd26, %fd610, 0d0000000000000000;
	fma.rn.f64 	%fd614, %fd613, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd201, %fd195, %fd614;
	@%p10 bra 	$L__BB5_129;

	ld.global.f64 	%fd615, [%rd45];
	add.f64 	%fd2074, %fd615, 0d0000000000000000;
	bra.uni 	$L__BB5_131;

$L__BB5_129:
	setp.eq.s64 	%p67, %rd50, 0;
	mov.f64 	%fd2074, 0d0000000000000000;
	@%p67 bra 	$L__BB5_131;

	ld.global.f64 	%fd617, [%rd46];
	add.f64 	%fd2074, %fd617, 0d0000000000000000;

$L__BB5_131:
	fma.rn.f64 	%fd618, %fd11, %fd2074, 0d0000000000000000;
	mul.f64 	%fd619, %fd25, %fd24;
	fma.rn.f64 	%fd620, %fd619, %fd2074, 0d0000000000000000;
	add.f64 	%fd205, %fd136, %fd620;
	fma.rn.f64 	%fd621, %fd24, %fd618, 0d0000000000000000;
	fma.rn.f64 	%fd622, %fd25, %fd618, 0d0000000000000000;
	add.f64 	%fd206, %fd183, %fd622;
	fma.rn.f64 	%fd623, %fd621, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd207, %fd147, %fd623;
	@%p10 bra 	$L__BB5_133;

	ld.global.f64 	%fd624, [%rd45];
	add.f64 	%fd2075, %fd624, 0d0000000000000000;
	bra.uni 	$L__BB5_135;

$L__BB5_133:
	setp.eq.s64 	%p69, %rd50, 0;
	mov.f64 	%fd2075, 0d0000000000000000;
	@%p69 bra 	$L__BB5_135;

	ld.global.f64 	%fd626, [%rd46];
	add.f64 	%fd2075, %fd626, 0d0000000000000000;

$L__BB5_135:
	fma.rn.f64 	%fd627, %fd8, %fd2075, 0d0000000000000000;
	mul.f64 	%fd628, %fd25, %fd23;
	fma.rn.f64 	%fd629, %fd628, %fd2075, 0d0000000000000000;
	add.f64 	%fd211, %fd155, %fd629;
	fma.rn.f64 	%fd630, %fd23, %fd627, 0d0000000000000000;
	fma.rn.f64 	%fd631, %fd25, %fd627, 0d0000000000000000;
	add.f64 	%fd212, %fd189, %fd631;
	fma.rn.f64 	%fd632, %fd630, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd213, %fd207, %fd632;
	@%p10 bra 	$L__BB5_137;

	ld.global.f64 	%fd633, [%rd45];
	add.f64 	%fd2076, %fd633, 0d0000000000000000;
	bra.uni 	$L__BB5_139;

$L__BB5_137:
	setp.eq.s64 	%p71, %rd50, 0;
	mov.f64 	%fd2076, 0d0000000000000000;
	@%p71 bra 	$L__BB5_139;

	ld.global.f64 	%fd635, [%rd46];
	add.f64 	%fd2076, %fd635, 0d0000000000000000;

$L__BB5_139:
	fma.rn.f64 	%fd636, %fd5, %fd2076, 0d0000000000000000;
	mul.f64 	%fd637, %fd25, %fd22;
	fma.rn.f64 	%fd638, %fd637, %fd2076, 0d0000000000000000;
	add.f64 	%fd639, %fd213, %fd638;
	fma.rn.f64 	%fd640, %fd22, %fd636, 0d0000000000000000;
	fma.rn.f64 	%fd641, %fd25, %fd636, 0d0000000000000000;
	add.f64 	%fd217, %fd194, %fd641;
	fma.rn.f64 	%fd642, %fd640, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd218, %fd639, %fd642;
	@%p10 bra 	$L__BB5_141;

	ld.global.f64 	%fd643, [%rd45];
	add.f64 	%fd2077, %fd643, 0d0000000000000000;
	bra.uni 	$L__BB5_143;

$L__BB5_141:
	setp.eq.s64 	%p73, %rd50, 0;
	mov.f64 	%fd2077, 0d0000000000000000;
	@%p73 bra 	$L__BB5_143;

	ld.global.f64 	%fd645, [%rd46];
	add.f64 	%fd2077, %fd645, 0d0000000000000000;

$L__BB5_143:
	fma.rn.f64 	%fd646, %fd2, %fd2077, 0d0000000000000000;
	mul.f64 	%fd647, %fd25, %fd21;
	fma.rn.f64 	%fd648, %fd647, %fd2077, 0d0000000000000000;
	add.f64 	%fd222, %fd153, %fd648;
	fma.rn.f64 	%fd649, %fd21, %fd646, 0d0000000000000000;
	fma.rn.f64 	%fd650, %fd25, %fd646, 0d0000000000000000;
	add.f64 	%fd223, %fd200, %fd650;
	fma.rn.f64 	%fd651, %fd649, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd224, %fd218, %fd651;
	@%p10 bra 	$L__BB5_145;

	ld.global.f64 	%fd652, [%rd45];
	add.f64 	%fd2078, %fd652, 0d0000000000000000;
	bra.uni 	$L__BB5_147;

$L__BB5_145:
	setp.eq.s64 	%p75, %rd50, 0;
	mov.f64 	%fd2078, 0d0000000000000000;
	@%p75 bra 	$L__BB5_147;

	ld.global.f64 	%fd654, [%rd46];
	add.f64 	%fd2078, %fd654, 0d0000000000000000;

$L__BB5_147:
	fma.rn.f64 	%fd655, %fd10, %fd2078, 0d0000000000000000;
	mul.f64 	%fd656, %fd20, %fd24;
	fma.rn.f64 	%fd657, %fd656, %fd2078, 0d0000000000000000;
	add.f64 	%fd228, %fd159, %fd657;
	fma.rn.f64 	%fd658, %fd24, %fd655, 0d0000000000000000;
	fma.rn.f64 	%fd659, %fd20, %fd655, 0d0000000000000000;
	add.f64 	%fd229, %fd206, %fd659;
	fma.rn.f64 	%fd660, %fd658, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd230, %fd170, %fd660;
	@%p10 bra 	$L__BB5_149;

	ld.global.f64 	%fd661, [%rd45];
	add.f64 	%fd2079, %fd661, 0d0000000000000000;
	bra.uni 	$L__BB5_151;

$L__BB5_149:
	setp.eq.s64 	%p77, %rd50, 0;
	mov.f64 	%fd2079, 0d0000000000000000;
	@%p77 bra 	$L__BB5_151;

	ld.global.f64 	%fd663, [%rd46];
	add.f64 	%fd2079, %fd663, 0d0000000000000000;

$L__BB5_151:
	fma.rn.f64 	%fd664, %fd7, %fd2079, 0d0000000000000000;
	mul.f64 	%fd665, %fd20, %fd23;
	fma.rn.f64 	%fd666, %fd665, %fd2079, 0d0000000000000000;
	add.f64 	%fd234, %fd178, %fd666;
	fma.rn.f64 	%fd667, %fd23, %fd664, 0d0000000000000000;
	fma.rn.f64 	%fd668, %fd20, %fd664, 0d0000000000000000;
	add.f64 	%fd235, %fd212, %fd668;
	fma.rn.f64 	%fd669, %fd667, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd236, %fd230, %fd669;
	@%p10 bra 	$L__BB5_153;

	ld.global.f64 	%fd670, [%rd45];
	add.f64 	%fd2080, %fd670, 0d0000000000000000;
	bra.uni 	$L__BB5_155;

$L__BB5_153:
	setp.eq.s64 	%p79, %rd50, 0;
	mov.f64 	%fd2080, 0d0000000000000000;
	@%p79 bra 	$L__BB5_155;

	ld.global.f64 	%fd672, [%rd46];
	add.f64 	%fd2080, %fd672, 0d0000000000000000;

$L__BB5_155:
	fma.rn.f64 	%fd673, %fd4, %fd2080, 0d0000000000000000;
	mul.f64 	%fd674, %fd20, %fd22;
	fma.rn.f64 	%fd675, %fd674, %fd2080, 0d0000000000000000;
	add.f64 	%fd676, %fd236, %fd675;
	fma.rn.f64 	%fd677, %fd22, %fd673, 0d0000000000000000;
	fma.rn.f64 	%fd678, %fd20, %fd673, 0d0000000000000000;
	add.f64 	%fd240, %fd217, %fd678;
	fma.rn.f64 	%fd679, %fd677, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd241, %fd676, %fd679;
	@%p10 bra 	$L__BB5_157;

	ld.global.f64 	%fd680, [%rd45];
	add.f64 	%fd2081, %fd680, 0d0000000000000000;
	bra.uni 	$L__BB5_159;

$L__BB5_157:
	setp.eq.s64 	%p81, %rd50, 0;
	mov.f64 	%fd2081, 0d0000000000000000;
	@%p81 bra 	$L__BB5_159;

	ld.global.f64 	%fd682, [%rd46];
	add.f64 	%fd2081, %fd682, 0d0000000000000000;

$L__BB5_159:
	fma.rn.f64 	%fd683, %fd1, %fd2081, 0d0000000000000000;
	mul.f64 	%fd684, %fd20, %fd21;
	fma.rn.f64 	%fd685, %fd684, %fd2081, 0d0000000000000000;
	add.f64 	%fd245, %fd176, %fd685;
	fma.rn.f64 	%fd686, %fd21, %fd683, 0d0000000000000000;
	fma.rn.f64 	%fd687, %fd20, %fd683, 0d0000000000000000;
	add.f64 	%fd246, %fd223, %fd687;
	fma.rn.f64 	%fd688, %fd686, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd247, %fd241, %fd688;
	@%p10 bra 	$L__BB5_161;

	ld.global.f64 	%fd689, [%rd45];
	add.f64 	%fd2082, %fd689, 0d0000000000000000;
	bra.uni 	$L__BB5_163;

$L__BB5_161:
	setp.eq.s64 	%p83, %rd50, 0;
	mov.f64 	%fd2082, 0d0000000000000000;
	@%p83 bra 	$L__BB5_163;

	ld.global.f64 	%fd691, [%rd46];
	add.f64 	%fd2082, %fd691, 0d0000000000000000;

$L__BB5_163:
	fma.rn.f64 	%fd692, %fd12, %fd2082, 0d0000000000000000;
	mul.f64 	%fd693, %fd19, %fd17;
	fma.rn.f64 	%fd694, %fd693, %fd2082, 0d0000000000000000;
	add.f64 	%fd251, %fd182, %fd694;
	fma.rn.f64 	%fd695, %fd17, %fd692, 0d0000000000000000;
	fma.rn.f64 	%fd252, %fd19, %fd692, 0d0000000000000000;
	fma.rn.f64 	%fd696, %fd695, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd253, %fd199, %fd696;
	@%p10 bra 	$L__BB5_165;

	ld.global.f64 	%fd697, [%rd45];
	add.f64 	%fd2083, %fd697, 0d0000000000000000;
	bra.uni 	$L__BB5_167;

$L__BB5_165:
	setp.eq.s64 	%p85, %rd50, 0;
	mov.f64 	%fd2083, 0d0000000000000000;
	@%p85 bra 	$L__BB5_167;

	ld.global.f64 	%fd699, [%rd46];
	add.f64 	%fd2083, %fd699, 0d0000000000000000;

$L__BB5_167:
	fma.rn.f64 	%fd700, %fd9, %fd2083, 0d0000000000000000;
	mul.f64 	%fd701, %fd19, %fd16;
	fma.rn.f64 	%fd702, %fd701, %fd2083, 0d0000000000000000;
	add.f64 	%fd257, %fd188, %fd702;
	fma.rn.f64 	%fd703, %fd16, %fd700, 0d0000000000000000;
	fma.rn.f64 	%fd258, %fd19, %fd700, 0d0000000000000000;
	fma.rn.f64 	%fd704, %fd703, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd259, %fd253, %fd704;
	@%p10 bra 	$L__BB5_169;

	ld.global.f64 	%fd705, [%rd45];
	add.f64 	%fd2084, %fd705, 0d0000000000000000;
	bra.uni 	$L__BB5_171;

$L__BB5_169:
	setp.eq.s64 	%p87, %rd50, 0;
	mov.f64 	%fd2084, 0d0000000000000000;
	@%p87 bra 	$L__BB5_171;

	ld.global.f64 	%fd707, [%rd46];
	add.f64 	%fd2084, %fd707, 0d0000000000000000;

$L__BB5_171:
	fma.rn.f64 	%fd708, %fd6, %fd2084, 0d0000000000000000;
	mul.f64 	%fd709, %fd19, %fd15;
	fma.rn.f64 	%fd710, %fd709, %fd2084, 0d0000000000000000;
	add.f64 	%fd263, %fd201, %fd710;
	fma.rn.f64 	%fd711, %fd15, %fd708, 0d0000000000000000;
	fma.rn.f64 	%fd264, %fd19, %fd708, 0d0000000000000000;
	fma.rn.f64 	%fd712, %fd711, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd265, %fd259, %fd712;
	@%p10 bra 	$L__BB5_173;

	ld.global.f64 	%fd713, [%rd45];
	add.f64 	%fd2085, %fd713, 0d0000000000000000;
	bra.uni 	$L__BB5_175;

$L__BB5_173:
	setp.eq.s64 	%p89, %rd50, 0;
	mov.f64 	%fd2085, 0d0000000000000000;
	@%p89 bra 	$L__BB5_175;

	ld.global.f64 	%fd715, [%rd46];
	add.f64 	%fd2085, %fd715, 0d0000000000000000;

$L__BB5_175:
	fma.rn.f64 	%fd716, %fd3, %fd2085, 0d0000000000000000;
	mul.f64 	%fd717, %fd19, %fd14;
	fma.rn.f64 	%fd718, %fd717, %fd2085, 0d0000000000000000;
	add.f64 	%fd719, %fd265, %fd718;
	fma.rn.f64 	%fd720, %fd14, %fd716, 0d0000000000000000;
	fma.rn.f64 	%fd269, %fd19, %fd716, 0d0000000000000000;
	fma.rn.f64 	%fd721, %fd720, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd270, %fd719, %fd721;
	@%p10 bra 	$L__BB5_177;

	ld.global.f64 	%fd722, [%rd45];
	add.f64 	%fd2086, %fd722, 0d0000000000000000;
	bra.uni 	$L__BB5_179;

$L__BB5_177:
	setp.eq.s64 	%p91, %rd50, 0;
	mov.f64 	%fd2086, 0d0000000000000000;
	@%p91 bra 	$L__BB5_179;

	ld.global.f64 	%fd724, [%rd46];
	add.f64 	%fd2086, %fd724, 0d0000000000000000;

$L__BB5_179:
	fma.rn.f64 	%fd725, %fd11, %fd2086, 0d0000000000000000;
	mul.f64 	%fd726, %fd18, %fd17;
	fma.rn.f64 	%fd727, %fd726, %fd2086, 0d0000000000000000;
	add.f64 	%fd274, %fd205, %fd727;
	fma.rn.f64 	%fd728, %fd17, %fd725, 0d0000000000000000;
	fma.rn.f64 	%fd729, %fd18, %fd725, 0d0000000000000000;
	add.f64 	%fd275, %fd252, %fd729;
	fma.rn.f64 	%fd730, %fd728, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd276, %fd222, %fd730;
	@%p10 bra 	$L__BB5_181;

	ld.global.f64 	%fd731, [%rd45];
	add.f64 	%fd2087, %fd731, 0d0000000000000000;
	bra.uni 	$L__BB5_183;

$L__BB5_181:
	setp.eq.s64 	%p93, %rd50, 0;
	mov.f64 	%fd2087, 0d0000000000000000;
	@%p93 bra 	$L__BB5_183;

	ld.global.f64 	%fd733, [%rd46];
	add.f64 	%fd2087, %fd733, 0d0000000000000000;

$L__BB5_183:
	fma.rn.f64 	%fd734, %fd8, %fd2087, 0d0000000000000000;
	mul.f64 	%fd735, %fd18, %fd16;
	fma.rn.f64 	%fd736, %fd735, %fd2087, 0d0000000000000000;
	add.f64 	%fd280, %fd211, %fd736;
	fma.rn.f64 	%fd737, %fd16, %fd734, 0d0000000000000000;
	fma.rn.f64 	%fd738, %fd18, %fd734, 0d0000000000000000;
	add.f64 	%fd281, %fd258, %fd738;
	fma.rn.f64 	%fd739, %fd737, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd282, %fd276, %fd739;
	@%p10 bra 	$L__BB5_185;

	ld.global.f64 	%fd740, [%rd45];
	add.f64 	%fd2088, %fd740, 0d0000000000000000;
	bra.uni 	$L__BB5_187;

$L__BB5_185:
	setp.eq.s64 	%p95, %rd50, 0;
	mov.f64 	%fd2088, 0d0000000000000000;
	@%p95 bra 	$L__BB5_187;

	ld.global.f64 	%fd742, [%rd46];
	add.f64 	%fd2088, %fd742, 0d0000000000000000;

$L__BB5_187:
	fma.rn.f64 	%fd743, %fd5, %fd2088, 0d0000000000000000;
	mul.f64 	%fd744, %fd18, %fd15;
	fma.rn.f64 	%fd745, %fd744, %fd2088, 0d0000000000000000;
	add.f64 	%fd286, %fd224, %fd745;
	fma.rn.f64 	%fd746, %fd15, %fd743, 0d0000000000000000;
	fma.rn.f64 	%fd747, %fd18, %fd743, 0d0000000000000000;
	add.f64 	%fd287, %fd264, %fd747;
	fma.rn.f64 	%fd748, %fd746, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd288, %fd282, %fd748;
	@%p10 bra 	$L__BB5_189;

	ld.global.f64 	%fd749, [%rd45];
	add.f64 	%fd2089, %fd749, 0d0000000000000000;
	bra.uni 	$L__BB5_191;

$L__BB5_189:
	setp.eq.s64 	%p97, %rd50, 0;
	mov.f64 	%fd2089, 0d0000000000000000;
	@%p97 bra 	$L__BB5_191;

	ld.global.f64 	%fd751, [%rd46];
	add.f64 	%fd2089, %fd751, 0d0000000000000000;

$L__BB5_191:
	fma.rn.f64 	%fd752, %fd2, %fd2089, 0d0000000000000000;
	mul.f64 	%fd753, %fd18, %fd14;
	fma.rn.f64 	%fd754, %fd753, %fd2089, 0d0000000000000000;
	add.f64 	%fd755, %fd288, %fd754;
	fma.rn.f64 	%fd756, %fd14, %fd752, 0d0000000000000000;
	fma.rn.f64 	%fd757, %fd18, %fd752, 0d0000000000000000;
	add.f64 	%fd292, %fd269, %fd757;
	fma.rn.f64 	%fd758, %fd756, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd293, %fd755, %fd758;
	@%p10 bra 	$L__BB5_193;

	ld.global.f64 	%fd759, [%rd45];
	add.f64 	%fd2090, %fd759, 0d0000000000000000;
	bra.uni 	$L__BB5_195;

$L__BB5_193:
	setp.eq.s64 	%p99, %rd50, 0;
	mov.f64 	%fd2090, 0d0000000000000000;
	@%p99 bra 	$L__BB5_195;

	ld.global.f64 	%fd761, [%rd46];
	add.f64 	%fd2090, %fd761, 0d0000000000000000;

$L__BB5_195:
	fma.rn.f64 	%fd762, %fd10, %fd2090, 0d0000000000000000;
	mul.f64 	%fd763, %fd13, %fd17;
	fma.rn.f64 	%fd764, %fd763, %fd2090, 0d0000000000000000;
	add.f64 	%fd297, %fd228, %fd764;
	fma.rn.f64 	%fd765, %fd17, %fd762, 0d0000000000000000;
	fma.rn.f64 	%fd766, %fd13, %fd762, 0d0000000000000000;
	add.f64 	%fd298, %fd275, %fd766;
	fma.rn.f64 	%fd767, %fd765, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd299, %fd245, %fd767;
	@%p10 bra 	$L__BB5_197;

	ld.global.f64 	%fd768, [%rd45];
	add.f64 	%fd2091, %fd768, 0d0000000000000000;
	bra.uni 	$L__BB5_199;

$L__BB5_197:
	setp.eq.s64 	%p101, %rd50, 0;
	mov.f64 	%fd2091, 0d0000000000000000;
	@%p101 bra 	$L__BB5_199;

	ld.global.f64 	%fd770, [%rd46];
	add.f64 	%fd2091, %fd770, 0d0000000000000000;

$L__BB5_199:
	fma.rn.f64 	%fd771, %fd7, %fd2091, 0d0000000000000000;
	mul.f64 	%fd772, %fd13, %fd16;
	fma.rn.f64 	%fd773, %fd772, %fd2091, 0d0000000000000000;
	add.f64 	%fd303, %fd234, %fd773;
	fma.rn.f64 	%fd774, %fd16, %fd771, 0d0000000000000000;
	fma.rn.f64 	%fd775, %fd13, %fd771, 0d0000000000000000;
	add.f64 	%fd304, %fd281, %fd775;
	fma.rn.f64 	%fd776, %fd774, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd305, %fd299, %fd776;
	@%p10 bra 	$L__BB5_201;

	ld.global.f64 	%fd777, [%rd45];
	add.f64 	%fd2092, %fd777, 0d0000000000000000;
	bra.uni 	$L__BB5_203;

$L__BB5_201:
	setp.eq.s64 	%p103, %rd50, 0;
	mov.f64 	%fd2092, 0d0000000000000000;
	@%p103 bra 	$L__BB5_203;

	ld.global.f64 	%fd779, [%rd46];
	add.f64 	%fd2092, %fd779, 0d0000000000000000;

$L__BB5_203:
	fma.rn.f64 	%fd780, %fd4, %fd2092, 0d0000000000000000;
	mul.f64 	%fd781, %fd13, %fd15;
	fma.rn.f64 	%fd782, %fd781, %fd2092, 0d0000000000000000;
	add.f64 	%fd309, %fd247, %fd782;
	fma.rn.f64 	%fd783, %fd15, %fd780, 0d0000000000000000;
	fma.rn.f64 	%fd784, %fd13, %fd780, 0d0000000000000000;
	add.f64 	%fd310, %fd287, %fd784;
	fma.rn.f64 	%fd785, %fd783, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd311, %fd305, %fd785;
	@%p10 bra 	$L__BB5_205;

	ld.global.f64 	%fd786, [%rd45];
	add.f64 	%fd2093, %fd786, 0d0000000000000000;
	bra.uni 	$L__BB5_207;

$L__BB5_205:
	setp.eq.s64 	%p105, %rd50, 0;
	mov.f64 	%fd2093, 0d0000000000000000;
	@%p105 bra 	$L__BB5_207;

	ld.global.f64 	%fd788, [%rd46];
	add.f64 	%fd2093, %fd788, 0d0000000000000000;

$L__BB5_207:
	fma.rn.f64 	%fd789, %fd1, %fd2093, 0d0000000000000000;
	mul.f64 	%fd790, %fd13, %fd14;
	fma.rn.f64 	%fd791, %fd790, %fd2093, 0d0000000000000000;
	add.f64 	%fd792, %fd311, %fd791;
	fma.rn.f64 	%fd793, %fd14, %fd789, 0d0000000000000000;
	fma.rn.f64 	%fd794, %fd13, %fd789, 0d0000000000000000;
	add.f64 	%fd795, %fd292, %fd794;
	fma.rn.f64 	%fd796, %fd793, 0d3FE0000000000000, 0d0000000000000000;
	add.f64 	%fd315, %fd795, 0d0000000000000000;
	add.f64 	%fd316, %fd310, 0d0000000000000000;
	add.f64 	%fd317, %fd304, 0d0000000000000000;
	add.f64 	%fd318, %fd298, 0d0000000000000000;
	add.f64 	%fd319, %fd246, 0d0000000000000000;
	add.f64 	%fd320, %fd240, 0d0000000000000000;
	add.f64 	%fd321, %fd235, 0d0000000000000000;
	add.f64 	%fd322, %fd229, 0d0000000000000000;
	add.f64 	%fd323, %fd177, 0d0000000000000000;
	add.f64 	%fd324, %fd171, 0d0000000000000000;
	add.f64 	%fd325, %fd165, 0d0000000000000000;
	add.f64 	%fd326, %fd160, 0d0000000000000000;
	add.f64 	%fd327, %fd108, 0d0000000000000000;
	add.f64 	%fd328, %fd102, 0d0000000000000000;
	add.f64 	%fd329, %fd96, 0d0000000000000000;
	add.f64 	%fd330, %fd90, 0d0000000000000000;
	add.f64 	%fd331, %fd792, %fd796;
	setp.eq.s64 	%p106, %rd65, 0;
	@%p106 bra 	$L__BB5_209;

	mul.lo.s64 	%rd100, %rd41, %rd27;
	add.s64 	%rd84, %rd65, %rd100;
	// begin inline asm
	{ atom.add.f64 %fd797,[%rd84],%fd315; }

	// end inline asm
	add.s64 	%rd85, %rd84, 8;
	// begin inline asm
	{ atom.add.f64 %fd799,[%rd85],%fd316; }

	// end inline asm
	add.s64 	%rd86, %rd84, 16;
	// begin inline asm
	{ atom.add.f64 %fd801,[%rd86],%fd317; }

	// end inline asm
	add.s64 	%rd87, %rd84, 24;
	// begin inline asm
	{ atom.add.f64 %fd803,[%rd87],%fd318; }

	// end inline asm
	add.s64 	%rd88, %rd84, 32;
	// begin inline asm
	{ atom.add.f64 %fd805,[%rd88],%fd319; }

	// end inline asm
	add.s64 	%rd89, %rd84, 40;
	// begin inline asm
	{ atom.add.f64 %fd807,[%rd89],%fd320; }

	// end inline asm
	add.s64 	%rd90, %rd84, 48;
	// begin inline asm
	{ atom.add.f64 %fd809,[%rd90],%fd321; }

	// end inline asm
	add.s64 	%rd91, %rd84, 56;
	// begin inline asm
	{ atom.add.f64 %fd811,[%rd91],%fd322; }

	// end inline asm
	add.s64 	%rd92, %rd84, 64;
	// begin inline asm
	{ atom.add.f64 %fd813,[%rd92],%fd323; }

	// end inline asm
	add.s64 	%rd93, %rd84, 72;
	// begin inline asm
	{ atom.add.f64 %fd815,[%rd93],%fd324; }

	// end inline asm
	add.s64 	%rd94, %rd84, 80;
	// begin inline asm
	{ atom.add.f64 %fd817,[%rd94],%fd325; }

	// end inline asm
	add.s64 	%rd95, %rd84, 88;
	// begin inline asm
	{ atom.add.f64 %fd819,[%rd95],%fd326; }

	// end inline asm
	add.s64 	%rd96, %rd84, 96;
	// begin inline asm
	{ atom.add.f64 %fd821,[%rd96],%fd327; }

	// end inline asm
	add.s64 	%rd97, %rd84, 104;
	// begin inline asm
	{ atom.add.f64 %fd823,[%rd97],%fd328; }

	// end inline asm
	add.s64 	%rd98, %rd84, 112;
	// begin inline asm
	{ atom.add.f64 %fd825,[%rd98],%fd329; }

	// end inline asm
	add.s64 	%rd99, %rd84, 120;
	// begin inline asm
	{ atom.add.f64 %fd827,[%rd99],%fd330; }

	// end inline asm
	bra.uni 	$L__BB5_211;

$L__BB5_209:
	setp.eq.s64 	%p107, %rd56, 0;
	@%p107 bra 	$L__BB5_211;

	add.s64 	%rd101, %rd56, %rd44;
	// begin inline asm
	{ atom.add.f64 %fd829,[%rd101],%fd315; }

	// end inline asm
	add.s64 	%rd102, %rd101, 8;
	// begin inline asm
	{ atom.add.f64 %fd831,[%rd102],%fd316; }

	// end inline asm
	add.s64 	%rd103, %rd101, 16;
	// begin inline asm
	{ atom.add.f64 %fd833,[%rd103],%fd317; }

	// end inline asm
	add.s64 	%rd104, %rd101, 24;
	// begin inline asm
	{ atom.add.f64 %fd835,[%rd104],%fd318; }

	// end inline asm
	add.s64 	%rd105, %rd101, 32;
	// begin inline asm
	{ atom.add.f64 %fd837,[%rd105],%fd319; }

	// end inline asm
	add.s64 	%rd106, %rd101, 40;
	// begin inline asm
	{ atom.add.f64 %fd839,[%rd106],%fd320; }

	// end inline asm
	add.s64 	%rd107, %rd101, 48;
	// begin inline asm
	{ atom.add.f64 %fd841,[%rd107],%fd321; }

	// end inline asm
	add.s64 	%rd108, %rd101, 56;
	// begin inline asm
	{ atom.add.f64 %fd843,[%rd108],%fd322; }

	// end inline asm
	add.s64 	%rd109, %rd101, 64;
	// begin inline asm
	{ atom.add.f64 %fd845,[%rd109],%fd323; }

	// end inline asm
	add.s64 	%rd110, %rd101, 72;
	// begin inline asm
	{ atom.add.f64 %fd847,[%rd110],%fd324; }

	// end inline asm
	add.s64 	%rd111, %rd101, 80;
	// begin inline asm
	{ atom.add.f64 %fd849,[%rd111],%fd325; }

	// end inline asm
	add.s64 	%rd112, %rd101, 88;
	// begin inline asm
	{ atom.add.f64 %fd851,[%rd112],%fd326; }

	// end inline asm
	add.s64 	%rd113, %rd101, 96;
	// begin inline asm
	{ atom.add.f64 %fd853,[%rd113],%fd327; }

	// end inline asm
	add.s64 	%rd114, %rd101, 104;
	// begin inline asm
	{ atom.add.f64 %fd855,[%rd114],%fd328; }

	// end inline asm
	add.s64 	%rd115, %rd101, 112;
	// begin inline asm
	{ atom.add.f64 %fd857,[%rd115],%fd329; }

	// end inline asm
	add.s64 	%rd116, %rd101, 120;
	// begin inline asm
	{ atom.add.f64 %fd859,[%rd116],%fd330; }

	// end inline asm

$L__BB5_211:
	setp.eq.s64 	%p108, %rd63, 0;
	add.f64 	%fd332, %fd251, 0d0000000000000000;
	mov.f64 	%fd861, 0d0000000000000000;
	sub.f64 	%fd862, %fd861, %fd332;
	add.f64 	%fd333, %fd862, 0d0000000000000000;
	@%p108 bra 	$L__BB5_213;

	mul.lo.s64 	%rd129, %rd41, %rd28;
	add.s64 	%rd117, %rd63, %rd129;
	// begin inline asm
	{ atom.add.f64 %fd863,[%rd117],%fd861; }

	// end inline asm
	add.s64 	%rd118, %rd117, 8;
	// begin inline asm
	{ atom.add.f64 %fd865,[%rd118],%fd861; }

	// end inline asm
	add.s64 	%rd119, %rd117, 16;
	// begin inline asm
	{ atom.add.f64 %fd867,[%rd119],%fd861; }

	// end inline asm
	add.s64 	%rd120, %rd117, 24;
	// begin inline asm
	{ atom.add.f64 %fd869,[%rd120],%fd861; }

	// end inline asm
	add.s64 	%rd121, %rd117, 32;
	// begin inline asm
	{ atom.add.f64 %fd871,[%rd121],%fd861; }

	// end inline asm
	add.s64 	%rd122, %rd117, 40;
	// begin inline asm
	{ atom.add.f64 %fd873,[%rd122],%fd861; }

	// end inline asm
	add.s64 	%rd123, %rd117, 48;
	// begin inline asm
	{ atom.add.f64 %fd875,[%rd123],%fd861; }

	// end inline asm
	add.s64 	%rd124, %rd117, 56;
	// begin inline asm
	{ atom.add.f64 %fd877,[%rd124],%fd861; }

	// end inline asm
	add.s64 	%rd125, %rd117, 64;
	// begin inline asm
	{ atom.add.f64 %fd879,[%rd125],%fd861; }

	// end inline asm
	add.s64 	%rd126, %rd117, 72;
	// begin inline asm
	{ atom.add.f64 %fd881,[%rd126],%fd861; }

	// end inline asm
	add.s64 	%rd127, %rd117, 80;
	// begin inline asm
	{ atom.add.f64 %fd883,[%rd127],%fd861; }

	// end inline asm
	add.s64 	%rd128, %rd117, 88;
	// begin inline asm
	{ atom.add.f64 %fd885,[%rd128],%fd333; }

	// end inline asm
	bra.uni 	$L__BB5_215;

$L__BB5_213:
	setp.eq.s64 	%p109, %rd54, 0;
	@%p109 bra 	$L__BB5_215;

	add.s64 	%rd130, %rd54, %rd43;
	mov.f64 	%fd908, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd887,[%rd130],%fd908; }

	// end inline asm
	add.s64 	%rd131, %rd130, 8;
	// begin inline asm
	{ atom.add.f64 %fd889,[%rd131],%fd908; }

	// end inline asm
	add.s64 	%rd132, %rd130, 16;
	// begin inline asm
	{ atom.add.f64 %fd891,[%rd132],%fd908; }

	// end inline asm
	add.s64 	%rd133, %rd130, 24;
	// begin inline asm
	{ atom.add.f64 %fd893,[%rd133],%fd908; }

	// end inline asm
	add.s64 	%rd134, %rd130, 32;
	// begin inline asm
	{ atom.add.f64 %fd895,[%rd134],%fd908; }

	// end inline asm
	add.s64 	%rd135, %rd130, 40;
	// begin inline asm
	{ atom.add.f64 %fd897,[%rd135],%fd908; }

	// end inline asm
	add.s64 	%rd136, %rd130, 48;
	// begin inline asm
	{ atom.add.f64 %fd899,[%rd136],%fd908; }

	// end inline asm
	add.s64 	%rd137, %rd130, 56;
	// begin inline asm
	{ atom.add.f64 %fd901,[%rd137],%fd908; }

	// end inline asm
	add.s64 	%rd138, %rd130, 64;
	// begin inline asm
	{ atom.add.f64 %fd903,[%rd138],%fd908; }

	// end inline asm
	add.s64 	%rd139, %rd130, 72;
	// begin inline asm
	{ atom.add.f64 %fd905,[%rd139],%fd908; }

	// end inline asm
	add.s64 	%rd140, %rd130, 80;
	// begin inline asm
	{ atom.add.f64 %fd907,[%rd140],%fd908; }

	// end inline asm
	add.s64 	%rd141, %rd130, 88;
	// begin inline asm
	{ atom.add.f64 %fd909,[%rd141],%fd333; }

	// end inline asm

$L__BB5_215:
	setp.eq.s64 	%p110, %rd61, 0;
	@%p110 bra 	$L__BB5_217;

	mul.lo.s64 	%rd154, %rd41, %rd29;
	add.s64 	%rd142, %rd61, %rd154;
	mov.f64 	%fd932, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd911,[%rd142],%fd932; }

	// end inline asm
	add.s64 	%rd143, %rd142, 8;
	// begin inline asm
	{ atom.add.f64 %fd913,[%rd143],%fd932; }

	// end inline asm
	add.s64 	%rd144, %rd142, 16;
	// begin inline asm
	{ atom.add.f64 %fd915,[%rd144],%fd932; }

	// end inline asm
	add.s64 	%rd145, %rd142, 24;
	// begin inline asm
	{ atom.add.f64 %fd917,[%rd145],%fd932; }

	// end inline asm
	add.s64 	%rd146, %rd142, 32;
	// begin inline asm
	{ atom.add.f64 %fd919,[%rd146],%fd932; }

	// end inline asm
	add.s64 	%rd147, %rd142, 40;
	// begin inline asm
	{ atom.add.f64 %fd921,[%rd147],%fd932; }

	// end inline asm
	add.s64 	%rd148, %rd142, 48;
	// begin inline asm
	{ atom.add.f64 %fd923,[%rd148],%fd932; }

	// end inline asm
	add.s64 	%rd149, %rd142, 56;
	// begin inline asm
	{ atom.add.f64 %fd925,[%rd149],%fd932; }

	// end inline asm
	add.s64 	%rd150, %rd142, 64;
	// begin inline asm
	{ atom.add.f64 %fd927,[%rd150],%fd932; }

	// end inline asm
	add.s64 	%rd151, %rd142, 72;
	// begin inline asm
	{ atom.add.f64 %fd929,[%rd151],%fd932; }

	// end inline asm
	add.s64 	%rd152, %rd142, 80;
	// begin inline asm
	{ atom.add.f64 %fd931,[%rd152],%fd932; }

	// end inline asm
	add.s64 	%rd153, %rd142, 88;
	// begin inline asm
	{ atom.add.f64 %fd933,[%rd153],%fd332; }

	// end inline asm
	bra.uni 	$L__BB5_219;

$L__BB5_217:
	setp.eq.s64 	%p111, %rd52, 0;
	@%p111 bra 	$L__BB5_219;

	add.s64 	%rd155, %rd52, %rd42;
	mov.f64 	%fd956, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd935,[%rd155],%fd956; }

	// end inline asm
	add.s64 	%rd156, %rd155, 8;
	// begin inline asm
	{ atom.add.f64 %fd937,[%rd156],%fd956; }

	// end inline asm
	add.s64 	%rd157, %rd155, 16;
	// begin inline asm
	{ atom.add.f64 %fd939,[%rd157],%fd956; }

	// end inline asm
	add.s64 	%rd158, %rd155, 24;
	// begin inline asm
	{ atom.add.f64 %fd941,[%rd158],%fd956; }

	// end inline asm
	add.s64 	%rd159, %rd155, 32;
	// begin inline asm
	{ atom.add.f64 %fd943,[%rd159],%fd956; }

	// end inline asm
	add.s64 	%rd160, %rd155, 40;
	// begin inline asm
	{ atom.add.f64 %fd945,[%rd160],%fd956; }

	// end inline asm
	add.s64 	%rd161, %rd155, 48;
	// begin inline asm
	{ atom.add.f64 %fd947,[%rd161],%fd956; }

	// end inline asm
	add.s64 	%rd162, %rd155, 56;
	// begin inline asm
	{ atom.add.f64 %fd949,[%rd162],%fd956; }

	// end inline asm
	add.s64 	%rd163, %rd155, 64;
	// begin inline asm
	{ atom.add.f64 %fd951,[%rd163],%fd956; }

	// end inline asm
	add.s64 	%rd164, %rd155, 72;
	// begin inline asm
	{ atom.add.f64 %fd953,[%rd164],%fd956; }

	// end inline asm
	add.s64 	%rd165, %rd155, 80;
	// begin inline asm
	{ atom.add.f64 %fd955,[%rd165],%fd956; }

	// end inline asm
	add.s64 	%rd166, %rd155, 88;
	// begin inline asm
	{ atom.add.f64 %fd957,[%rd166],%fd332; }

	// end inline asm

$L__BB5_219:
	add.f64 	%fd334, %fd274, 0d0000000000000000;
	mov.f64 	%fd959, 0d0000000000000000;
	sub.f64 	%fd960, %fd959, %fd334;
	add.f64 	%fd335, %fd960, 0d0000000000000000;
	@%p108 bra 	$L__BB5_221;

	mul.lo.s64 	%rd179, %rd41, %rd28;
	add.s64 	%rd167, %rd63, %rd179;
	// begin inline asm
	{ atom.add.f64 %fd961,[%rd167],%fd959; }

	// end inline asm
	add.s64 	%rd168, %rd167, 8;
	// begin inline asm
	{ atom.add.f64 %fd963,[%rd168],%fd959; }

	// end inline asm
	add.s64 	%rd169, %rd167, 16;
	// begin inline asm
	{ atom.add.f64 %fd965,[%rd169],%fd959; }

	// end inline asm
	add.s64 	%rd170, %rd167, 24;
	// begin inline asm
	{ atom.add.f64 %fd967,[%rd170],%fd959; }

	// end inline asm
	add.s64 	%rd171, %rd167, 32;
	// begin inline asm
	{ atom.add.f64 %fd969,[%rd171],%fd959; }

	// end inline asm
	add.s64 	%rd172, %rd167, 40;
	// begin inline asm
	{ atom.add.f64 %fd971,[%rd172],%fd959; }

	// end inline asm
	add.s64 	%rd173, %rd167, 48;
	// begin inline asm
	{ atom.add.f64 %fd973,[%rd173],%fd959; }

	// end inline asm
	add.s64 	%rd174, %rd167, 56;
	// begin inline asm
	{ atom.add.f64 %fd975,[%rd174],%fd959; }

	// end inline asm
	add.s64 	%rd175, %rd167, 64;
	// begin inline asm
	{ atom.add.f64 %fd977,[%rd175],%fd959; }

	// end inline asm
	add.s64 	%rd176, %rd167, 72;
	// begin inline asm
	{ atom.add.f64 %fd979,[%rd176],%fd959; }

	// end inline asm
	add.s64 	%rd177, %rd167, 80;
	// begin inline asm
	{ atom.add.f64 %fd981,[%rd177],%fd335; }

	// end inline asm
	add.s64 	%rd178, %rd167, 88;
	// begin inline asm
	{ atom.add.f64 %fd983,[%rd178],%fd959; }

	// end inline asm
	bra.uni 	$L__BB5_223;

$L__BB5_221:
	setp.eq.s64 	%p113, %rd54, 0;
	@%p113 bra 	$L__BB5_223;

	add.s64 	%rd180, %rd54, %rd43;
	mov.f64 	%fd1008, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd985,[%rd180],%fd1008; }

	// end inline asm
	add.s64 	%rd181, %rd180, 8;
	// begin inline asm
	{ atom.add.f64 %fd987,[%rd181],%fd1008; }

	// end inline asm
	add.s64 	%rd182, %rd180, 16;
	// begin inline asm
	{ atom.add.f64 %fd989,[%rd182],%fd1008; }

	// end inline asm
	add.s64 	%rd183, %rd180, 24;
	// begin inline asm
	{ atom.add.f64 %fd991,[%rd183],%fd1008; }

	// end inline asm
	add.s64 	%rd184, %rd180, 32;
	// begin inline asm
	{ atom.add.f64 %fd993,[%rd184],%fd1008; }

	// end inline asm
	add.s64 	%rd185, %rd180, 40;
	// begin inline asm
	{ atom.add.f64 %fd995,[%rd185],%fd1008; }

	// end inline asm
	add.s64 	%rd186, %rd180, 48;
	// begin inline asm
	{ atom.add.f64 %fd997,[%rd186],%fd1008; }

	// end inline asm
	add.s64 	%rd187, %rd180, 56;
	// begin inline asm
	{ atom.add.f64 %fd999,[%rd187],%fd1008; }

	// end inline asm
	add.s64 	%rd188, %rd180, 64;
	// begin inline asm
	{ atom.add.f64 %fd1001,[%rd188],%fd1008; }

	// end inline asm
	add.s64 	%rd189, %rd180, 72;
	// begin inline asm
	{ atom.add.f64 %fd1003,[%rd189],%fd1008; }

	// end inline asm
	add.s64 	%rd190, %rd180, 80;
	// begin inline asm
	{ atom.add.f64 %fd1005,[%rd190],%fd335; }

	// end inline asm
	add.s64 	%rd191, %rd180, 88;
	// begin inline asm
	{ atom.add.f64 %fd1007,[%rd191],%fd1008; }

	// end inline asm

$L__BB5_223:
	@%p110 bra 	$L__BB5_225;

	mul.lo.s64 	%rd204, %rd41, %rd29;
	add.s64 	%rd192, %rd61, %rd204;
	mov.f64 	%fd1032, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1009,[%rd192],%fd1032; }

	// end inline asm
	add.s64 	%rd193, %rd192, 8;
	// begin inline asm
	{ atom.add.f64 %fd1011,[%rd193],%fd1032; }

	// end inline asm
	add.s64 	%rd194, %rd192, 16;
	// begin inline asm
	{ atom.add.f64 %fd1013,[%rd194],%fd1032; }

	// end inline asm
	add.s64 	%rd195, %rd192, 24;
	// begin inline asm
	{ atom.add.f64 %fd1015,[%rd195],%fd1032; }

	// end inline asm
	add.s64 	%rd196, %rd192, 32;
	// begin inline asm
	{ atom.add.f64 %fd1017,[%rd196],%fd1032; }

	// end inline asm
	add.s64 	%rd197, %rd192, 40;
	// begin inline asm
	{ atom.add.f64 %fd1019,[%rd197],%fd1032; }

	// end inline asm
	add.s64 	%rd198, %rd192, 48;
	// begin inline asm
	{ atom.add.f64 %fd1021,[%rd198],%fd1032; }

	// end inline asm
	add.s64 	%rd199, %rd192, 56;
	// begin inline asm
	{ atom.add.f64 %fd1023,[%rd199],%fd1032; }

	// end inline asm
	add.s64 	%rd200, %rd192, 64;
	// begin inline asm
	{ atom.add.f64 %fd1025,[%rd200],%fd1032; }

	// end inline asm
	add.s64 	%rd201, %rd192, 72;
	// begin inline asm
	{ atom.add.f64 %fd1027,[%rd201],%fd1032; }

	// end inline asm
	add.s64 	%rd202, %rd192, 80;
	// begin inline asm
	{ atom.add.f64 %fd1029,[%rd202],%fd334; }

	// end inline asm
	add.s64 	%rd203, %rd192, 88;
	// begin inline asm
	{ atom.add.f64 %fd1031,[%rd203],%fd1032; }

	// end inline asm
	bra.uni 	$L__BB5_227;

$L__BB5_225:
	setp.eq.s64 	%p115, %rd52, 0;
	@%p115 bra 	$L__BB5_227;

	add.s64 	%rd205, %rd52, %rd42;
	mov.f64 	%fd1056, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1033,[%rd205],%fd1056; }

	// end inline asm
	add.s64 	%rd206, %rd205, 8;
	// begin inline asm
	{ atom.add.f64 %fd1035,[%rd206],%fd1056; }

	// end inline asm
	add.s64 	%rd207, %rd205, 16;
	// begin inline asm
	{ atom.add.f64 %fd1037,[%rd207],%fd1056; }

	// end inline asm
	add.s64 	%rd208, %rd205, 24;
	// begin inline asm
	{ atom.add.f64 %fd1039,[%rd208],%fd1056; }

	// end inline asm
	add.s64 	%rd209, %rd205, 32;
	// begin inline asm
	{ atom.add.f64 %fd1041,[%rd209],%fd1056; }

	// end inline asm
	add.s64 	%rd210, %rd205, 40;
	// begin inline asm
	{ atom.add.f64 %fd1043,[%rd210],%fd1056; }

	// end inline asm
	add.s64 	%rd211, %rd205, 48;
	// begin inline asm
	{ atom.add.f64 %fd1045,[%rd211],%fd1056; }

	// end inline asm
	add.s64 	%rd212, %rd205, 56;
	// begin inline asm
	{ atom.add.f64 %fd1047,[%rd212],%fd1056; }

	// end inline asm
	add.s64 	%rd213, %rd205, 64;
	// begin inline asm
	{ atom.add.f64 %fd1049,[%rd213],%fd1056; }

	// end inline asm
	add.s64 	%rd214, %rd205, 72;
	// begin inline asm
	{ atom.add.f64 %fd1051,[%rd214],%fd1056; }

	// end inline asm
	add.s64 	%rd215, %rd205, 80;
	// begin inline asm
	{ atom.add.f64 %fd1053,[%rd215],%fd334; }

	// end inline asm
	add.s64 	%rd216, %rd205, 88;
	// begin inline asm
	{ atom.add.f64 %fd1055,[%rd216],%fd1056; }

	// end inline asm

$L__BB5_227:
	add.f64 	%fd336, %fd297, 0d0000000000000000;
	mov.f64 	%fd1057, 0d0000000000000000;
	sub.f64 	%fd1058, %fd1057, %fd336;
	add.f64 	%fd337, %fd1058, 0d0000000000000000;
	@%p108 bra 	$L__BB5_229;

	mul.lo.s64 	%rd229, %rd41, %rd28;
	add.s64 	%rd217, %rd63, %rd229;
	// begin inline asm
	{ atom.add.f64 %fd1059,[%rd217],%fd1057; }

	// end inline asm
	add.s64 	%rd218, %rd217, 8;
	// begin inline asm
	{ atom.add.f64 %fd1061,[%rd218],%fd1057; }

	// end inline asm
	add.s64 	%rd219, %rd217, 16;
	// begin inline asm
	{ atom.add.f64 %fd1063,[%rd219],%fd1057; }

	// end inline asm
	add.s64 	%rd220, %rd217, 24;
	// begin inline asm
	{ atom.add.f64 %fd1065,[%rd220],%fd1057; }

	// end inline asm
	add.s64 	%rd221, %rd217, 32;
	// begin inline asm
	{ atom.add.f64 %fd1067,[%rd221],%fd1057; }

	// end inline asm
	add.s64 	%rd222, %rd217, 40;
	// begin inline asm
	{ atom.add.f64 %fd1069,[%rd222],%fd1057; }

	// end inline asm
	add.s64 	%rd223, %rd217, 48;
	// begin inline asm
	{ atom.add.f64 %fd1071,[%rd223],%fd1057; }

	// end inline asm
	add.s64 	%rd224, %rd217, 56;
	// begin inline asm
	{ atom.add.f64 %fd1073,[%rd224],%fd1057; }

	// end inline asm
	add.s64 	%rd225, %rd217, 64;
	// begin inline asm
	{ atom.add.f64 %fd1075,[%rd225],%fd1057; }

	// end inline asm
	add.s64 	%rd226, %rd217, 72;
	// begin inline asm
	{ atom.add.f64 %fd1077,[%rd226],%fd337; }

	// end inline asm
	add.s64 	%rd227, %rd217, 80;
	// begin inline asm
	{ atom.add.f64 %fd1079,[%rd227],%fd1057; }

	// end inline asm
	add.s64 	%rd228, %rd217, 88;
	// begin inline asm
	{ atom.add.f64 %fd1081,[%rd228],%fd1057; }

	// end inline asm
	bra.uni 	$L__BB5_231;

$L__BB5_229:
	setp.eq.s64 	%p117, %rd54, 0;
	@%p117 bra 	$L__BB5_231;

	add.s64 	%rd230, %rd54, %rd43;
	mov.f64 	%fd1106, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1083,[%rd230],%fd1106; }

	// end inline asm
	add.s64 	%rd231, %rd230, 8;
	// begin inline asm
	{ atom.add.f64 %fd1085,[%rd231],%fd1106; }

	// end inline asm
	add.s64 	%rd232, %rd230, 16;
	// begin inline asm
	{ atom.add.f64 %fd1087,[%rd232],%fd1106; }

	// end inline asm
	add.s64 	%rd233, %rd230, 24;
	// begin inline asm
	{ atom.add.f64 %fd1089,[%rd233],%fd1106; }

	// end inline asm
	add.s64 	%rd234, %rd230, 32;
	// begin inline asm
	{ atom.add.f64 %fd1091,[%rd234],%fd1106; }

	// end inline asm
	add.s64 	%rd235, %rd230, 40;
	// begin inline asm
	{ atom.add.f64 %fd1093,[%rd235],%fd1106; }

	// end inline asm
	add.s64 	%rd236, %rd230, 48;
	// begin inline asm
	{ atom.add.f64 %fd1095,[%rd236],%fd1106; }

	// end inline asm
	add.s64 	%rd237, %rd230, 56;
	// begin inline asm
	{ atom.add.f64 %fd1097,[%rd237],%fd1106; }

	// end inline asm
	add.s64 	%rd238, %rd230, 64;
	// begin inline asm
	{ atom.add.f64 %fd1099,[%rd238],%fd1106; }

	// end inline asm
	add.s64 	%rd239, %rd230, 72;
	// begin inline asm
	{ atom.add.f64 %fd1101,[%rd239],%fd337; }

	// end inline asm
	add.s64 	%rd240, %rd230, 80;
	// begin inline asm
	{ atom.add.f64 %fd1103,[%rd240],%fd1106; }

	// end inline asm
	add.s64 	%rd241, %rd230, 88;
	// begin inline asm
	{ atom.add.f64 %fd1105,[%rd241],%fd1106; }

	// end inline asm

$L__BB5_231:
	@%p110 bra 	$L__BB5_233;

	mul.lo.s64 	%rd254, %rd41, %rd29;
	add.s64 	%rd242, %rd61, %rd254;
	mov.f64 	%fd1130, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1107,[%rd242],%fd1130; }

	// end inline asm
	add.s64 	%rd243, %rd242, 8;
	// begin inline asm
	{ atom.add.f64 %fd1109,[%rd243],%fd1130; }

	// end inline asm
	add.s64 	%rd244, %rd242, 16;
	// begin inline asm
	{ atom.add.f64 %fd1111,[%rd244],%fd1130; }

	// end inline asm
	add.s64 	%rd245, %rd242, 24;
	// begin inline asm
	{ atom.add.f64 %fd1113,[%rd245],%fd1130; }

	// end inline asm
	add.s64 	%rd246, %rd242, 32;
	// begin inline asm
	{ atom.add.f64 %fd1115,[%rd246],%fd1130; }

	// end inline asm
	add.s64 	%rd247, %rd242, 40;
	// begin inline asm
	{ atom.add.f64 %fd1117,[%rd247],%fd1130; }

	// end inline asm
	add.s64 	%rd248, %rd242, 48;
	// begin inline asm
	{ atom.add.f64 %fd1119,[%rd248],%fd1130; }

	// end inline asm
	add.s64 	%rd249, %rd242, 56;
	// begin inline asm
	{ atom.add.f64 %fd1121,[%rd249],%fd1130; }

	// end inline asm
	add.s64 	%rd250, %rd242, 64;
	// begin inline asm
	{ atom.add.f64 %fd1123,[%rd250],%fd1130; }

	// end inline asm
	add.s64 	%rd251, %rd242, 72;
	// begin inline asm
	{ atom.add.f64 %fd1125,[%rd251],%fd336; }

	// end inline asm
	add.s64 	%rd252, %rd242, 80;
	// begin inline asm
	{ atom.add.f64 %fd1127,[%rd252],%fd1130; }

	// end inline asm
	add.s64 	%rd253, %rd242, 88;
	// begin inline asm
	{ atom.add.f64 %fd1129,[%rd253],%fd1130; }

	// end inline asm
	bra.uni 	$L__BB5_235;

$L__BB5_233:
	setp.eq.s64 	%p119, %rd52, 0;
	@%p119 bra 	$L__BB5_235;

	add.s64 	%rd255, %rd52, %rd42;
	mov.f64 	%fd1154, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1131,[%rd255],%fd1154; }

	// end inline asm
	add.s64 	%rd256, %rd255, 8;
	// begin inline asm
	{ atom.add.f64 %fd1133,[%rd256],%fd1154; }

	// end inline asm
	add.s64 	%rd257, %rd255, 16;
	// begin inline asm
	{ atom.add.f64 %fd1135,[%rd257],%fd1154; }

	// end inline asm
	add.s64 	%rd258, %rd255, 24;
	// begin inline asm
	{ atom.add.f64 %fd1137,[%rd258],%fd1154; }

	// end inline asm
	add.s64 	%rd259, %rd255, 32;
	// begin inline asm
	{ atom.add.f64 %fd1139,[%rd259],%fd1154; }

	// end inline asm
	add.s64 	%rd260, %rd255, 40;
	// begin inline asm
	{ atom.add.f64 %fd1141,[%rd260],%fd1154; }

	// end inline asm
	add.s64 	%rd261, %rd255, 48;
	// begin inline asm
	{ atom.add.f64 %fd1143,[%rd261],%fd1154; }

	// end inline asm
	add.s64 	%rd262, %rd255, 56;
	// begin inline asm
	{ atom.add.f64 %fd1145,[%rd262],%fd1154; }

	// end inline asm
	add.s64 	%rd263, %rd255, 64;
	// begin inline asm
	{ atom.add.f64 %fd1147,[%rd263],%fd1154; }

	// end inline asm
	add.s64 	%rd264, %rd255, 72;
	// begin inline asm
	{ atom.add.f64 %fd1149,[%rd264],%fd336; }

	// end inline asm
	add.s64 	%rd265, %rd255, 80;
	// begin inline asm
	{ atom.add.f64 %fd1151,[%rd265],%fd1154; }

	// end inline asm
	add.s64 	%rd266, %rd255, 88;
	// begin inline asm
	{ atom.add.f64 %fd1153,[%rd266],%fd1154; }

	// end inline asm

$L__BB5_235:
	add.f64 	%fd338, %fd257, 0d0000000000000000;
	mov.f64 	%fd1155, 0d0000000000000000;
	sub.f64 	%fd1156, %fd1155, %fd338;
	add.f64 	%fd339, %fd1156, 0d0000000000000000;
	@%p108 bra 	$L__BB5_237;

	mul.lo.s64 	%rd279, %rd41, %rd28;
	add.s64 	%rd267, %rd63, %rd279;
	// begin inline asm
	{ atom.add.f64 %fd1157,[%rd267],%fd1155; }

	// end inline asm
	add.s64 	%rd268, %rd267, 8;
	// begin inline asm
	{ atom.add.f64 %fd1159,[%rd268],%fd1155; }

	// end inline asm
	add.s64 	%rd269, %rd267, 16;
	// begin inline asm
	{ atom.add.f64 %fd1161,[%rd269],%fd1155; }

	// end inline asm
	add.s64 	%rd270, %rd267, 24;
	// begin inline asm
	{ atom.add.f64 %fd1163,[%rd270],%fd1155; }

	// end inline asm
	add.s64 	%rd271, %rd267, 32;
	// begin inline asm
	{ atom.add.f64 %fd1165,[%rd271],%fd1155; }

	// end inline asm
	add.s64 	%rd272, %rd267, 40;
	// begin inline asm
	{ atom.add.f64 %fd1167,[%rd272],%fd1155; }

	// end inline asm
	add.s64 	%rd273, %rd267, 48;
	// begin inline asm
	{ atom.add.f64 %fd1169,[%rd273],%fd1155; }

	// end inline asm
	add.s64 	%rd274, %rd267, 56;
	// begin inline asm
	{ atom.add.f64 %fd1171,[%rd274],%fd1155; }

	// end inline asm
	add.s64 	%rd275, %rd267, 64;
	// begin inline asm
	{ atom.add.f64 %fd1173,[%rd275],%fd339; }

	// end inline asm
	add.s64 	%rd276, %rd267, 72;
	// begin inline asm
	{ atom.add.f64 %fd1175,[%rd276],%fd1155; }

	// end inline asm
	add.s64 	%rd277, %rd267, 80;
	// begin inline asm
	{ atom.add.f64 %fd1177,[%rd277],%fd1155; }

	// end inline asm
	add.s64 	%rd278, %rd267, 88;
	// begin inline asm
	{ atom.add.f64 %fd1179,[%rd278],%fd1155; }

	// end inline asm
	bra.uni 	$L__BB5_239;

$L__BB5_237:
	setp.eq.s64 	%p121, %rd54, 0;
	@%p121 bra 	$L__BB5_239;

	add.s64 	%rd280, %rd54, %rd43;
	mov.f64 	%fd1204, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1181,[%rd280],%fd1204; }

	// end inline asm
	add.s64 	%rd281, %rd280, 8;
	// begin inline asm
	{ atom.add.f64 %fd1183,[%rd281],%fd1204; }

	// end inline asm
	add.s64 	%rd282, %rd280, 16;
	// begin inline asm
	{ atom.add.f64 %fd1185,[%rd282],%fd1204; }

	// end inline asm
	add.s64 	%rd283, %rd280, 24;
	// begin inline asm
	{ atom.add.f64 %fd1187,[%rd283],%fd1204; }

	// end inline asm
	add.s64 	%rd284, %rd280, 32;
	// begin inline asm
	{ atom.add.f64 %fd1189,[%rd284],%fd1204; }

	// end inline asm
	add.s64 	%rd285, %rd280, 40;
	// begin inline asm
	{ atom.add.f64 %fd1191,[%rd285],%fd1204; }

	// end inline asm
	add.s64 	%rd286, %rd280, 48;
	// begin inline asm
	{ atom.add.f64 %fd1193,[%rd286],%fd1204; }

	// end inline asm
	add.s64 	%rd287, %rd280, 56;
	// begin inline asm
	{ atom.add.f64 %fd1195,[%rd287],%fd1204; }

	// end inline asm
	add.s64 	%rd288, %rd280, 64;
	// begin inline asm
	{ atom.add.f64 %fd1197,[%rd288],%fd339; }

	// end inline asm
	add.s64 	%rd289, %rd280, 72;
	// begin inline asm
	{ atom.add.f64 %fd1199,[%rd289],%fd1204; }

	// end inline asm
	add.s64 	%rd290, %rd280, 80;
	// begin inline asm
	{ atom.add.f64 %fd1201,[%rd290],%fd1204; }

	// end inline asm
	add.s64 	%rd291, %rd280, 88;
	// begin inline asm
	{ atom.add.f64 %fd1203,[%rd291],%fd1204; }

	// end inline asm

$L__BB5_239:
	@%p110 bra 	$L__BB5_241;

	mul.lo.s64 	%rd304, %rd41, %rd29;
	add.s64 	%rd292, %rd61, %rd304;
	mov.f64 	%fd1228, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1205,[%rd292],%fd1228; }

	// end inline asm
	add.s64 	%rd293, %rd292, 8;
	// begin inline asm
	{ atom.add.f64 %fd1207,[%rd293],%fd1228; }

	// end inline asm
	add.s64 	%rd294, %rd292, 16;
	// begin inline asm
	{ atom.add.f64 %fd1209,[%rd294],%fd1228; }

	// end inline asm
	add.s64 	%rd295, %rd292, 24;
	// begin inline asm
	{ atom.add.f64 %fd1211,[%rd295],%fd1228; }

	// end inline asm
	add.s64 	%rd296, %rd292, 32;
	// begin inline asm
	{ atom.add.f64 %fd1213,[%rd296],%fd1228; }

	// end inline asm
	add.s64 	%rd297, %rd292, 40;
	// begin inline asm
	{ atom.add.f64 %fd1215,[%rd297],%fd1228; }

	// end inline asm
	add.s64 	%rd298, %rd292, 48;
	// begin inline asm
	{ atom.add.f64 %fd1217,[%rd298],%fd1228; }

	// end inline asm
	add.s64 	%rd299, %rd292, 56;
	// begin inline asm
	{ atom.add.f64 %fd1219,[%rd299],%fd1228; }

	// end inline asm
	add.s64 	%rd300, %rd292, 64;
	// begin inline asm
	{ atom.add.f64 %fd1221,[%rd300],%fd338; }

	// end inline asm
	add.s64 	%rd301, %rd292, 72;
	// begin inline asm
	{ atom.add.f64 %fd1223,[%rd301],%fd1228; }

	// end inline asm
	add.s64 	%rd302, %rd292, 80;
	// begin inline asm
	{ atom.add.f64 %fd1225,[%rd302],%fd1228; }

	// end inline asm
	add.s64 	%rd303, %rd292, 88;
	// begin inline asm
	{ atom.add.f64 %fd1227,[%rd303],%fd1228; }

	// end inline asm
	bra.uni 	$L__BB5_243;

$L__BB5_241:
	setp.eq.s64 	%p123, %rd52, 0;
	@%p123 bra 	$L__BB5_243;

	add.s64 	%rd305, %rd52, %rd42;
	mov.f64 	%fd1252, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1229,[%rd305],%fd1252; }

	// end inline asm
	add.s64 	%rd306, %rd305, 8;
	// begin inline asm
	{ atom.add.f64 %fd1231,[%rd306],%fd1252; }

	// end inline asm
	add.s64 	%rd307, %rd305, 16;
	// begin inline asm
	{ atom.add.f64 %fd1233,[%rd307],%fd1252; }

	// end inline asm
	add.s64 	%rd308, %rd305, 24;
	// begin inline asm
	{ atom.add.f64 %fd1235,[%rd308],%fd1252; }

	// end inline asm
	add.s64 	%rd309, %rd305, 32;
	// begin inline asm
	{ atom.add.f64 %fd1237,[%rd309],%fd1252; }

	// end inline asm
	add.s64 	%rd310, %rd305, 40;
	// begin inline asm
	{ atom.add.f64 %fd1239,[%rd310],%fd1252; }

	// end inline asm
	add.s64 	%rd311, %rd305, 48;
	// begin inline asm
	{ atom.add.f64 %fd1241,[%rd311],%fd1252; }

	// end inline asm
	add.s64 	%rd312, %rd305, 56;
	// begin inline asm
	{ atom.add.f64 %fd1243,[%rd312],%fd1252; }

	// end inline asm
	add.s64 	%rd313, %rd305, 64;
	// begin inline asm
	{ atom.add.f64 %fd1245,[%rd313],%fd338; }

	// end inline asm
	add.s64 	%rd314, %rd305, 72;
	// begin inline asm
	{ atom.add.f64 %fd1247,[%rd314],%fd1252; }

	// end inline asm
	add.s64 	%rd315, %rd305, 80;
	// begin inline asm
	{ atom.add.f64 %fd1249,[%rd315],%fd1252; }

	// end inline asm
	add.s64 	%rd316, %rd305, 88;
	// begin inline asm
	{ atom.add.f64 %fd1251,[%rd316],%fd1252; }

	// end inline asm

$L__BB5_243:
	add.f64 	%fd340, %fd280, 0d0000000000000000;
	mov.f64 	%fd1253, 0d0000000000000000;
	sub.f64 	%fd1254, %fd1253, %fd340;
	add.f64 	%fd341, %fd1254, 0d0000000000000000;
	@%p108 bra 	$L__BB5_245;

	mul.lo.s64 	%rd329, %rd41, %rd28;
	add.s64 	%rd317, %rd63, %rd329;
	// begin inline asm
	{ atom.add.f64 %fd1255,[%rd317],%fd1253; }

	// end inline asm
	add.s64 	%rd318, %rd317, 8;
	// begin inline asm
	{ atom.add.f64 %fd1257,[%rd318],%fd1253; }

	// end inline asm
	add.s64 	%rd319, %rd317, 16;
	// begin inline asm
	{ atom.add.f64 %fd1259,[%rd319],%fd1253; }

	// end inline asm
	add.s64 	%rd320, %rd317, 24;
	// begin inline asm
	{ atom.add.f64 %fd1261,[%rd320],%fd1253; }

	// end inline asm
	add.s64 	%rd321, %rd317, 32;
	// begin inline asm
	{ atom.add.f64 %fd1263,[%rd321],%fd1253; }

	// end inline asm
	add.s64 	%rd322, %rd317, 40;
	// begin inline asm
	{ atom.add.f64 %fd1265,[%rd322],%fd1253; }

	// end inline asm
	add.s64 	%rd323, %rd317, 48;
	// begin inline asm
	{ atom.add.f64 %fd1267,[%rd323],%fd1253; }

	// end inline asm
	add.s64 	%rd324, %rd317, 56;
	// begin inline asm
	{ atom.add.f64 %fd1269,[%rd324],%fd341; }

	// end inline asm
	add.s64 	%rd325, %rd317, 64;
	// begin inline asm
	{ atom.add.f64 %fd1271,[%rd325],%fd1253; }

	// end inline asm
	add.s64 	%rd326, %rd317, 72;
	// begin inline asm
	{ atom.add.f64 %fd1273,[%rd326],%fd1253; }

	// end inline asm
	add.s64 	%rd327, %rd317, 80;
	// begin inline asm
	{ atom.add.f64 %fd1275,[%rd327],%fd1253; }

	// end inline asm
	add.s64 	%rd328, %rd317, 88;
	// begin inline asm
	{ atom.add.f64 %fd1277,[%rd328],%fd1253; }

	// end inline asm
	bra.uni 	$L__BB5_247;

$L__BB5_245:
	setp.eq.s64 	%p125, %rd54, 0;
	@%p125 bra 	$L__BB5_247;

	add.s64 	%rd330, %rd54, %rd43;
	mov.f64 	%fd1302, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1279,[%rd330],%fd1302; }

	// end inline asm
	add.s64 	%rd331, %rd330, 8;
	// begin inline asm
	{ atom.add.f64 %fd1281,[%rd331],%fd1302; }

	// end inline asm
	add.s64 	%rd332, %rd330, 16;
	// begin inline asm
	{ atom.add.f64 %fd1283,[%rd332],%fd1302; }

	// end inline asm
	add.s64 	%rd333, %rd330, 24;
	// begin inline asm
	{ atom.add.f64 %fd1285,[%rd333],%fd1302; }

	// end inline asm
	add.s64 	%rd334, %rd330, 32;
	// begin inline asm
	{ atom.add.f64 %fd1287,[%rd334],%fd1302; }

	// end inline asm
	add.s64 	%rd335, %rd330, 40;
	// begin inline asm
	{ atom.add.f64 %fd1289,[%rd335],%fd1302; }

	// end inline asm
	add.s64 	%rd336, %rd330, 48;
	// begin inline asm
	{ atom.add.f64 %fd1291,[%rd336],%fd1302; }

	// end inline asm
	add.s64 	%rd337, %rd330, 56;
	// begin inline asm
	{ atom.add.f64 %fd1293,[%rd337],%fd341; }

	// end inline asm
	add.s64 	%rd338, %rd330, 64;
	// begin inline asm
	{ atom.add.f64 %fd1295,[%rd338],%fd1302; }

	// end inline asm
	add.s64 	%rd339, %rd330, 72;
	// begin inline asm
	{ atom.add.f64 %fd1297,[%rd339],%fd1302; }

	// end inline asm
	add.s64 	%rd340, %rd330, 80;
	// begin inline asm
	{ atom.add.f64 %fd1299,[%rd340],%fd1302; }

	// end inline asm
	add.s64 	%rd341, %rd330, 88;
	// begin inline asm
	{ atom.add.f64 %fd1301,[%rd341],%fd1302; }

	// end inline asm

$L__BB5_247:
	@%p110 bra 	$L__BB5_249;

	mul.lo.s64 	%rd354, %rd41, %rd29;
	add.s64 	%rd342, %rd61, %rd354;
	mov.f64 	%fd1326, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1303,[%rd342],%fd1326; }

	// end inline asm
	add.s64 	%rd343, %rd342, 8;
	// begin inline asm
	{ atom.add.f64 %fd1305,[%rd343],%fd1326; }

	// end inline asm
	add.s64 	%rd344, %rd342, 16;
	// begin inline asm
	{ atom.add.f64 %fd1307,[%rd344],%fd1326; }

	// end inline asm
	add.s64 	%rd345, %rd342, 24;
	// begin inline asm
	{ atom.add.f64 %fd1309,[%rd345],%fd1326; }

	// end inline asm
	add.s64 	%rd346, %rd342, 32;
	// begin inline asm
	{ atom.add.f64 %fd1311,[%rd346],%fd1326; }

	// end inline asm
	add.s64 	%rd347, %rd342, 40;
	// begin inline asm
	{ atom.add.f64 %fd1313,[%rd347],%fd1326; }

	// end inline asm
	add.s64 	%rd348, %rd342, 48;
	// begin inline asm
	{ atom.add.f64 %fd1315,[%rd348],%fd1326; }

	// end inline asm
	add.s64 	%rd349, %rd342, 56;
	// begin inline asm
	{ atom.add.f64 %fd1317,[%rd349],%fd340; }

	// end inline asm
	add.s64 	%rd350, %rd342, 64;
	// begin inline asm
	{ atom.add.f64 %fd1319,[%rd350],%fd1326; }

	// end inline asm
	add.s64 	%rd351, %rd342, 72;
	// begin inline asm
	{ atom.add.f64 %fd1321,[%rd351],%fd1326; }

	// end inline asm
	add.s64 	%rd352, %rd342, 80;
	// begin inline asm
	{ atom.add.f64 %fd1323,[%rd352],%fd1326; }

	// end inline asm
	add.s64 	%rd353, %rd342, 88;
	// begin inline asm
	{ atom.add.f64 %fd1325,[%rd353],%fd1326; }

	// end inline asm
	bra.uni 	$L__BB5_251;

$L__BB5_249:
	setp.eq.s64 	%p127, %rd52, 0;
	@%p127 bra 	$L__BB5_251;

	add.s64 	%rd355, %rd52, %rd42;
	mov.f64 	%fd1350, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1327,[%rd355],%fd1350; }

	// end inline asm
	add.s64 	%rd356, %rd355, 8;
	// begin inline asm
	{ atom.add.f64 %fd1329,[%rd356],%fd1350; }

	// end inline asm
	add.s64 	%rd357, %rd355, 16;
	// begin inline asm
	{ atom.add.f64 %fd1331,[%rd357],%fd1350; }

	// end inline asm
	add.s64 	%rd358, %rd355, 24;
	// begin inline asm
	{ atom.add.f64 %fd1333,[%rd358],%fd1350; }

	// end inline asm
	add.s64 	%rd359, %rd355, 32;
	// begin inline asm
	{ atom.add.f64 %fd1335,[%rd359],%fd1350; }

	// end inline asm
	add.s64 	%rd360, %rd355, 40;
	// begin inline asm
	{ atom.add.f64 %fd1337,[%rd360],%fd1350; }

	// end inline asm
	add.s64 	%rd361, %rd355, 48;
	// begin inline asm
	{ atom.add.f64 %fd1339,[%rd361],%fd1350; }

	// end inline asm
	add.s64 	%rd362, %rd355, 56;
	// begin inline asm
	{ atom.add.f64 %fd1341,[%rd362],%fd340; }

	// end inline asm
	add.s64 	%rd363, %rd355, 64;
	// begin inline asm
	{ atom.add.f64 %fd1343,[%rd363],%fd1350; }

	// end inline asm
	add.s64 	%rd364, %rd355, 72;
	// begin inline asm
	{ atom.add.f64 %fd1345,[%rd364],%fd1350; }

	// end inline asm
	add.s64 	%rd365, %rd355, 80;
	// begin inline asm
	{ atom.add.f64 %fd1347,[%rd365],%fd1350; }

	// end inline asm
	add.s64 	%rd366, %rd355, 88;
	// begin inline asm
	{ atom.add.f64 %fd1349,[%rd366],%fd1350; }

	// end inline asm

$L__BB5_251:
	add.f64 	%fd342, %fd303, 0d0000000000000000;
	mov.f64 	%fd1351, 0d0000000000000000;
	sub.f64 	%fd1352, %fd1351, %fd342;
	add.f64 	%fd343, %fd1352, 0d0000000000000000;
	@%p108 bra 	$L__BB5_253;

	mul.lo.s64 	%rd379, %rd41, %rd28;
	add.s64 	%rd367, %rd63, %rd379;
	// begin inline asm
	{ atom.add.f64 %fd1353,[%rd367],%fd1351; }

	// end inline asm
	add.s64 	%rd368, %rd367, 8;
	// begin inline asm
	{ atom.add.f64 %fd1355,[%rd368],%fd1351; }

	// end inline asm
	add.s64 	%rd369, %rd367, 16;
	// begin inline asm
	{ atom.add.f64 %fd1357,[%rd369],%fd1351; }

	// end inline asm
	add.s64 	%rd370, %rd367, 24;
	// begin inline asm
	{ atom.add.f64 %fd1359,[%rd370],%fd1351; }

	// end inline asm
	add.s64 	%rd371, %rd367, 32;
	// begin inline asm
	{ atom.add.f64 %fd1361,[%rd371],%fd1351; }

	// end inline asm
	add.s64 	%rd372, %rd367, 40;
	// begin inline asm
	{ atom.add.f64 %fd1363,[%rd372],%fd1351; }

	// end inline asm
	add.s64 	%rd373, %rd367, 48;
	// begin inline asm
	{ atom.add.f64 %fd1365,[%rd373],%fd343; }

	// end inline asm
	add.s64 	%rd374, %rd367, 56;
	// begin inline asm
	{ atom.add.f64 %fd1367,[%rd374],%fd1351; }

	// end inline asm
	add.s64 	%rd375, %rd367, 64;
	// begin inline asm
	{ atom.add.f64 %fd1369,[%rd375],%fd1351; }

	// end inline asm
	add.s64 	%rd376, %rd367, 72;
	// begin inline asm
	{ atom.add.f64 %fd1371,[%rd376],%fd1351; }

	// end inline asm
	add.s64 	%rd377, %rd367, 80;
	// begin inline asm
	{ atom.add.f64 %fd1373,[%rd377],%fd1351; }

	// end inline asm
	add.s64 	%rd378, %rd367, 88;
	// begin inline asm
	{ atom.add.f64 %fd1375,[%rd378],%fd1351; }

	// end inline asm
	bra.uni 	$L__BB5_255;

$L__BB5_253:
	setp.eq.s64 	%p129, %rd54, 0;
	@%p129 bra 	$L__BB5_255;

	add.s64 	%rd380, %rd54, %rd43;
	mov.f64 	%fd1400, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1377,[%rd380],%fd1400; }

	// end inline asm
	add.s64 	%rd381, %rd380, 8;
	// begin inline asm
	{ atom.add.f64 %fd1379,[%rd381],%fd1400; }

	// end inline asm
	add.s64 	%rd382, %rd380, 16;
	// begin inline asm
	{ atom.add.f64 %fd1381,[%rd382],%fd1400; }

	// end inline asm
	add.s64 	%rd383, %rd380, 24;
	// begin inline asm
	{ atom.add.f64 %fd1383,[%rd383],%fd1400; }

	// end inline asm
	add.s64 	%rd384, %rd380, 32;
	// begin inline asm
	{ atom.add.f64 %fd1385,[%rd384],%fd1400; }

	// end inline asm
	add.s64 	%rd385, %rd380, 40;
	// begin inline asm
	{ atom.add.f64 %fd1387,[%rd385],%fd1400; }

	// end inline asm
	add.s64 	%rd386, %rd380, 48;
	// begin inline asm
	{ atom.add.f64 %fd1389,[%rd386],%fd343; }

	// end inline asm
	add.s64 	%rd387, %rd380, 56;
	// begin inline asm
	{ atom.add.f64 %fd1391,[%rd387],%fd1400; }

	// end inline asm
	add.s64 	%rd388, %rd380, 64;
	// begin inline asm
	{ atom.add.f64 %fd1393,[%rd388],%fd1400; }

	// end inline asm
	add.s64 	%rd389, %rd380, 72;
	// begin inline asm
	{ atom.add.f64 %fd1395,[%rd389],%fd1400; }

	// end inline asm
	add.s64 	%rd390, %rd380, 80;
	// begin inline asm
	{ atom.add.f64 %fd1397,[%rd390],%fd1400; }

	// end inline asm
	add.s64 	%rd391, %rd380, 88;
	// begin inline asm
	{ atom.add.f64 %fd1399,[%rd391],%fd1400; }

	// end inline asm

$L__BB5_255:
	@%p110 bra 	$L__BB5_257;

	mul.lo.s64 	%rd404, %rd41, %rd29;
	add.s64 	%rd392, %rd61, %rd404;
	mov.f64 	%fd1424, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1401,[%rd392],%fd1424; }

	// end inline asm
	add.s64 	%rd393, %rd392, 8;
	// begin inline asm
	{ atom.add.f64 %fd1403,[%rd393],%fd1424; }

	// end inline asm
	add.s64 	%rd394, %rd392, 16;
	// begin inline asm
	{ atom.add.f64 %fd1405,[%rd394],%fd1424; }

	// end inline asm
	add.s64 	%rd395, %rd392, 24;
	// begin inline asm
	{ atom.add.f64 %fd1407,[%rd395],%fd1424; }

	// end inline asm
	add.s64 	%rd396, %rd392, 32;
	// begin inline asm
	{ atom.add.f64 %fd1409,[%rd396],%fd1424; }

	// end inline asm
	add.s64 	%rd397, %rd392, 40;
	// begin inline asm
	{ atom.add.f64 %fd1411,[%rd397],%fd1424; }

	// end inline asm
	add.s64 	%rd398, %rd392, 48;
	// begin inline asm
	{ atom.add.f64 %fd1413,[%rd398],%fd342; }

	// end inline asm
	add.s64 	%rd399, %rd392, 56;
	// begin inline asm
	{ atom.add.f64 %fd1415,[%rd399],%fd1424; }

	// end inline asm
	add.s64 	%rd400, %rd392, 64;
	// begin inline asm
	{ atom.add.f64 %fd1417,[%rd400],%fd1424; }

	// end inline asm
	add.s64 	%rd401, %rd392, 72;
	// begin inline asm
	{ atom.add.f64 %fd1419,[%rd401],%fd1424; }

	// end inline asm
	add.s64 	%rd402, %rd392, 80;
	// begin inline asm
	{ atom.add.f64 %fd1421,[%rd402],%fd1424; }

	// end inline asm
	add.s64 	%rd403, %rd392, 88;
	// begin inline asm
	{ atom.add.f64 %fd1423,[%rd403],%fd1424; }

	// end inline asm
	bra.uni 	$L__BB5_259;

$L__BB5_257:
	setp.eq.s64 	%p131, %rd52, 0;
	@%p131 bra 	$L__BB5_259;

	add.s64 	%rd405, %rd52, %rd42;
	mov.f64 	%fd1448, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1425,[%rd405],%fd1448; }

	// end inline asm
	add.s64 	%rd406, %rd405, 8;
	// begin inline asm
	{ atom.add.f64 %fd1427,[%rd406],%fd1448; }

	// end inline asm
	add.s64 	%rd407, %rd405, 16;
	// begin inline asm
	{ atom.add.f64 %fd1429,[%rd407],%fd1448; }

	// end inline asm
	add.s64 	%rd408, %rd405, 24;
	// begin inline asm
	{ atom.add.f64 %fd1431,[%rd408],%fd1448; }

	// end inline asm
	add.s64 	%rd409, %rd405, 32;
	// begin inline asm
	{ atom.add.f64 %fd1433,[%rd409],%fd1448; }

	// end inline asm
	add.s64 	%rd410, %rd405, 40;
	// begin inline asm
	{ atom.add.f64 %fd1435,[%rd410],%fd1448; }

	// end inline asm
	add.s64 	%rd411, %rd405, 48;
	// begin inline asm
	{ atom.add.f64 %fd1437,[%rd411],%fd342; }

	// end inline asm
	add.s64 	%rd412, %rd405, 56;
	// begin inline asm
	{ atom.add.f64 %fd1439,[%rd412],%fd1448; }

	// end inline asm
	add.s64 	%rd413, %rd405, 64;
	// begin inline asm
	{ atom.add.f64 %fd1441,[%rd413],%fd1448; }

	// end inline asm
	add.s64 	%rd414, %rd405, 72;
	// begin inline asm
	{ atom.add.f64 %fd1443,[%rd414],%fd1448; }

	// end inline asm
	add.s64 	%rd415, %rd405, 80;
	// begin inline asm
	{ atom.add.f64 %fd1445,[%rd415],%fd1448; }

	// end inline asm
	add.s64 	%rd416, %rd405, 88;
	// begin inline asm
	{ atom.add.f64 %fd1447,[%rd416],%fd1448; }

	// end inline asm

$L__BB5_259:
	add.f64 	%fd344, %fd263, 0d0000000000000000;
	mov.f64 	%fd1449, 0d0000000000000000;
	sub.f64 	%fd1450, %fd1449, %fd344;
	add.f64 	%fd345, %fd1450, 0d0000000000000000;
	@%p108 bra 	$L__BB5_261;

	mul.lo.s64 	%rd429, %rd41, %rd28;
	add.s64 	%rd417, %rd63, %rd429;
	// begin inline asm
	{ atom.add.f64 %fd1451,[%rd417],%fd1449; }

	// end inline asm
	add.s64 	%rd418, %rd417, 8;
	// begin inline asm
	{ atom.add.f64 %fd1453,[%rd418],%fd1449; }

	// end inline asm
	add.s64 	%rd419, %rd417, 16;
	// begin inline asm
	{ atom.add.f64 %fd1455,[%rd419],%fd1449; }

	// end inline asm
	add.s64 	%rd420, %rd417, 24;
	// begin inline asm
	{ atom.add.f64 %fd1457,[%rd420],%fd1449; }

	// end inline asm
	add.s64 	%rd421, %rd417, 32;
	// begin inline asm
	{ atom.add.f64 %fd1459,[%rd421],%fd1449; }

	// end inline asm
	add.s64 	%rd422, %rd417, 40;
	// begin inline asm
	{ atom.add.f64 %fd1461,[%rd422],%fd345; }

	// end inline asm
	add.s64 	%rd423, %rd417, 48;
	// begin inline asm
	{ atom.add.f64 %fd1463,[%rd423],%fd1449; }

	// end inline asm
	add.s64 	%rd424, %rd417, 56;
	// begin inline asm
	{ atom.add.f64 %fd1465,[%rd424],%fd1449; }

	// end inline asm
	add.s64 	%rd425, %rd417, 64;
	// begin inline asm
	{ atom.add.f64 %fd1467,[%rd425],%fd1449; }

	// end inline asm
	add.s64 	%rd426, %rd417, 72;
	// begin inline asm
	{ atom.add.f64 %fd1469,[%rd426],%fd1449; }

	// end inline asm
	add.s64 	%rd427, %rd417, 80;
	// begin inline asm
	{ atom.add.f64 %fd1471,[%rd427],%fd1449; }

	// end inline asm
	add.s64 	%rd428, %rd417, 88;
	// begin inline asm
	{ atom.add.f64 %fd1473,[%rd428],%fd1449; }

	// end inline asm
	bra.uni 	$L__BB5_263;

$L__BB5_261:
	setp.eq.s64 	%p133, %rd54, 0;
	@%p133 bra 	$L__BB5_263;

	add.s64 	%rd430, %rd54, %rd43;
	mov.f64 	%fd1498, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1475,[%rd430],%fd1498; }

	// end inline asm
	add.s64 	%rd431, %rd430, 8;
	// begin inline asm
	{ atom.add.f64 %fd1477,[%rd431],%fd1498; }

	// end inline asm
	add.s64 	%rd432, %rd430, 16;
	// begin inline asm
	{ atom.add.f64 %fd1479,[%rd432],%fd1498; }

	// end inline asm
	add.s64 	%rd433, %rd430, 24;
	// begin inline asm
	{ atom.add.f64 %fd1481,[%rd433],%fd1498; }

	// end inline asm
	add.s64 	%rd434, %rd430, 32;
	// begin inline asm
	{ atom.add.f64 %fd1483,[%rd434],%fd1498; }

	// end inline asm
	add.s64 	%rd435, %rd430, 40;
	// begin inline asm
	{ atom.add.f64 %fd1485,[%rd435],%fd345; }

	// end inline asm
	add.s64 	%rd436, %rd430, 48;
	// begin inline asm
	{ atom.add.f64 %fd1487,[%rd436],%fd1498; }

	// end inline asm
	add.s64 	%rd437, %rd430, 56;
	// begin inline asm
	{ atom.add.f64 %fd1489,[%rd437],%fd1498; }

	// end inline asm
	add.s64 	%rd438, %rd430, 64;
	// begin inline asm
	{ atom.add.f64 %fd1491,[%rd438],%fd1498; }

	// end inline asm
	add.s64 	%rd439, %rd430, 72;
	// begin inline asm
	{ atom.add.f64 %fd1493,[%rd439],%fd1498; }

	// end inline asm
	add.s64 	%rd440, %rd430, 80;
	// begin inline asm
	{ atom.add.f64 %fd1495,[%rd440],%fd1498; }

	// end inline asm
	add.s64 	%rd441, %rd430, 88;
	// begin inline asm
	{ atom.add.f64 %fd1497,[%rd441],%fd1498; }

	// end inline asm

$L__BB5_263:
	@%p110 bra 	$L__BB5_265;

	mul.lo.s64 	%rd454, %rd41, %rd29;
	add.s64 	%rd442, %rd61, %rd454;
	mov.f64 	%fd1522, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1499,[%rd442],%fd1522; }

	// end inline asm
	add.s64 	%rd443, %rd442, 8;
	// begin inline asm
	{ atom.add.f64 %fd1501,[%rd443],%fd1522; }

	// end inline asm
	add.s64 	%rd444, %rd442, 16;
	// begin inline asm
	{ atom.add.f64 %fd1503,[%rd444],%fd1522; }

	// end inline asm
	add.s64 	%rd445, %rd442, 24;
	// begin inline asm
	{ atom.add.f64 %fd1505,[%rd445],%fd1522; }

	// end inline asm
	add.s64 	%rd446, %rd442, 32;
	// begin inline asm
	{ atom.add.f64 %fd1507,[%rd446],%fd1522; }

	// end inline asm
	add.s64 	%rd447, %rd442, 40;
	// begin inline asm
	{ atom.add.f64 %fd1509,[%rd447],%fd344; }

	// end inline asm
	add.s64 	%rd448, %rd442, 48;
	// begin inline asm
	{ atom.add.f64 %fd1511,[%rd448],%fd1522; }

	// end inline asm
	add.s64 	%rd449, %rd442, 56;
	// begin inline asm
	{ atom.add.f64 %fd1513,[%rd449],%fd1522; }

	// end inline asm
	add.s64 	%rd450, %rd442, 64;
	// begin inline asm
	{ atom.add.f64 %fd1515,[%rd450],%fd1522; }

	// end inline asm
	add.s64 	%rd451, %rd442, 72;
	// begin inline asm
	{ atom.add.f64 %fd1517,[%rd451],%fd1522; }

	// end inline asm
	add.s64 	%rd452, %rd442, 80;
	// begin inline asm
	{ atom.add.f64 %fd1519,[%rd452],%fd1522; }

	// end inline asm
	add.s64 	%rd453, %rd442, 88;
	// begin inline asm
	{ atom.add.f64 %fd1521,[%rd453],%fd1522; }

	// end inline asm
	bra.uni 	$L__BB5_267;

$L__BB5_265:
	setp.eq.s64 	%p135, %rd52, 0;
	@%p135 bra 	$L__BB5_267;

	add.s64 	%rd455, %rd52, %rd42;
	mov.f64 	%fd1546, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1523,[%rd455],%fd1546; }

	// end inline asm
	add.s64 	%rd456, %rd455, 8;
	// begin inline asm
	{ atom.add.f64 %fd1525,[%rd456],%fd1546; }

	// end inline asm
	add.s64 	%rd457, %rd455, 16;
	// begin inline asm
	{ atom.add.f64 %fd1527,[%rd457],%fd1546; }

	// end inline asm
	add.s64 	%rd458, %rd455, 24;
	// begin inline asm
	{ atom.add.f64 %fd1529,[%rd458],%fd1546; }

	// end inline asm
	add.s64 	%rd459, %rd455, 32;
	// begin inline asm
	{ atom.add.f64 %fd1531,[%rd459],%fd1546; }

	// end inline asm
	add.s64 	%rd460, %rd455, 40;
	// begin inline asm
	{ atom.add.f64 %fd1533,[%rd460],%fd344; }

	// end inline asm
	add.s64 	%rd461, %rd455, 48;
	// begin inline asm
	{ atom.add.f64 %fd1535,[%rd461],%fd1546; }

	// end inline asm
	add.s64 	%rd462, %rd455, 56;
	// begin inline asm
	{ atom.add.f64 %fd1537,[%rd462],%fd1546; }

	// end inline asm
	add.s64 	%rd463, %rd455, 64;
	// begin inline asm
	{ atom.add.f64 %fd1539,[%rd463],%fd1546; }

	// end inline asm
	add.s64 	%rd464, %rd455, 72;
	// begin inline asm
	{ atom.add.f64 %fd1541,[%rd464],%fd1546; }

	// end inline asm
	add.s64 	%rd465, %rd455, 80;
	// begin inline asm
	{ atom.add.f64 %fd1543,[%rd465],%fd1546; }

	// end inline asm
	add.s64 	%rd466, %rd455, 88;
	// begin inline asm
	{ atom.add.f64 %fd1545,[%rd466],%fd1546; }

	// end inline asm

$L__BB5_267:
	add.f64 	%fd346, %fd286, 0d0000000000000000;
	mov.f64 	%fd1547, 0d0000000000000000;
	sub.f64 	%fd1548, %fd1547, %fd346;
	add.f64 	%fd347, %fd1548, 0d0000000000000000;
	@%p108 bra 	$L__BB5_269;

	mul.lo.s64 	%rd479, %rd41, %rd28;
	add.s64 	%rd467, %rd63, %rd479;
	// begin inline asm
	{ atom.add.f64 %fd1549,[%rd467],%fd1547; }

	// end inline asm
	add.s64 	%rd468, %rd467, 8;
	// begin inline asm
	{ atom.add.f64 %fd1551,[%rd468],%fd1547; }

	// end inline asm
	add.s64 	%rd469, %rd467, 16;
	// begin inline asm
	{ atom.add.f64 %fd1553,[%rd469],%fd1547; }

	// end inline asm
	add.s64 	%rd470, %rd467, 24;
	// begin inline asm
	{ atom.add.f64 %fd1555,[%rd470],%fd1547; }

	// end inline asm
	add.s64 	%rd471, %rd467, 32;
	// begin inline asm
	{ atom.add.f64 %fd1557,[%rd471],%fd347; }

	// end inline asm
	add.s64 	%rd472, %rd467, 40;
	// begin inline asm
	{ atom.add.f64 %fd1559,[%rd472],%fd1547; }

	// end inline asm
	add.s64 	%rd473, %rd467, 48;
	// begin inline asm
	{ atom.add.f64 %fd1561,[%rd473],%fd1547; }

	// end inline asm
	add.s64 	%rd474, %rd467, 56;
	// begin inline asm
	{ atom.add.f64 %fd1563,[%rd474],%fd1547; }

	// end inline asm
	add.s64 	%rd475, %rd467, 64;
	// begin inline asm
	{ atom.add.f64 %fd1565,[%rd475],%fd1547; }

	// end inline asm
	add.s64 	%rd476, %rd467, 72;
	// begin inline asm
	{ atom.add.f64 %fd1567,[%rd476],%fd1547; }

	// end inline asm
	add.s64 	%rd477, %rd467, 80;
	// begin inline asm
	{ atom.add.f64 %fd1569,[%rd477],%fd1547; }

	// end inline asm
	add.s64 	%rd478, %rd467, 88;
	// begin inline asm
	{ atom.add.f64 %fd1571,[%rd478],%fd1547; }

	// end inline asm
	bra.uni 	$L__BB5_271;

$L__BB5_269:
	setp.eq.s64 	%p137, %rd54, 0;
	@%p137 bra 	$L__BB5_271;

	add.s64 	%rd480, %rd54, %rd43;
	mov.f64 	%fd1596, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1573,[%rd480],%fd1596; }

	// end inline asm
	add.s64 	%rd481, %rd480, 8;
	// begin inline asm
	{ atom.add.f64 %fd1575,[%rd481],%fd1596; }

	// end inline asm
	add.s64 	%rd482, %rd480, 16;
	// begin inline asm
	{ atom.add.f64 %fd1577,[%rd482],%fd1596; }

	// end inline asm
	add.s64 	%rd483, %rd480, 24;
	// begin inline asm
	{ atom.add.f64 %fd1579,[%rd483],%fd1596; }

	// end inline asm
	add.s64 	%rd484, %rd480, 32;
	// begin inline asm
	{ atom.add.f64 %fd1581,[%rd484],%fd347; }

	// end inline asm
	add.s64 	%rd485, %rd480, 40;
	// begin inline asm
	{ atom.add.f64 %fd1583,[%rd485],%fd1596; }

	// end inline asm
	add.s64 	%rd486, %rd480, 48;
	// begin inline asm
	{ atom.add.f64 %fd1585,[%rd486],%fd1596; }

	// end inline asm
	add.s64 	%rd487, %rd480, 56;
	// begin inline asm
	{ atom.add.f64 %fd1587,[%rd487],%fd1596; }

	// end inline asm
	add.s64 	%rd488, %rd480, 64;
	// begin inline asm
	{ atom.add.f64 %fd1589,[%rd488],%fd1596; }

	// end inline asm
	add.s64 	%rd489, %rd480, 72;
	// begin inline asm
	{ atom.add.f64 %fd1591,[%rd489],%fd1596; }

	// end inline asm
	add.s64 	%rd490, %rd480, 80;
	// begin inline asm
	{ atom.add.f64 %fd1593,[%rd490],%fd1596; }

	// end inline asm
	add.s64 	%rd491, %rd480, 88;
	// begin inline asm
	{ atom.add.f64 %fd1595,[%rd491],%fd1596; }

	// end inline asm

$L__BB5_271:
	@%p110 bra 	$L__BB5_273;

	mul.lo.s64 	%rd504, %rd41, %rd29;
	add.s64 	%rd492, %rd61, %rd504;
	mov.f64 	%fd1620, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1597,[%rd492],%fd1620; }

	// end inline asm
	add.s64 	%rd493, %rd492, 8;
	// begin inline asm
	{ atom.add.f64 %fd1599,[%rd493],%fd1620; }

	// end inline asm
	add.s64 	%rd494, %rd492, 16;
	// begin inline asm
	{ atom.add.f64 %fd1601,[%rd494],%fd1620; }

	// end inline asm
	add.s64 	%rd495, %rd492, 24;
	// begin inline asm
	{ atom.add.f64 %fd1603,[%rd495],%fd1620; }

	// end inline asm
	add.s64 	%rd496, %rd492, 32;
	// begin inline asm
	{ atom.add.f64 %fd1605,[%rd496],%fd346; }

	// end inline asm
	add.s64 	%rd497, %rd492, 40;
	// begin inline asm
	{ atom.add.f64 %fd1607,[%rd497],%fd1620; }

	// end inline asm
	add.s64 	%rd498, %rd492, 48;
	// begin inline asm
	{ atom.add.f64 %fd1609,[%rd498],%fd1620; }

	// end inline asm
	add.s64 	%rd499, %rd492, 56;
	// begin inline asm
	{ atom.add.f64 %fd1611,[%rd499],%fd1620; }

	// end inline asm
	add.s64 	%rd500, %rd492, 64;
	// begin inline asm
	{ atom.add.f64 %fd1613,[%rd500],%fd1620; }

	// end inline asm
	add.s64 	%rd501, %rd492, 72;
	// begin inline asm
	{ atom.add.f64 %fd1615,[%rd501],%fd1620; }

	// end inline asm
	add.s64 	%rd502, %rd492, 80;
	// begin inline asm
	{ atom.add.f64 %fd1617,[%rd502],%fd1620; }

	// end inline asm
	add.s64 	%rd503, %rd492, 88;
	// begin inline asm
	{ atom.add.f64 %fd1619,[%rd503],%fd1620; }

	// end inline asm
	bra.uni 	$L__BB5_275;

$L__BB5_273:
	setp.eq.s64 	%p139, %rd52, 0;
	@%p139 bra 	$L__BB5_275;

	add.s64 	%rd505, %rd52, %rd42;
	mov.f64 	%fd1644, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1621,[%rd505],%fd1644; }

	// end inline asm
	add.s64 	%rd506, %rd505, 8;
	// begin inline asm
	{ atom.add.f64 %fd1623,[%rd506],%fd1644; }

	// end inline asm
	add.s64 	%rd507, %rd505, 16;
	// begin inline asm
	{ atom.add.f64 %fd1625,[%rd507],%fd1644; }

	// end inline asm
	add.s64 	%rd508, %rd505, 24;
	// begin inline asm
	{ atom.add.f64 %fd1627,[%rd508],%fd1644; }

	// end inline asm
	add.s64 	%rd509, %rd505, 32;
	// begin inline asm
	{ atom.add.f64 %fd1629,[%rd509],%fd346; }

	// end inline asm
	add.s64 	%rd510, %rd505, 40;
	// begin inline asm
	{ atom.add.f64 %fd1631,[%rd510],%fd1644; }

	// end inline asm
	add.s64 	%rd511, %rd505, 48;
	// begin inline asm
	{ atom.add.f64 %fd1633,[%rd511],%fd1644; }

	// end inline asm
	add.s64 	%rd512, %rd505, 56;
	// begin inline asm
	{ atom.add.f64 %fd1635,[%rd512],%fd1644; }

	// end inline asm
	add.s64 	%rd513, %rd505, 64;
	// begin inline asm
	{ atom.add.f64 %fd1637,[%rd513],%fd1644; }

	// end inline asm
	add.s64 	%rd514, %rd505, 72;
	// begin inline asm
	{ atom.add.f64 %fd1639,[%rd514],%fd1644; }

	// end inline asm
	add.s64 	%rd515, %rd505, 80;
	// begin inline asm
	{ atom.add.f64 %fd1641,[%rd515],%fd1644; }

	// end inline asm
	add.s64 	%rd516, %rd505, 88;
	// begin inline asm
	{ atom.add.f64 %fd1643,[%rd516],%fd1644; }

	// end inline asm

$L__BB5_275:
	add.f64 	%fd348, %fd309, 0d0000000000000000;
	mov.f64 	%fd1645, 0d0000000000000000;
	sub.f64 	%fd1646, %fd1645, %fd348;
	add.f64 	%fd349, %fd1646, 0d0000000000000000;
	@%p108 bra 	$L__BB5_277;

	mul.lo.s64 	%rd529, %rd41, %rd28;
	add.s64 	%rd517, %rd63, %rd529;
	// begin inline asm
	{ atom.add.f64 %fd1647,[%rd517],%fd1645; }

	// end inline asm
	add.s64 	%rd518, %rd517, 8;
	// begin inline asm
	{ atom.add.f64 %fd1649,[%rd518],%fd1645; }

	// end inline asm
	add.s64 	%rd519, %rd517, 16;
	// begin inline asm
	{ atom.add.f64 %fd1651,[%rd519],%fd1645; }

	// end inline asm
	add.s64 	%rd520, %rd517, 24;
	// begin inline asm
	{ atom.add.f64 %fd1653,[%rd520],%fd349; }

	// end inline asm
	add.s64 	%rd521, %rd517, 32;
	// begin inline asm
	{ atom.add.f64 %fd1655,[%rd521],%fd1645; }

	// end inline asm
	add.s64 	%rd522, %rd517, 40;
	// begin inline asm
	{ atom.add.f64 %fd1657,[%rd522],%fd1645; }

	// end inline asm
	add.s64 	%rd523, %rd517, 48;
	// begin inline asm
	{ atom.add.f64 %fd1659,[%rd523],%fd1645; }

	// end inline asm
	add.s64 	%rd524, %rd517, 56;
	// begin inline asm
	{ atom.add.f64 %fd1661,[%rd524],%fd1645; }

	// end inline asm
	add.s64 	%rd525, %rd517, 64;
	// begin inline asm
	{ atom.add.f64 %fd1663,[%rd525],%fd1645; }

	// end inline asm
	add.s64 	%rd526, %rd517, 72;
	// begin inline asm
	{ atom.add.f64 %fd1665,[%rd526],%fd1645; }

	// end inline asm
	add.s64 	%rd527, %rd517, 80;
	// begin inline asm
	{ atom.add.f64 %fd1667,[%rd527],%fd1645; }

	// end inline asm
	add.s64 	%rd528, %rd517, 88;
	// begin inline asm
	{ atom.add.f64 %fd1669,[%rd528],%fd1645; }

	// end inline asm
	bra.uni 	$L__BB5_279;

$L__BB5_277:
	setp.eq.s64 	%p141, %rd54, 0;
	@%p141 bra 	$L__BB5_279;

	add.s64 	%rd530, %rd54, %rd43;
	mov.f64 	%fd1694, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1671,[%rd530],%fd1694; }

	// end inline asm
	add.s64 	%rd531, %rd530, 8;
	// begin inline asm
	{ atom.add.f64 %fd1673,[%rd531],%fd1694; }

	// end inline asm
	add.s64 	%rd532, %rd530, 16;
	// begin inline asm
	{ atom.add.f64 %fd1675,[%rd532],%fd1694; }

	// end inline asm
	add.s64 	%rd533, %rd530, 24;
	// begin inline asm
	{ atom.add.f64 %fd1677,[%rd533],%fd349; }

	// end inline asm
	add.s64 	%rd534, %rd530, 32;
	// begin inline asm
	{ atom.add.f64 %fd1679,[%rd534],%fd1694; }

	// end inline asm
	add.s64 	%rd535, %rd530, 40;
	// begin inline asm
	{ atom.add.f64 %fd1681,[%rd535],%fd1694; }

	// end inline asm
	add.s64 	%rd536, %rd530, 48;
	// begin inline asm
	{ atom.add.f64 %fd1683,[%rd536],%fd1694; }

	// end inline asm
	add.s64 	%rd537, %rd530, 56;
	// begin inline asm
	{ atom.add.f64 %fd1685,[%rd537],%fd1694; }

	// end inline asm
	add.s64 	%rd538, %rd530, 64;
	// begin inline asm
	{ atom.add.f64 %fd1687,[%rd538],%fd1694; }

	// end inline asm
	add.s64 	%rd539, %rd530, 72;
	// begin inline asm
	{ atom.add.f64 %fd1689,[%rd539],%fd1694; }

	// end inline asm
	add.s64 	%rd540, %rd530, 80;
	// begin inline asm
	{ atom.add.f64 %fd1691,[%rd540],%fd1694; }

	// end inline asm
	add.s64 	%rd541, %rd530, 88;
	// begin inline asm
	{ atom.add.f64 %fd1693,[%rd541],%fd1694; }

	// end inline asm

$L__BB5_279:
	@%p110 bra 	$L__BB5_281;

	mul.lo.s64 	%rd554, %rd41, %rd29;
	add.s64 	%rd542, %rd61, %rd554;
	mov.f64 	%fd1718, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1695,[%rd542],%fd1718; }

	// end inline asm
	add.s64 	%rd543, %rd542, 8;
	// begin inline asm
	{ atom.add.f64 %fd1697,[%rd543],%fd1718; }

	// end inline asm
	add.s64 	%rd544, %rd542, 16;
	// begin inline asm
	{ atom.add.f64 %fd1699,[%rd544],%fd1718; }

	// end inline asm
	add.s64 	%rd545, %rd542, 24;
	// begin inline asm
	{ atom.add.f64 %fd1701,[%rd545],%fd348; }

	// end inline asm
	add.s64 	%rd546, %rd542, 32;
	// begin inline asm
	{ atom.add.f64 %fd1703,[%rd546],%fd1718; }

	// end inline asm
	add.s64 	%rd547, %rd542, 40;
	// begin inline asm
	{ atom.add.f64 %fd1705,[%rd547],%fd1718; }

	// end inline asm
	add.s64 	%rd548, %rd542, 48;
	// begin inline asm
	{ atom.add.f64 %fd1707,[%rd548],%fd1718; }

	// end inline asm
	add.s64 	%rd549, %rd542, 56;
	// begin inline asm
	{ atom.add.f64 %fd1709,[%rd549],%fd1718; }

	// end inline asm
	add.s64 	%rd550, %rd542, 64;
	// begin inline asm
	{ atom.add.f64 %fd1711,[%rd550],%fd1718; }

	// end inline asm
	add.s64 	%rd551, %rd542, 72;
	// begin inline asm
	{ atom.add.f64 %fd1713,[%rd551],%fd1718; }

	// end inline asm
	add.s64 	%rd552, %rd542, 80;
	// begin inline asm
	{ atom.add.f64 %fd1715,[%rd552],%fd1718; }

	// end inline asm
	add.s64 	%rd553, %rd542, 88;
	// begin inline asm
	{ atom.add.f64 %fd1717,[%rd553],%fd1718; }

	// end inline asm
	bra.uni 	$L__BB5_283;

$L__BB5_281:
	setp.eq.s64 	%p143, %rd52, 0;
	@%p143 bra 	$L__BB5_283;

	add.s64 	%rd555, %rd52, %rd42;
	mov.f64 	%fd1742, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1719,[%rd555],%fd1742; }

	// end inline asm
	add.s64 	%rd556, %rd555, 8;
	// begin inline asm
	{ atom.add.f64 %fd1721,[%rd556],%fd1742; }

	// end inline asm
	add.s64 	%rd557, %rd555, 16;
	// begin inline asm
	{ atom.add.f64 %fd1723,[%rd557],%fd1742; }

	// end inline asm
	add.s64 	%rd558, %rd555, 24;
	// begin inline asm
	{ atom.add.f64 %fd1725,[%rd558],%fd348; }

	// end inline asm
	add.s64 	%rd559, %rd555, 32;
	// begin inline asm
	{ atom.add.f64 %fd1727,[%rd559],%fd1742; }

	// end inline asm
	add.s64 	%rd560, %rd555, 40;
	// begin inline asm
	{ atom.add.f64 %fd1729,[%rd560],%fd1742; }

	// end inline asm
	add.s64 	%rd561, %rd555, 48;
	// begin inline asm
	{ atom.add.f64 %fd1731,[%rd561],%fd1742; }

	// end inline asm
	add.s64 	%rd562, %rd555, 56;
	// begin inline asm
	{ atom.add.f64 %fd1733,[%rd562],%fd1742; }

	// end inline asm
	add.s64 	%rd563, %rd555, 64;
	// begin inline asm
	{ atom.add.f64 %fd1735,[%rd563],%fd1742; }

	// end inline asm
	add.s64 	%rd564, %rd555, 72;
	// begin inline asm
	{ atom.add.f64 %fd1737,[%rd564],%fd1742; }

	// end inline asm
	add.s64 	%rd565, %rd555, 80;
	// begin inline asm
	{ atom.add.f64 %fd1739,[%rd565],%fd1742; }

	// end inline asm
	add.s64 	%rd566, %rd555, 88;
	// begin inline asm
	{ atom.add.f64 %fd1741,[%rd566],%fd1742; }

	// end inline asm

$L__BB5_283:
	add.f64 	%fd350, %fd270, 0d0000000000000000;
	mov.f64 	%fd1743, 0d0000000000000000;
	sub.f64 	%fd1744, %fd1743, %fd350;
	add.f64 	%fd351, %fd1744, 0d0000000000000000;
	@%p108 bra 	$L__BB5_285;

	mul.lo.s64 	%rd579, %rd41, %rd28;
	add.s64 	%rd567, %rd63, %rd579;
	// begin inline asm
	{ atom.add.f64 %fd1745,[%rd567],%fd1743; }

	// end inline asm
	add.s64 	%rd568, %rd567, 8;
	// begin inline asm
	{ atom.add.f64 %fd1747,[%rd568],%fd1743; }

	// end inline asm
	add.s64 	%rd569, %rd567, 16;
	// begin inline asm
	{ atom.add.f64 %fd1749,[%rd569],%fd351; }

	// end inline asm
	add.s64 	%rd570, %rd567, 24;
	// begin inline asm
	{ atom.add.f64 %fd1751,[%rd570],%fd1743; }

	// end inline asm
	add.s64 	%rd571, %rd567, 32;
	// begin inline asm
	{ atom.add.f64 %fd1753,[%rd571],%fd1743; }

	// end inline asm
	add.s64 	%rd572, %rd567, 40;
	// begin inline asm
	{ atom.add.f64 %fd1755,[%rd572],%fd1743; }

	// end inline asm
	add.s64 	%rd573, %rd567, 48;
	// begin inline asm
	{ atom.add.f64 %fd1757,[%rd573],%fd1743; }

	// end inline asm
	add.s64 	%rd574, %rd567, 56;
	// begin inline asm
	{ atom.add.f64 %fd1759,[%rd574],%fd1743; }

	// end inline asm
	add.s64 	%rd575, %rd567, 64;
	// begin inline asm
	{ atom.add.f64 %fd1761,[%rd575],%fd1743; }

	// end inline asm
	add.s64 	%rd576, %rd567, 72;
	// begin inline asm
	{ atom.add.f64 %fd1763,[%rd576],%fd1743; }

	// end inline asm
	add.s64 	%rd577, %rd567, 80;
	// begin inline asm
	{ atom.add.f64 %fd1765,[%rd577],%fd1743; }

	// end inline asm
	add.s64 	%rd578, %rd567, 88;
	// begin inline asm
	{ atom.add.f64 %fd1767,[%rd578],%fd1743; }

	// end inline asm
	bra.uni 	$L__BB5_287;

$L__BB5_285:
	setp.eq.s64 	%p145, %rd54, 0;
	@%p145 bra 	$L__BB5_287;

	add.s64 	%rd580, %rd54, %rd43;
	mov.f64 	%fd1792, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1769,[%rd580],%fd1792; }

	// end inline asm
	add.s64 	%rd581, %rd580, 8;
	// begin inline asm
	{ atom.add.f64 %fd1771,[%rd581],%fd1792; }

	// end inline asm
	add.s64 	%rd582, %rd580, 16;
	// begin inline asm
	{ atom.add.f64 %fd1773,[%rd582],%fd351; }

	// end inline asm
	add.s64 	%rd583, %rd580, 24;
	// begin inline asm
	{ atom.add.f64 %fd1775,[%rd583],%fd1792; }

	// end inline asm
	add.s64 	%rd584, %rd580, 32;
	// begin inline asm
	{ atom.add.f64 %fd1777,[%rd584],%fd1792; }

	// end inline asm
	add.s64 	%rd585, %rd580, 40;
	// begin inline asm
	{ atom.add.f64 %fd1779,[%rd585],%fd1792; }

	// end inline asm
	add.s64 	%rd586, %rd580, 48;
	// begin inline asm
	{ atom.add.f64 %fd1781,[%rd586],%fd1792; }

	// end inline asm
	add.s64 	%rd587, %rd580, 56;
	// begin inline asm
	{ atom.add.f64 %fd1783,[%rd587],%fd1792; }

	// end inline asm
	add.s64 	%rd588, %rd580, 64;
	// begin inline asm
	{ atom.add.f64 %fd1785,[%rd588],%fd1792; }

	// end inline asm
	add.s64 	%rd589, %rd580, 72;
	// begin inline asm
	{ atom.add.f64 %fd1787,[%rd589],%fd1792; }

	// end inline asm
	add.s64 	%rd590, %rd580, 80;
	// begin inline asm
	{ atom.add.f64 %fd1789,[%rd590],%fd1792; }

	// end inline asm
	add.s64 	%rd591, %rd580, 88;
	// begin inline asm
	{ atom.add.f64 %fd1791,[%rd591],%fd1792; }

	// end inline asm

$L__BB5_287:
	@%p110 bra 	$L__BB5_289;

	mul.lo.s64 	%rd604, %rd41, %rd29;
	add.s64 	%rd592, %rd61, %rd604;
	mov.f64 	%fd1816, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1793,[%rd592],%fd1816; }

	// end inline asm
	add.s64 	%rd593, %rd592, 8;
	// begin inline asm
	{ atom.add.f64 %fd1795,[%rd593],%fd1816; }

	// end inline asm
	add.s64 	%rd594, %rd592, 16;
	// begin inline asm
	{ atom.add.f64 %fd1797,[%rd594],%fd350; }

	// end inline asm
	add.s64 	%rd595, %rd592, 24;
	// begin inline asm
	{ atom.add.f64 %fd1799,[%rd595],%fd1816; }

	// end inline asm
	add.s64 	%rd596, %rd592, 32;
	// begin inline asm
	{ atom.add.f64 %fd1801,[%rd596],%fd1816; }

	// end inline asm
	add.s64 	%rd597, %rd592, 40;
	// begin inline asm
	{ atom.add.f64 %fd1803,[%rd597],%fd1816; }

	// end inline asm
	add.s64 	%rd598, %rd592, 48;
	// begin inline asm
	{ atom.add.f64 %fd1805,[%rd598],%fd1816; }

	// end inline asm
	add.s64 	%rd599, %rd592, 56;
	// begin inline asm
	{ atom.add.f64 %fd1807,[%rd599],%fd1816; }

	// end inline asm
	add.s64 	%rd600, %rd592, 64;
	// begin inline asm
	{ atom.add.f64 %fd1809,[%rd600],%fd1816; }

	// end inline asm
	add.s64 	%rd601, %rd592, 72;
	// begin inline asm
	{ atom.add.f64 %fd1811,[%rd601],%fd1816; }

	// end inline asm
	add.s64 	%rd602, %rd592, 80;
	// begin inline asm
	{ atom.add.f64 %fd1813,[%rd602],%fd1816; }

	// end inline asm
	add.s64 	%rd603, %rd592, 88;
	// begin inline asm
	{ atom.add.f64 %fd1815,[%rd603],%fd1816; }

	// end inline asm
	bra.uni 	$L__BB5_291;

$L__BB5_289:
	setp.eq.s64 	%p147, %rd52, 0;
	@%p147 bra 	$L__BB5_291;

	add.s64 	%rd605, %rd52, %rd42;
	mov.f64 	%fd1840, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1817,[%rd605],%fd1840; }

	// end inline asm
	add.s64 	%rd606, %rd605, 8;
	// begin inline asm
	{ atom.add.f64 %fd1819,[%rd606],%fd1840; }

	// end inline asm
	add.s64 	%rd607, %rd605, 16;
	// begin inline asm
	{ atom.add.f64 %fd1821,[%rd607],%fd350; }

	// end inline asm
	add.s64 	%rd608, %rd605, 24;
	// begin inline asm
	{ atom.add.f64 %fd1823,[%rd608],%fd1840; }

	// end inline asm
	add.s64 	%rd609, %rd605, 32;
	// begin inline asm
	{ atom.add.f64 %fd1825,[%rd609],%fd1840; }

	// end inline asm
	add.s64 	%rd610, %rd605, 40;
	// begin inline asm
	{ atom.add.f64 %fd1827,[%rd610],%fd1840; }

	// end inline asm
	add.s64 	%rd611, %rd605, 48;
	// begin inline asm
	{ atom.add.f64 %fd1829,[%rd611],%fd1840; }

	// end inline asm
	add.s64 	%rd612, %rd605, 56;
	// begin inline asm
	{ atom.add.f64 %fd1831,[%rd612],%fd1840; }

	// end inline asm
	add.s64 	%rd613, %rd605, 64;
	// begin inline asm
	{ atom.add.f64 %fd1833,[%rd613],%fd1840; }

	// end inline asm
	add.s64 	%rd614, %rd605, 72;
	// begin inline asm
	{ atom.add.f64 %fd1835,[%rd614],%fd1840; }

	// end inline asm
	add.s64 	%rd615, %rd605, 80;
	// begin inline asm
	{ atom.add.f64 %fd1837,[%rd615],%fd1840; }

	// end inline asm
	add.s64 	%rd616, %rd605, 88;
	// begin inline asm
	{ atom.add.f64 %fd1839,[%rd616],%fd1840; }

	// end inline asm

$L__BB5_291:
	add.f64 	%fd352, %fd293, 0d0000000000000000;
	mov.f64 	%fd1841, 0d0000000000000000;
	sub.f64 	%fd1842, %fd1841, %fd352;
	add.f64 	%fd353, %fd1842, 0d0000000000000000;
	@%p108 bra 	$L__BB5_293;

	mul.lo.s64 	%rd629, %rd41, %rd28;
	add.s64 	%rd617, %rd63, %rd629;
	// begin inline asm
	{ atom.add.f64 %fd1843,[%rd617],%fd1841; }

	// end inline asm
	add.s64 	%rd618, %rd617, 8;
	// begin inline asm
	{ atom.add.f64 %fd1845,[%rd618],%fd353; }

	// end inline asm
	add.s64 	%rd619, %rd617, 16;
	// begin inline asm
	{ atom.add.f64 %fd1847,[%rd619],%fd1841; }

	// end inline asm
	add.s64 	%rd620, %rd617, 24;
	// begin inline asm
	{ atom.add.f64 %fd1849,[%rd620],%fd1841; }

	// end inline asm
	add.s64 	%rd621, %rd617, 32;
	// begin inline asm
	{ atom.add.f64 %fd1851,[%rd621],%fd1841; }

	// end inline asm
	add.s64 	%rd622, %rd617, 40;
	// begin inline asm
	{ atom.add.f64 %fd1853,[%rd622],%fd1841; }

	// end inline asm
	add.s64 	%rd623, %rd617, 48;
	// begin inline asm
	{ atom.add.f64 %fd1855,[%rd623],%fd1841; }

	// end inline asm
	add.s64 	%rd624, %rd617, 56;
	// begin inline asm
	{ atom.add.f64 %fd1857,[%rd624],%fd1841; }

	// end inline asm
	add.s64 	%rd625, %rd617, 64;
	// begin inline asm
	{ atom.add.f64 %fd1859,[%rd625],%fd1841; }

	// end inline asm
	add.s64 	%rd626, %rd617, 72;
	// begin inline asm
	{ atom.add.f64 %fd1861,[%rd626],%fd1841; }

	// end inline asm
	add.s64 	%rd627, %rd617, 80;
	// begin inline asm
	{ atom.add.f64 %fd1863,[%rd627],%fd1841; }

	// end inline asm
	add.s64 	%rd628, %rd617, 88;
	// begin inline asm
	{ atom.add.f64 %fd1865,[%rd628],%fd1841; }

	// end inline asm
	bra.uni 	$L__BB5_295;

$L__BB5_293:
	setp.eq.s64 	%p149, %rd54, 0;
	@%p149 bra 	$L__BB5_295;

	add.s64 	%rd630, %rd54, %rd43;
	mov.f64 	%fd1890, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1867,[%rd630],%fd1890; }

	// end inline asm
	add.s64 	%rd631, %rd630, 8;
	// begin inline asm
	{ atom.add.f64 %fd1869,[%rd631],%fd353; }

	// end inline asm
	add.s64 	%rd632, %rd630, 16;
	// begin inline asm
	{ atom.add.f64 %fd1871,[%rd632],%fd1890; }

	// end inline asm
	add.s64 	%rd633, %rd630, 24;
	// begin inline asm
	{ atom.add.f64 %fd1873,[%rd633],%fd1890; }

	// end inline asm
	add.s64 	%rd634, %rd630, 32;
	// begin inline asm
	{ atom.add.f64 %fd1875,[%rd634],%fd1890; }

	// end inline asm
	add.s64 	%rd635, %rd630, 40;
	// begin inline asm
	{ atom.add.f64 %fd1877,[%rd635],%fd1890; }

	// end inline asm
	add.s64 	%rd636, %rd630, 48;
	// begin inline asm
	{ atom.add.f64 %fd1879,[%rd636],%fd1890; }

	// end inline asm
	add.s64 	%rd637, %rd630, 56;
	// begin inline asm
	{ atom.add.f64 %fd1881,[%rd637],%fd1890; }

	// end inline asm
	add.s64 	%rd638, %rd630, 64;
	// begin inline asm
	{ atom.add.f64 %fd1883,[%rd638],%fd1890; }

	// end inline asm
	add.s64 	%rd639, %rd630, 72;
	// begin inline asm
	{ atom.add.f64 %fd1885,[%rd639],%fd1890; }

	// end inline asm
	add.s64 	%rd640, %rd630, 80;
	// begin inline asm
	{ atom.add.f64 %fd1887,[%rd640],%fd1890; }

	// end inline asm
	add.s64 	%rd641, %rd630, 88;
	// begin inline asm
	{ atom.add.f64 %fd1889,[%rd641],%fd1890; }

	// end inline asm

$L__BB5_295:
	@%p110 bra 	$L__BB5_297;

	mul.lo.s64 	%rd654, %rd41, %rd29;
	add.s64 	%rd642, %rd61, %rd654;
	mov.f64 	%fd1914, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1891,[%rd642],%fd1914; }

	// end inline asm
	add.s64 	%rd643, %rd642, 8;
	// begin inline asm
	{ atom.add.f64 %fd1893,[%rd643],%fd352; }

	// end inline asm
	add.s64 	%rd644, %rd642, 16;
	// begin inline asm
	{ atom.add.f64 %fd1895,[%rd644],%fd1914; }

	// end inline asm
	add.s64 	%rd645, %rd642, 24;
	// begin inline asm
	{ atom.add.f64 %fd1897,[%rd645],%fd1914; }

	// end inline asm
	add.s64 	%rd646, %rd642, 32;
	// begin inline asm
	{ atom.add.f64 %fd1899,[%rd646],%fd1914; }

	// end inline asm
	add.s64 	%rd647, %rd642, 40;
	// begin inline asm
	{ atom.add.f64 %fd1901,[%rd647],%fd1914; }

	// end inline asm
	add.s64 	%rd648, %rd642, 48;
	// begin inline asm
	{ atom.add.f64 %fd1903,[%rd648],%fd1914; }

	// end inline asm
	add.s64 	%rd649, %rd642, 56;
	// begin inline asm
	{ atom.add.f64 %fd1905,[%rd649],%fd1914; }

	// end inline asm
	add.s64 	%rd650, %rd642, 64;
	// begin inline asm
	{ atom.add.f64 %fd1907,[%rd650],%fd1914; }

	// end inline asm
	add.s64 	%rd651, %rd642, 72;
	// begin inline asm
	{ atom.add.f64 %fd1909,[%rd651],%fd1914; }

	// end inline asm
	add.s64 	%rd652, %rd642, 80;
	// begin inline asm
	{ atom.add.f64 %fd1911,[%rd652],%fd1914; }

	// end inline asm
	add.s64 	%rd653, %rd642, 88;
	// begin inline asm
	{ atom.add.f64 %fd1913,[%rd653],%fd1914; }

	// end inline asm
	bra.uni 	$L__BB5_299;

$L__BB5_297:
	setp.eq.s64 	%p151, %rd52, 0;
	@%p151 bra 	$L__BB5_299;

	add.s64 	%rd655, %rd52, %rd42;
	mov.f64 	%fd1938, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1915,[%rd655],%fd1938; }

	// end inline asm
	add.s64 	%rd656, %rd655, 8;
	// begin inline asm
	{ atom.add.f64 %fd1917,[%rd656],%fd352; }

	// end inline asm
	add.s64 	%rd657, %rd655, 16;
	// begin inline asm
	{ atom.add.f64 %fd1919,[%rd657],%fd1938; }

	// end inline asm
	add.s64 	%rd658, %rd655, 24;
	// begin inline asm
	{ atom.add.f64 %fd1921,[%rd658],%fd1938; }

	// end inline asm
	add.s64 	%rd659, %rd655, 32;
	// begin inline asm
	{ atom.add.f64 %fd1923,[%rd659],%fd1938; }

	// end inline asm
	add.s64 	%rd660, %rd655, 40;
	// begin inline asm
	{ atom.add.f64 %fd1925,[%rd660],%fd1938; }

	// end inline asm
	add.s64 	%rd661, %rd655, 48;
	// begin inline asm
	{ atom.add.f64 %fd1927,[%rd661],%fd1938; }

	// end inline asm
	add.s64 	%rd662, %rd655, 56;
	// begin inline asm
	{ atom.add.f64 %fd1929,[%rd662],%fd1938; }

	// end inline asm
	add.s64 	%rd663, %rd655, 64;
	// begin inline asm
	{ atom.add.f64 %fd1931,[%rd663],%fd1938; }

	// end inline asm
	add.s64 	%rd664, %rd655, 72;
	// begin inline asm
	{ atom.add.f64 %fd1933,[%rd664],%fd1938; }

	// end inline asm
	add.s64 	%rd665, %rd655, 80;
	// begin inline asm
	{ atom.add.f64 %fd1935,[%rd665],%fd1938; }

	// end inline asm
	add.s64 	%rd666, %rd655, 88;
	// begin inline asm
	{ atom.add.f64 %fd1937,[%rd666],%fd1938; }

	// end inline asm

$L__BB5_299:
	add.f64 	%fd354, %fd331, 0d0000000000000000;
	mov.f64 	%fd1939, 0d0000000000000000;
	sub.f64 	%fd1940, %fd1939, %fd354;
	add.f64 	%fd355, %fd1940, 0d0000000000000000;
	@%p108 bra 	$L__BB5_301;

	mul.lo.s64 	%rd679, %rd41, %rd28;
	add.s64 	%rd667, %rd63, %rd679;
	// begin inline asm
	{ atom.add.f64 %fd1941,[%rd667],%fd355; }

	// end inline asm
	add.s64 	%rd668, %rd667, 8;
	// begin inline asm
	{ atom.add.f64 %fd1943,[%rd668],%fd1939; }

	// end inline asm
	add.s64 	%rd669, %rd667, 16;
	// begin inline asm
	{ atom.add.f64 %fd1945,[%rd669],%fd1939; }

	// end inline asm
	add.s64 	%rd670, %rd667, 24;
	// begin inline asm
	{ atom.add.f64 %fd1947,[%rd670],%fd1939; }

	// end inline asm
	add.s64 	%rd671, %rd667, 32;
	// begin inline asm
	{ atom.add.f64 %fd1949,[%rd671],%fd1939; }

	// end inline asm
	add.s64 	%rd672, %rd667, 40;
	// begin inline asm
	{ atom.add.f64 %fd1951,[%rd672],%fd1939; }

	// end inline asm
	add.s64 	%rd673, %rd667, 48;
	// begin inline asm
	{ atom.add.f64 %fd1953,[%rd673],%fd1939; }

	// end inline asm
	add.s64 	%rd674, %rd667, 56;
	// begin inline asm
	{ atom.add.f64 %fd1955,[%rd674],%fd1939; }

	// end inline asm
	add.s64 	%rd675, %rd667, 64;
	// begin inline asm
	{ atom.add.f64 %fd1957,[%rd675],%fd1939; }

	// end inline asm
	add.s64 	%rd676, %rd667, 72;
	// begin inline asm
	{ atom.add.f64 %fd1959,[%rd676],%fd1939; }

	// end inline asm
	add.s64 	%rd677, %rd667, 80;
	// begin inline asm
	{ atom.add.f64 %fd1961,[%rd677],%fd1939; }

	// end inline asm
	add.s64 	%rd678, %rd667, 88;
	// begin inline asm
	{ atom.add.f64 %fd1963,[%rd678],%fd1939; }

	// end inline asm
	bra.uni 	$L__BB5_303;

$L__BB5_301:
	setp.eq.s64 	%p153, %rd54, 0;
	@%p153 bra 	$L__BB5_303;

	add.s64 	%rd680, %rd54, %rd43;
	// begin inline asm
	{ atom.add.f64 %fd1965,[%rd680],%fd355; }

	// end inline asm
	add.s64 	%rd681, %rd680, 8;
	mov.f64 	%fd1988, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1967,[%rd681],%fd1988; }

	// end inline asm
	add.s64 	%rd682, %rd680, 16;
	// begin inline asm
	{ atom.add.f64 %fd1969,[%rd682],%fd1988; }

	// end inline asm
	add.s64 	%rd683, %rd680, 24;
	// begin inline asm
	{ atom.add.f64 %fd1971,[%rd683],%fd1988; }

	// end inline asm
	add.s64 	%rd684, %rd680, 32;
	// begin inline asm
	{ atom.add.f64 %fd1973,[%rd684],%fd1988; }

	// end inline asm
	add.s64 	%rd685, %rd680, 40;
	// begin inline asm
	{ atom.add.f64 %fd1975,[%rd685],%fd1988; }

	// end inline asm
	add.s64 	%rd686, %rd680, 48;
	// begin inline asm
	{ atom.add.f64 %fd1977,[%rd686],%fd1988; }

	// end inline asm
	add.s64 	%rd687, %rd680, 56;
	// begin inline asm
	{ atom.add.f64 %fd1979,[%rd687],%fd1988; }

	// end inline asm
	add.s64 	%rd688, %rd680, 64;
	// begin inline asm
	{ atom.add.f64 %fd1981,[%rd688],%fd1988; }

	// end inline asm
	add.s64 	%rd689, %rd680, 72;
	// begin inline asm
	{ atom.add.f64 %fd1983,[%rd689],%fd1988; }

	// end inline asm
	add.s64 	%rd690, %rd680, 80;
	// begin inline asm
	{ atom.add.f64 %fd1985,[%rd690],%fd1988; }

	// end inline asm
	add.s64 	%rd691, %rd680, 88;
	// begin inline asm
	{ atom.add.f64 %fd1987,[%rd691],%fd1988; }

	// end inline asm

$L__BB5_303:
	@%p110 bra 	$L__BB5_305;

	mul.lo.s64 	%rd704, %rd41, %rd29;
	add.s64 	%rd692, %rd61, %rd704;
	// begin inline asm
	{ atom.add.f64 %fd1989,[%rd692],%fd354; }

	// end inline asm
	add.s64 	%rd693, %rd692, 8;
	mov.f64 	%fd2012, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1991,[%rd693],%fd2012; }

	// end inline asm
	add.s64 	%rd694, %rd692, 16;
	// begin inline asm
	{ atom.add.f64 %fd1993,[%rd694],%fd2012; }

	// end inline asm
	add.s64 	%rd695, %rd692, 24;
	// begin inline asm
	{ atom.add.f64 %fd1995,[%rd695],%fd2012; }

	// end inline asm
	add.s64 	%rd696, %rd692, 32;
	// begin inline asm
	{ atom.add.f64 %fd1997,[%rd696],%fd2012; }

	// end inline asm
	add.s64 	%rd697, %rd692, 40;
	// begin inline asm
	{ atom.add.f64 %fd1999,[%rd697],%fd2012; }

	// end inline asm
	add.s64 	%rd698, %rd692, 48;
	// begin inline asm
	{ atom.add.f64 %fd2001,[%rd698],%fd2012; }

	// end inline asm
	add.s64 	%rd699, %rd692, 56;
	// begin inline asm
	{ atom.add.f64 %fd2003,[%rd699],%fd2012; }

	// end inline asm
	add.s64 	%rd700, %rd692, 64;
	// begin inline asm
	{ atom.add.f64 %fd2005,[%rd700],%fd2012; }

	// end inline asm
	add.s64 	%rd701, %rd692, 72;
	// begin inline asm
	{ atom.add.f64 %fd2007,[%rd701],%fd2012; }

	// end inline asm
	add.s64 	%rd702, %rd692, 80;
	// begin inline asm
	{ atom.add.f64 %fd2009,[%rd702],%fd2012; }

	// end inline asm
	add.s64 	%rd703, %rd692, 88;
	// begin inline asm
	{ atom.add.f64 %fd2011,[%rd703],%fd2012; }

	// end inline asm
	bra.uni 	$L__BB5_307;

$L__BB5_305:
	setp.eq.s64 	%p155, %rd52, 0;
	@%p155 bra 	$L__BB5_307;

	add.s64 	%rd705, %rd52, %rd42;
	// begin inline asm
	{ atom.add.f64 %fd2013,[%rd705],%fd354; }

	// end inline asm
	add.s64 	%rd706, %rd705, 8;
	mov.f64 	%fd2036, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd2015,[%rd706],%fd2036; }

	// end inline asm
	add.s64 	%rd707, %rd705, 16;
	// begin inline asm
	{ atom.add.f64 %fd2017,[%rd707],%fd2036; }

	// end inline asm
	add.s64 	%rd708, %rd705, 24;
	// begin inline asm
	{ atom.add.f64 %fd2019,[%rd708],%fd2036; }

	// end inline asm
	add.s64 	%rd709, %rd705, 32;
	// begin inline asm
	{ atom.add.f64 %fd2021,[%rd709],%fd2036; }

	// end inline asm
	add.s64 	%rd710, %rd705, 40;
	// begin inline asm
	{ atom.add.f64 %fd2023,[%rd710],%fd2036; }

	// end inline asm
	add.s64 	%rd711, %rd705, 48;
	// begin inline asm
	{ atom.add.f64 %fd2025,[%rd711],%fd2036; }

	// end inline asm
	add.s64 	%rd712, %rd705, 56;
	// begin inline asm
	{ atom.add.f64 %fd2027,[%rd712],%fd2036; }

	// end inline asm
	add.s64 	%rd713, %rd705, 64;
	// begin inline asm
	{ atom.add.f64 %fd2029,[%rd713],%fd2036; }

	// end inline asm
	add.s64 	%rd714, %rd705, 72;
	// begin inline asm
	{ atom.add.f64 %fd2031,[%rd714],%fd2036; }

	// end inline asm
	add.s64 	%rd715, %rd705, 80;
	// begin inline asm
	{ atom.add.f64 %fd2033,[%rd715],%fd2036; }

	// end inline asm
	add.s64 	%rd716, %rd705, 88;
	// begin inline asm
	{ atom.add.f64 %fd2035,[%rd716],%fd2036; }

	// end inline asm

$L__BB5_307:
	ld.param.u64 	%rd717, [compute_inertia_energy_val_affine_cuda_kernel_backward_param_0+24];
	add.s64 	%rd720, %rd720, %rd24;
	setp.lt.u64 	%p156, %rd720, %rd717;
	@%p156 bra 	$L__BB5_2;

$L__BB5_308:
	ret;

}
	// .globl	compute_inertia_energy_val_soft_cuda_kernel_forward
.visible .entry compute_inertia_energy_val_soft_cuda_kernel_forward(
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_forward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_forward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_forward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_forward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_forward_param_4[56],
	.param .u32 compute_inertia_energy_val_soft_cuda_kernel_forward_param_5,
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_forward_param_6[56]
)
{
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<42>;
	.reg .b32 	%r<114>;
	.reg .f64 	%fd<17>;
	.reg .b64 	%rd<69>;


	ld.param.v2.u32 	{%r53, %r54}, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_0];
	ld.param.v2.u32 	{%r55, %r56}, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_0+8];
	ld.param.v2.u32 	{%r61, %r62}, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_1+32];
	ld.param.v2.u32 	{%r69, %r70}, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_2+32];
	ld.param.v2.u32 	{%r77, %r78}, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_3+32];
	ld.param.v2.u32 	{%r85, %r86}, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_4+32];
	ld.param.u32 	%r43, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_5];
	ld.param.v2.u32 	{%r93, %r94}, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_6+32];
	ld.param.u64 	%rd40, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_6];
	ld.param.u64 	%rd38, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_4];
	ld.param.u64 	%rd36, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_3];
	ld.param.u64 	%rd34, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_2];
	ld.param.u64 	%rd32, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_1];
	ld.param.u64 	%rd31, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_0+24];
	ld.param.u32 	%r6, [compute_inertia_energy_val_soft_cuda_kernel_forward_param_0+16];
	mov.u32 	%r97, %ntid.x;
	cvt.u64.u32 	%rd1, %r97;
	mov.u32 	%r98, %ctaid.x;
	mul.wide.u32 	%rd42, %r97, %r98;
	mov.u32 	%r99, %tid.x;
	cvt.u64.u32 	%rd43, %r99;
	add.s64 	%rd65, %rd42, %rd43;
	setp.ge.u64 	%p1, %rd65, %rd31;
	@%p1 bra 	$L__BB6_18;

	cvta.to.global.u64 	%rd5, %rd38;
	cvta.to.global.u64 	%rd6, %rd36;
	cvta.to.global.u64 	%rd7, %rd34;
	cvta.to.global.u64 	%rd8, %rd32;
	cvt.s64.s32 	%rd9, %r56;
	cvt.s64.s32 	%rd10, %r55;
	cvt.s64.s32 	%rd11, %r54;
	cvt.s64.s32 	%rd12, %r93;
	cvt.s64.s32 	%rd13, %r69;
	cvt.s64.s32 	%rd14, %r77;
	cvt.s64.s32 	%rd15, %r85;
	cvt.s64.s32 	%rd16, %r61;
	mov.u32 	%r100, %nctaid.x;
	cvt.u64.u32 	%rd44, %r100;
	mul.lo.s64 	%rd17, %rd1, %rd44;
	cvta.to.global.u64 	%rd18, %rd40;

$L__BB6_2:
	setp.lt.s32 	%p2, %r6, 4;
	mov.u64 	%rd66, %rd65;
	@%p2 bra 	$L__BB6_6;

	or.b64  	%rd45, %rd65, %rd9;
	and.b64  	%rd46, %rd45, -4294967296;
	setp.eq.s64 	%p3, %rd46, 0;
	@%p3 bra 	$L__BB6_5;

	div.u64 	%rd66, %rd65, %rd9;
	bra.uni 	$L__BB6_6;

$L__BB6_5:
	cvt.u32.u64 	%r101, %rd9;
	cvt.u32.u64 	%r102, %rd65;
	div.u32 	%r103, %r102, %r101;
	cvt.u64.u32 	%rd66, %r103;

$L__BB6_6:
	setp.lt.s32 	%p4, %r6, 3;
	@%p4 bra 	$L__BB6_10;

	or.b64  	%rd47, %rd66, %rd10;
	and.b64  	%rd48, %rd47, -4294967296;
	setp.eq.s64 	%p5, %rd48, 0;
	@%p5 bra 	$L__BB6_9;

	div.u64 	%rd66, %rd66, %rd10;
	bra.uni 	$L__BB6_10;

$L__BB6_9:
	cvt.u32.u64 	%r104, %rd10;
	cvt.u32.u64 	%r105, %rd66;
	div.u32 	%r106, %r105, %r104;
	cvt.u64.u32 	%rd66, %r106;

$L__BB6_10:
	setp.lt.s32 	%p6, %r6, 2;
	@%p6 bra 	$L__BB6_14;

	or.b64  	%rd49, %rd66, %rd11;
	and.b64  	%rd50, %rd49, -4294967296;
	setp.eq.s64 	%p7, %rd50, 0;
	@%p7 bra 	$L__BB6_13;

	div.u64 	%rd66, %rd66, %rd11;
	bra.uni 	$L__BB6_14;

$L__BB6_13:
	cvt.u32.u64 	%r107, %rd11;
	cvt.u32.u64 	%r108, %rd66;
	div.u32 	%r109, %r108, %r107;
	cvt.u64.u32 	%rd66, %r109;

$L__BB6_14:
	cvt.u32.u64 	%r110, %rd66;
	setp.gt.s32 	%p8, %r6, 0;
	selp.b32 	%r111, %r110, 0, %p8;
	cvt.s64.s32 	%rd29, %r111;
	mul.lo.s64 	%rd51, %rd29, %rd12;
	add.s64 	%rd52, %rd18, %rd51;
	ld.global.u8 	%rs41, [%rd52];
	setp.eq.s16 	%p9, %rs41, 0;
	@%p9 bra 	$L__BB6_16;

	mul.lo.s64 	%rd53, %rd29, %rd16;
	add.s64 	%rd54, %rd8, %rd53;
	mov.u64 	%rd55, 0;
	st.global.u64 	[%rd54], %rd55;
	bra.uni 	$L__BB6_17;

$L__BB6_16:
	cvt.u32.u64 	%r112, %rd29;
	add.s32 	%r113, %r112, %r43;
	cvt.s64.s32 	%rd57, %r113;
	mul.lo.s64 	%rd58, %rd57, %rd13;
	add.s64 	%rd59, %rd7, %rd58;
	mul.lo.s64 	%rd60, %rd29, %rd14;
	add.s64 	%rd61, %rd6, %rd60;
	ld.global.f64 	%fd3, [%rd61];
	ld.global.f64 	%fd4, [%rd59];
	sub.f64 	%fd5, %fd4, %fd3;
	ld.global.f64 	%fd6, [%rd61+8];
	ld.global.f64 	%fd7, [%rd59+8];
	sub.f64 	%fd8, %fd7, %fd6;
	ld.global.f64 	%fd9, [%rd61+16];
	ld.global.f64 	%fd10, [%rd59+16];
	sub.f64 	%fd11, %fd10, %fd9;
	mul.f64 	%fd12, %fd8, %fd8;
	fma.rn.f64 	%fd13, %fd5, %fd5, %fd12;
	fma.rn.f64 	%fd14, %fd11, %fd11, %fd13;
	mul.f64 	%fd15, %fd14, 0d3FE0000000000000;
	mul.lo.s64 	%rd62, %rd29, %rd15;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f64 	%fd16, [%rd63];
	mul.f64 	%fd2, %fd16, %fd15;
	mul.lo.s64 	%rd64, %rd29, %rd16;
	add.s64 	%rd56, %rd32, %rd64;
	// begin inline asm
	{ atom.add.f64 %fd1,[%rd56],%fd2; }

	// end inline asm

$L__BB6_17:
	add.s64 	%rd65, %rd65, %rd17;
	setp.lt.u64 	%p10, %rd65, %rd31;
	@%p10 bra 	$L__BB6_2;

$L__BB6_18:
	ret;

}
	// .globl	compute_inertia_energy_val_soft_cuda_kernel_backward
.visible .entry compute_inertia_energy_val_soft_cuda_kernel_backward(
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_4[56],
	.param .u32 compute_inertia_energy_val_soft_cuda_kernel_backward_param_5,
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_6[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_7[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_8[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_9[56],
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_10[56],
	.param .u32 compute_inertia_energy_val_soft_cuda_kernel_backward_param_11,
	.param .align 8 .b8 compute_inertia_energy_val_soft_cuda_kernel_backward_param_12[56]
)
{
	.reg .pred 	%p<19>;
	.reg .b16 	%rs<74>;
	.reg .b32 	%r<183>;
	.reg .f64 	%fd<63>;
	.reg .b64 	%rd<108>;


	ld.param.v2.u32 	{%r89, %r90}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_0];
	ld.param.v2.u32 	{%r91, %r92}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_0+8];
	ld.param.v2.u32 	{%r97, %r98}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_1+32];
	ld.param.v2.u32 	{%r105, %r106}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_2+32];
	ld.param.v2.u32 	{%r113, %r114}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_3+32];
	ld.param.v2.u32 	{%r121, %r122}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_4+32];
	ld.param.v2.u32 	{%r129, %r130}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_6+32];
	ld.param.v2.u32 	{%r137, %r138}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_7+32];
	ld.param.v2.u32 	{%r145, %r146}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_8+32];
	ld.param.v2.u32 	{%r153, %r154}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_9+32];
	ld.param.v2.u32 	{%r161, %r162}, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_10+32];
	ld.param.u64 	%rd64, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_10];
	ld.param.u64 	%rd62, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_9];
	ld.param.u64 	%rd60, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_8];
	ld.param.u64 	%rd58, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_7];
	ld.param.u64 	%rd56, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_6];
	ld.param.u64 	%rd55, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_4+8];
	ld.param.u64 	%rd54, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_4];
	ld.param.u64 	%rd53, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_3+8];
	ld.param.u64 	%rd52, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_3];
	ld.param.u64 	%rd51, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_2+8];
	ld.param.u64 	%rd50, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_2];
	ld.param.u64 	%rd49, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_1+8];
	ld.param.u64 	%rd47, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_0+24];
	ld.param.u32 	%r6, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_0+16];
	mov.u32 	%r165, %ntid.x;
	cvt.u64.u32 	%rd1, %r165;
	mov.u32 	%r166, %ctaid.x;
	mul.wide.u32 	%rd66, %r165, %r166;
	mov.u32 	%r167, %tid.x;
	cvt.u64.u32 	%rd67, %r167;
	add.s64 	%rd104, %rd66, %rd67;
	setp.ge.u64 	%p1, %rd104, %rd47;
	@%p1 bra 	$L__BB7_32;

	cvta.to.global.u64 	%rd12, %rd58;
	cvta.to.global.u64 	%rd13, %rd54;
	cvta.to.global.u64 	%rd14, %rd52;
	cvta.to.global.u64 	%rd15, %rd50;
	cvta.to.global.u64 	%rd16, %rd49;
	cvt.s64.s32 	%rd17, %r92;
	cvt.s64.s32 	%rd18, %r91;
	cvt.s64.s32 	%rd19, %r90;
	cvt.s64.s32 	%rd20, %r129;
	cvt.s64.s32 	%rd21, %r105;
	cvt.s64.s32 	%rd22, %r113;
	cvt.s64.s32 	%rd23, %r121;
	mov.u32 	%r168, %nctaid.x;
	cvt.u64.u32 	%rd68, %r168;
	mul.lo.s64 	%rd24, %rd1, %rd68;
	cvt.s64.s32 	%rd25, %r137;
	cvt.s64.s32 	%rd26, %r97;
	cvt.s64.s32 	%rd27, %r161;
	cvt.s64.s32 	%rd28, %r153;
	cvt.s64.s32 	%rd29, %r145;
	cvta.to.global.u64 	%rd30, %rd56;

$L__BB7_2:
	setp.lt.s32 	%p2, %r6, 4;
	mov.u64 	%rd105, %rd104;
	@%p2 bra 	$L__BB7_6;

	or.b64  	%rd69, %rd104, %rd17;
	and.b64  	%rd70, %rd69, -4294967296;
	setp.eq.s64 	%p3, %rd70, 0;
	@%p3 bra 	$L__BB7_5;

	div.u64 	%rd105, %rd104, %rd17;
	bra.uni 	$L__BB7_6;

$L__BB7_5:
	cvt.u32.u64 	%r169, %rd17;
	cvt.u32.u64 	%r170, %rd104;
	div.u32 	%r171, %r170, %r169;
	cvt.u64.u32 	%rd105, %r171;

$L__BB7_6:
	setp.lt.s32 	%p4, %r6, 3;
	@%p4 bra 	$L__BB7_10;

	or.b64  	%rd71, %rd105, %rd18;
	and.b64  	%rd72, %rd71, -4294967296;
	setp.eq.s64 	%p5, %rd72, 0;
	@%p5 bra 	$L__BB7_9;

	div.u64 	%rd105, %rd105, %rd18;
	bra.uni 	$L__BB7_10;

$L__BB7_9:
	cvt.u32.u64 	%r172, %rd18;
	cvt.u32.u64 	%r173, %rd105;
	div.u32 	%r174, %r173, %r172;
	cvt.u64.u32 	%rd105, %r174;

$L__BB7_10:
	setp.lt.s32 	%p6, %r6, 2;
	@%p6 bra 	$L__BB7_14;

	or.b64  	%rd73, %rd105, %rd19;
	and.b64  	%rd74, %rd73, -4294967296;
	setp.eq.s64 	%p7, %rd74, 0;
	@%p7 bra 	$L__BB7_13;

	div.u64 	%rd105, %rd105, %rd19;
	bra.uni 	$L__BB7_14;

$L__BB7_13:
	cvt.u32.u64 	%r175, %rd19;
	cvt.u32.u64 	%r176, %rd105;
	div.u32 	%r177, %r176, %r175;
	cvt.u64.u32 	%rd105, %r177;

$L__BB7_14:
	cvt.u32.u64 	%r178, %rd105;
	setp.gt.s32 	%p8, %r6, 0;
	selp.b32 	%r179, %r178, 0, %p8;
	cvt.s64.s32 	%rd41, %r179;
	mul.lo.s64 	%rd75, %rd41, %rd20;
	add.s64 	%rd76, %rd30, %rd75;
	ld.global.u8 	%rs73, [%rd76];
	setp.ne.s16 	%p9, %rs73, 0;
	@%p9 bra 	$L__BB7_31;

	ld.param.u32 	%r182, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_5];
	ld.param.u64 	%rd102, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_7];
	cvt.u32.u64 	%r180, %rd41;
	add.s32 	%r181, %r180, %r182;
	cvt.s64.s32 	%rd42, %r181;
	mul.lo.s64 	%rd43, %rd42, %rd21;
	add.s64 	%rd77, %rd15, %rd43;
	mul.lo.s64 	%rd44, %rd41, %rd22;
	add.s64 	%rd78, %rd14, %rd44;
	ld.global.f64 	%fd17, [%rd78];
	ld.global.f64 	%fd18, [%rd77];
	sub.f64 	%fd1, %fd18, %fd17;
	ld.global.f64 	%fd19, [%rd78+8];
	ld.global.f64 	%fd20, [%rd77+8];
	sub.f64 	%fd2, %fd20, %fd19;
	ld.global.f64 	%fd21, [%rd78+16];
	ld.global.f64 	%fd22, [%rd77+16];
	sub.f64 	%fd3, %fd22, %fd21;
	mul.f64 	%fd23, %fd2, %fd2;
	fma.rn.f64 	%fd24, %fd1, %fd1, %fd23;
	fma.rn.f64 	%fd4, %fd3, %fd3, %fd24;
	mul.lo.s64 	%rd45, %rd41, %rd23;
	add.s64 	%rd79, %rd13, %rd45;
	ld.global.f64 	%fd5, [%rd79];
	setp.eq.s64 	%p10, %rd102, 0;
	@%p10 bra 	$L__BB7_17;

	mul.lo.s64 	%rd80, %rd41, %rd25;
	add.s64 	%rd81, %rd12, %rd80;
	ld.global.f64 	%fd25, [%rd81];
	add.f64 	%fd62, %fd25, 0d0000000000000000;
	bra.uni 	$L__BB7_19;

$L__BB7_17:
	ld.param.u64 	%rd103, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_1+8];
	setp.eq.s64 	%p11, %rd103, 0;
	mov.f64 	%fd62, 0d0000000000000000;
	@%p11 bra 	$L__BB7_19;

	mul.lo.s64 	%rd82, %rd41, %rd26;
	add.s64 	%rd83, %rd16, %rd82;
	ld.global.f64 	%fd27, [%rd83];
	add.f64 	%fd62, %fd27, 0d0000000000000000;

$L__BB7_19:
	fma.rn.f64 	%fd9, %fd5, %fd62, 0d0000000000000000;
	mul.f64 	%fd28, %fd4, 0d3FE0000000000000;
	fma.rn.f64 	%fd10, %fd28, %fd62, 0d0000000000000000;
	setp.eq.s64 	%p12, %rd64, 0;
	@%p12 bra 	$L__BB7_21;

	mul.lo.s64 	%rd85, %rd41, %rd27;
	add.s64 	%rd84, %rd64, %rd85;
	// begin inline asm
	{ atom.add.f64 %fd29,[%rd84],%fd10; }

	// end inline asm
	bra.uni 	$L__BB7_23;

$L__BB7_21:
	setp.eq.s64 	%p13, %rd55, 0;
	@%p13 bra 	$L__BB7_23;

	add.s64 	%rd86, %rd55, %rd45;
	// begin inline asm
	{ atom.add.f64 %fd31,[%rd86],%fd10; }

	// end inline asm

$L__BB7_23:
	setp.eq.s64 	%p14, %rd62, 0;
	fma.rn.f64 	%fd33, %fd9, 0d3FE0000000000000, 0d0000000000000000;
	mov.f64 	%fd34, 0d0000000000000000;
	add.f64 	%fd35, %fd1, %fd1;
	add.f64 	%fd36, %fd2, %fd2;
	add.f64 	%fd37, %fd3, %fd3;
	fma.rn.f64 	%fd11, %fd35, %fd33, 0d0000000000000000;
	fma.rn.f64 	%fd12, %fd36, %fd33, 0d0000000000000000;
	fma.rn.f64 	%fd13, %fd37, %fd33, 0d0000000000000000;
	sub.f64 	%fd14, %fd34, %fd11;
	sub.f64 	%fd15, %fd34, %fd12;
	sub.f64 	%fd16, %fd34, %fd13;
	@%p14 bra 	$L__BB7_25;

	mul.lo.s64 	%rd90, %rd41, %rd28;
	add.s64 	%rd87, %rd62, %rd90;
	// begin inline asm
	{ atom.add.f64 %fd38,[%rd87],%fd14; }

	// end inline asm
	add.s64 	%rd88, %rd87, 8;
	// begin inline asm
	{ atom.add.f64 %fd40,[%rd88],%fd15; }

	// end inline asm
	add.s64 	%rd89, %rd87, 16;
	// begin inline asm
	{ atom.add.f64 %fd42,[%rd89],%fd16; }

	// end inline asm
	bra.uni 	$L__BB7_27;

$L__BB7_25:
	setp.eq.s64 	%p15, %rd53, 0;
	@%p15 bra 	$L__BB7_27;

	add.s64 	%rd91, %rd53, %rd44;
	// begin inline asm
	{ atom.add.f64 %fd44,[%rd91],%fd14; }

	// end inline asm
	add.s64 	%rd92, %rd91, 8;
	// begin inline asm
	{ atom.add.f64 %fd46,[%rd92],%fd15; }

	// end inline asm
	add.s64 	%rd93, %rd91, 16;
	// begin inline asm
	{ atom.add.f64 %fd48,[%rd93],%fd16; }

	// end inline asm

$L__BB7_27:
	setp.eq.s64 	%p16, %rd60, 0;
	@%p16 bra 	$L__BB7_29;

	mul.lo.s64 	%rd97, %rd42, %rd29;
	add.s64 	%rd94, %rd60, %rd97;
	// begin inline asm
	{ atom.add.f64 %fd50,[%rd94],%fd11; }

	// end inline asm
	add.s64 	%rd95, %rd94, 8;
	// begin inline asm
	{ atom.add.f64 %fd52,[%rd95],%fd12; }

	// end inline asm
	add.s64 	%rd96, %rd94, 16;
	// begin inline asm
	{ atom.add.f64 %fd54,[%rd96],%fd13; }

	// end inline asm
	bra.uni 	$L__BB7_31;

$L__BB7_29:
	setp.eq.s64 	%p17, %rd51, 0;
	@%p17 bra 	$L__BB7_31;

	add.s64 	%rd98, %rd51, %rd43;
	// begin inline asm
	{ atom.add.f64 %fd56,[%rd98],%fd11; }

	// end inline asm
	add.s64 	%rd99, %rd98, 8;
	// begin inline asm
	{ atom.add.f64 %fd58,[%rd99],%fd12; }

	// end inline asm
	add.s64 	%rd100, %rd98, 16;
	// begin inline asm
	{ atom.add.f64 %fd60,[%rd100],%fd13; }

	// end inline asm

$L__BB7_31:
	ld.param.u64 	%rd101, [compute_inertia_energy_val_soft_cuda_kernel_backward_param_0+24];
	add.s64 	%rd104, %rd104, %rd24;
	setp.lt.u64 	%p18, %rd104, %rd101;
	@%p18 bra 	$L__BB7_2;

$L__BB7_32:
	ret;

}
	// .globl	compute_inertia_energy_grad_affine_y_cuda_kernel_forward
.visible .entry compute_inertia_energy_grad_affine_y_cuda_kernel_forward(
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_4[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_5[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_6[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_7[56]
)
{
	.reg .pred 	%p<13>;
	.reg .b16 	%rs<58>;
	.reg .b32 	%r<145>;
	.reg .f64 	%fd<113>;
	.reg .b64 	%rd<91>;


	ld.param.v2.u32 	{%r70, %r71}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_0];
	ld.param.v2.u32 	{%r72, %r73}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_0+8];
	ld.param.v2.u32 	{%r78, %r79}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_1+32];
	ld.param.v2.u32 	{%r86, %r87}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_2+32];
	ld.param.v2.u32 	{%r94, %r95}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_3+32];
	ld.param.v2.u32 	{%r102, %r103}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_4+32];
	ld.param.v2.u32 	{%r110, %r111}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_5+32];
	ld.param.v2.u32 	{%r118, %r119}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_6+32];
	ld.param.v2.u32 	{%r126, %r127}, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_7+32];
	ld.param.u64 	%rd47, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_7];
	ld.param.u64 	%rd45, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_6];
	ld.param.u64 	%rd43, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_5];
	ld.param.u64 	%rd41, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_4];
	ld.param.u64 	%rd39, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_3];
	ld.param.u64 	%rd37, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_2];
	ld.param.u64 	%rd34, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_0+24];
	ld.param.u32 	%r6, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_0+16];
	mov.u32 	%r130, %ntid.x;
	cvt.u64.u32 	%rd1, %r130;
	mov.u32 	%r131, %ctaid.x;
	mul.wide.u32 	%rd49, %r130, %r131;
	mov.u32 	%r132, %tid.x;
	cvt.u64.u32 	%rd50, %r132;
	add.s64 	%rd87, %rd49, %rd50;
	setp.ge.u64 	%p1, %rd87, %rd34;
	@%p1 bra 	$L__BB8_17;

	cvta.to.global.u64 	%rd4, %rd47;
	cvta.to.global.u64 	%rd5, %rd45;
	cvta.to.global.u64 	%rd6, %rd41;
	cvta.to.global.u64 	%rd7, %rd39;
	cvta.to.global.u64 	%rd8, %rd37;
	cvt.s64.s32 	%rd10, %r73;
	cvt.s64.s32 	%rd11, %r72;
	cvt.s64.s32 	%rd12, %r71;
	cvt.s64.s32 	%rd13, %r110;
	cvt.s64.s32 	%rd14, %r118;
	cvt.s64.s32 	%rd15, %r126;
	mov.u32 	%r133, %nctaid.x;
	cvt.u64.u32 	%rd51, %r133;
	mul.lo.s64 	%rd16, %rd1, %rd51;
	cvt.s64.s32 	%rd17, %r86;
	cvt.s64.s32 	%rd18, %r94;
	cvt.s64.s32 	%rd19, %r102;
	cvt.s64.s32 	%rd20, %r78;
	cvta.to.global.u64 	%rd21, %rd43;

$L__BB8_2:
	setp.lt.s32 	%p2, %r6, 4;
	mov.u64 	%rd88, %rd87;
	@%p2 bra 	$L__BB8_6;

	or.b64  	%rd52, %rd87, %rd10;
	and.b64  	%rd53, %rd52, -4294967296;
	setp.eq.s64 	%p3, %rd53, 0;
	@%p3 bra 	$L__BB8_5;

	div.u64 	%rd88, %rd87, %rd10;
	bra.uni 	$L__BB8_6;

$L__BB8_5:
	cvt.u32.u64 	%r134, %rd10;
	cvt.u32.u64 	%r135, %rd87;
	div.u32 	%r136, %r135, %r134;
	cvt.u64.u32 	%rd88, %r136;

$L__BB8_6:
	setp.lt.s32 	%p4, %r6, 3;
	@%p4 bra 	$L__BB8_10;

	or.b64  	%rd54, %rd88, %rd11;
	and.b64  	%rd55, %rd54, -4294967296;
	setp.eq.s64 	%p5, %rd55, 0;
	@%p5 bra 	$L__BB8_9;

	div.u64 	%rd88, %rd88, %rd11;
	bra.uni 	$L__BB8_10;

$L__BB8_9:
	cvt.u32.u64 	%r137, %rd11;
	cvt.u32.u64 	%r138, %rd88;
	div.u32 	%r139, %r138, %r137;
	cvt.u64.u32 	%rd88, %r139;

$L__BB8_10:
	setp.lt.s32 	%p6, %r6, 2;
	@%p6 bra 	$L__BB8_14;

	or.b64  	%rd56, %rd88, %rd12;
	and.b64  	%rd57, %rd56, -4294967296;
	setp.eq.s64 	%p7, %rd57, 0;
	@%p7 bra 	$L__BB8_13;

	div.u64 	%rd88, %rd88, %rd12;
	bra.uni 	$L__BB8_14;

$L__BB8_13:
	cvt.u32.u64 	%r140, %rd12;
	cvt.u32.u64 	%r141, %rd88;
	div.u32 	%r142, %r141, %r140;
	cvt.u64.u32 	%rd88, %r142;

$L__BB8_14:
	cvt.s64.s32 	%rd58, %rd88;
	setp.gt.s32 	%p8, %r6, 0;
	selp.b64 	%rd32, %rd58, 0, %p8;
	mul.lo.s64 	%rd59, %rd32, %rd13;
	add.s64 	%rd60, %rd21, %rd59;
	mul.lo.s64 	%rd61, %rd32, %rd14;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.s32 	%rd63, [%rd62];
	mul.lo.s64 	%rd64, %rd63, %rd15;
	add.s64 	%rd65, %rd4, %rd64;
	ld.global.u32 	%r143, [%rd65];
	add.s32 	%r144, %r143, -1;
	setp.lt.u32 	%p9, %r144, 2;
	ld.global.u8 	%rs57, [%rd60];
	setp.ne.s16 	%p10, %rs57, 0;
	or.pred  	%p11, %p10, %p9;
	@%p11 bra 	$L__BB8_16;

	ld.param.u64 	%rd86, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_1];
	mul.lo.s64 	%rd78, %rd32, %rd17;
	add.s64 	%rd79, %rd8, %rd78;
	mul.lo.s64 	%rd80, %rd32, %rd18;
	add.s64 	%rd81, %rd7, %rd80;
	ld.global.f64 	%fd25, [%rd81];
	ld.global.f64 	%fd26, [%rd79];
	sub.f64 	%fd27, %fd26, %fd25;
	mul.lo.s64 	%rd82, %rd32, %rd19;
	add.s64 	%rd83, %rd6, %rd82;
	ld.global.f64 	%fd28, [%rd83];
	fma.rn.f64 	%fd29, %fd27, %fd28, 0d0000000000000000;
	ld.global.f64 	%fd30, [%rd83+8];
	fma.rn.f64 	%fd31, %fd27, %fd30, 0d0000000000000000;
	ld.global.f64 	%fd32, [%rd83+16];
	fma.rn.f64 	%fd33, %fd27, %fd32, 0d0000000000000000;
	ld.global.f64 	%fd34, [%rd83+24];
	fma.rn.f64 	%fd35, %fd27, %fd34, 0d0000000000000000;
	ld.global.f64 	%fd36, [%rd81+8];
	ld.global.f64 	%fd37, [%rd79+8];
	sub.f64 	%fd38, %fd37, %fd36;
	fma.rn.f64 	%fd39, %fd38, %fd28, 0d0000000000000000;
	fma.rn.f64 	%fd40, %fd38, %fd30, 0d0000000000000000;
	fma.rn.f64 	%fd41, %fd38, %fd32, 0d0000000000000000;
	fma.rn.f64 	%fd42, %fd38, %fd34, 0d0000000000000000;
	ld.global.f64 	%fd43, [%rd81+16];
	ld.global.f64 	%fd44, [%rd79+16];
	sub.f64 	%fd45, %fd44, %fd43;
	fma.rn.f64 	%fd46, %fd45, %fd28, 0d0000000000000000;
	fma.rn.f64 	%fd47, %fd45, %fd30, 0d0000000000000000;
	fma.rn.f64 	%fd48, %fd45, %fd32, 0d0000000000000000;
	fma.rn.f64 	%fd49, %fd45, %fd34, 0d0000000000000000;
	ld.global.f64 	%fd50, [%rd81+24];
	ld.global.f64 	%fd51, [%rd79+24];
	sub.f64 	%fd52, %fd51, %fd50;
	ld.global.f64 	%fd53, [%rd83+32];
	fma.rn.f64 	%fd54, %fd52, %fd53, %fd29;
	ld.global.f64 	%fd55, [%rd83+40];
	fma.rn.f64 	%fd56, %fd52, %fd55, %fd31;
	ld.global.f64 	%fd57, [%rd83+48];
	fma.rn.f64 	%fd58, %fd52, %fd57, %fd33;
	ld.global.f64 	%fd59, [%rd83+56];
	fma.rn.f64 	%fd60, %fd52, %fd59, %fd35;
	ld.global.f64 	%fd61, [%rd81+32];
	ld.global.f64 	%fd62, [%rd79+32];
	sub.f64 	%fd63, %fd62, %fd61;
	fma.rn.f64 	%fd64, %fd63, %fd53, %fd39;
	fma.rn.f64 	%fd65, %fd63, %fd55, %fd40;
	fma.rn.f64 	%fd66, %fd63, %fd57, %fd41;
	fma.rn.f64 	%fd67, %fd63, %fd59, %fd42;
	ld.global.f64 	%fd68, [%rd81+40];
	ld.global.f64 	%fd69, [%rd79+40];
	sub.f64 	%fd70, %fd69, %fd68;
	fma.rn.f64 	%fd71, %fd70, %fd53, %fd46;
	fma.rn.f64 	%fd72, %fd70, %fd55, %fd47;
	fma.rn.f64 	%fd73, %fd70, %fd57, %fd48;
	fma.rn.f64 	%fd74, %fd70, %fd59, %fd49;
	ld.global.f64 	%fd75, [%rd81+48];
	ld.global.f64 	%fd76, [%rd79+48];
	sub.f64 	%fd77, %fd76, %fd75;
	ld.global.f64 	%fd78, [%rd83+64];
	fma.rn.f64 	%fd79, %fd77, %fd78, %fd54;
	ld.global.f64 	%fd80, [%rd83+72];
	fma.rn.f64 	%fd81, %fd77, %fd80, %fd56;
	ld.global.f64 	%fd82, [%rd83+80];
	fma.rn.f64 	%fd83, %fd77, %fd82, %fd58;
	ld.global.f64 	%fd84, [%rd83+88];
	fma.rn.f64 	%fd85, %fd77, %fd84, %fd60;
	ld.global.f64 	%fd86, [%rd81+56];
	ld.global.f64 	%fd87, [%rd79+56];
	sub.f64 	%fd88, %fd87, %fd86;
	fma.rn.f64 	%fd89, %fd88, %fd78, %fd64;
	fma.rn.f64 	%fd90, %fd88, %fd80, %fd65;
	fma.rn.f64 	%fd91, %fd88, %fd82, %fd66;
	fma.rn.f64 	%fd92, %fd88, %fd84, %fd67;
	ld.global.f64 	%fd93, [%rd81+64];
	ld.global.f64 	%fd94, [%rd79+64];
	sub.f64 	%fd95, %fd94, %fd93;
	fma.rn.f64 	%fd96, %fd95, %fd78, %fd71;
	fma.rn.f64 	%fd97, %fd95, %fd80, %fd72;
	fma.rn.f64 	%fd98, %fd95, %fd82, %fd73;
	fma.rn.f64 	%fd99, %fd95, %fd84, %fd74;
	ld.global.f64 	%fd100, [%rd81+72];
	ld.global.f64 	%fd101, [%rd79+72];
	sub.f64 	%fd102, %fd101, %fd100;
	ld.global.f64 	%fd103, [%rd83+96];
	fma.rn.f64 	%fd2, %fd102, %fd103, %fd79;
	ld.global.f64 	%fd104, [%rd83+104];
	fma.rn.f64 	%fd8, %fd102, %fd104, %fd81;
	ld.global.f64 	%fd105, [%rd83+112];
	fma.rn.f64 	%fd14, %fd102, %fd105, %fd83;
	ld.global.f64 	%fd106, [%rd83+120];
	fma.rn.f64 	%fd20, %fd102, %fd106, %fd85;
	ld.global.f64 	%fd107, [%rd81+80];
	ld.global.f64 	%fd108, [%rd79+80];
	sub.f64 	%fd109, %fd108, %fd107;
	fma.rn.f64 	%fd4, %fd109, %fd103, %fd89;
	fma.rn.f64 	%fd10, %fd109, %fd104, %fd90;
	fma.rn.f64 	%fd16, %fd109, %fd105, %fd91;
	fma.rn.f64 	%fd22, %fd109, %fd106, %fd92;
	ld.global.f64 	%fd110, [%rd81+88];
	ld.global.f64 	%fd111, [%rd79+88];
	sub.f64 	%fd112, %fd111, %fd110;
	fma.rn.f64 	%fd6, %fd112, %fd103, %fd96;
	fma.rn.f64 	%fd12, %fd112, %fd104, %fd97;
	fma.rn.f64 	%fd18, %fd112, %fd105, %fd98;
	fma.rn.f64 	%fd24, %fd112, %fd106, %fd99;
	mul.lo.s64 	%rd84, %rd32, %rd20;
	add.s64 	%rd66, %rd86, %rd84;
	// begin inline asm
	{ atom.add.f64 %fd1,[%rd66],%fd2; }

	// end inline asm
	add.s64 	%rd67, %rd66, 8;
	// begin inline asm
	{ atom.add.f64 %fd3,[%rd67],%fd4; }

	// end inline asm
	add.s64 	%rd68, %rd66, 16;
	// begin inline asm
	{ atom.add.f64 %fd5,[%rd68],%fd6; }

	// end inline asm
	add.s64 	%rd69, %rd66, 24;
	// begin inline asm
	{ atom.add.f64 %fd7,[%rd69],%fd8; }

	// end inline asm
	add.s64 	%rd70, %rd66, 32;
	// begin inline asm
	{ atom.add.f64 %fd9,[%rd70],%fd10; }

	// end inline asm
	add.s64 	%rd71, %rd66, 40;
	// begin inline asm
	{ atom.add.f64 %fd11,[%rd71],%fd12; }

	// end inline asm
	add.s64 	%rd72, %rd66, 48;
	// begin inline asm
	{ atom.add.f64 %fd13,[%rd72],%fd14; }

	// end inline asm
	add.s64 	%rd73, %rd66, 56;
	// begin inline asm
	{ atom.add.f64 %fd15,[%rd73],%fd16; }

	// end inline asm
	add.s64 	%rd74, %rd66, 64;
	// begin inline asm
	{ atom.add.f64 %fd17,[%rd74],%fd18; }

	// end inline asm
	add.s64 	%rd75, %rd66, 72;
	// begin inline asm
	{ atom.add.f64 %fd19,[%rd75],%fd20; }

	// end inline asm
	add.s64 	%rd76, %rd66, 80;
	// begin inline asm
	{ atom.add.f64 %fd21,[%rd76],%fd22; }

	// end inline asm
	add.s64 	%rd77, %rd66, 88;
	// begin inline asm
	{ atom.add.f64 %fd23,[%rd77],%fd24; }

	// end inline asm

$L__BB8_16:
	ld.param.u64 	%rd85, [compute_inertia_energy_grad_affine_y_cuda_kernel_forward_param_0+24];
	add.s64 	%rd87, %rd87, %rd16;
	setp.lt.u64 	%p12, %rd87, %rd85;
	@%p12 bra 	$L__BB8_2;

$L__BB8_17:
	ret;

}
	// .globl	compute_inertia_energy_grad_affine_y_cuda_kernel_backward
.visible .entry compute_inertia_energy_grad_affine_y_cuda_kernel_backward(
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_4[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_5[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_6[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_7[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_8[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_9[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_10[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_11[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_12[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_13[56],
	.param .align 8 .b8 compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_14[56]
)
{
	.reg .pred 	%p<65>;
	.reg .b16 	%rs<90>;
	.reg .b32 	%r<213>;
	.reg .f64 	%fd<1593>;
	.reg .b64 	%rd<737>;


	ld.param.v2.u32 	{%r106, %r107}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_0];
	ld.param.v2.u32 	{%r108, %r109}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_0+8];
	ld.param.v2.u32 	{%r114, %r115}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_1+32];
	ld.param.v2.u32 	{%r122, %r123}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_2+32];
	ld.param.v2.u32 	{%r130, %r131}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_3+32];
	ld.param.v2.u32 	{%r138, %r139}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_4+32];
	ld.param.v2.u32 	{%r146, %r147}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_5+32];
	ld.param.v2.u32 	{%r154, %r155}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_6+32];
	ld.param.v2.u32 	{%r162, %r163}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_7+32];
	ld.param.v2.u32 	{%r170, %r171}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_8+32];
	ld.param.v2.u32 	{%r178, %r179}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_9+32];
	ld.param.v2.u32 	{%r186, %r187}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_10+32];
	ld.param.v2.u32 	{%r194, %r195}, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_11+32];
	ld.param.u64 	%rd71, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_11];
	ld.param.u64 	%rd69, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_10];
	ld.param.u64 	%rd67, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_9];
	ld.param.u64 	%rd65, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_8];
	ld.param.u64 	%rd63, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_7];
	ld.param.u64 	%rd61, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_6];
	ld.param.u64 	%rd59, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_5];
	ld.param.u64 	%rd58, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_4+8];
	ld.param.u64 	%rd57, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_4];
	ld.param.u64 	%rd56, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_3+8];
	ld.param.u64 	%rd55, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_3];
	ld.param.u64 	%rd54, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_2+8];
	ld.param.u64 	%rd53, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_2];
	ld.param.u64 	%rd52, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_1+8];
	ld.param.u64 	%rd50, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_0+24];
	ld.param.u32 	%r6, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_0+16];
	mov.u32 	%r198, %ntid.x;
	cvt.u64.u32 	%rd1, %r198;
	mov.u32 	%r199, %ctaid.x;
	mul.wide.u32 	%rd73, %r198, %r199;
	mov.u32 	%r200, %tid.x;
	cvt.u64.u32 	%rd74, %r200;
	add.s64 	%rd733, %rd73, %rd74;
	setp.ge.u64 	%p1, %rd733, %rd50;
	@%p1 bra 	$L__BB9_120;

	cvta.to.global.u64 	%rd12, %rd65;
	cvta.to.global.u64 	%rd13, %rd63;
	cvta.to.global.u64 	%rd14, %rd61;
	cvta.to.global.u64 	%rd15, %rd57;
	cvta.to.global.u64 	%rd16, %rd55;
	cvta.to.global.u64 	%rd17, %rd53;
	cvta.to.global.u64 	%rd18, %rd52;
	cvt.s64.s32 	%rd19, %r109;
	cvt.s64.s32 	%rd20, %r108;
	cvt.s64.s32 	%rd21, %r107;
	cvt.s64.s32 	%rd22, %r146;
	cvt.s64.s32 	%rd23, %r154;
	cvt.s64.s32 	%rd24, %r162;
	mov.u32 	%r201, %nctaid.x;
	cvt.u64.u32 	%rd75, %r201;
	mul.lo.s64 	%rd25, %rd1, %rd75;
	cvt.s64.s32 	%rd26, %r122;
	cvt.s64.s32 	%rd27, %r130;
	cvt.s64.s32 	%rd28, %r138;
	cvt.s64.s32 	%rd29, %r170;
	cvt.s64.s32 	%rd30, %r114;
	cvt.s64.s32 	%rd31, %r194;
	cvt.s64.s32 	%rd32, %r186;
	cvt.s64.s32 	%rd33, %r178;
	cvta.to.global.u64 	%rd34, %rd59;

$L__BB9_2:
	setp.lt.s32 	%p2, %r6, 4;
	mov.u64 	%rd734, %rd733;
	@%p2 bra 	$L__BB9_6;

	or.b64  	%rd76, %rd733, %rd19;
	and.b64  	%rd77, %rd76, -4294967296;
	setp.eq.s64 	%p3, %rd77, 0;
	@%p3 bra 	$L__BB9_5;

	div.u64 	%rd734, %rd733, %rd19;
	bra.uni 	$L__BB9_6;

$L__BB9_5:
	cvt.u32.u64 	%r202, %rd19;
	cvt.u32.u64 	%r203, %rd733;
	div.u32 	%r204, %r203, %r202;
	cvt.u64.u32 	%rd734, %r204;

$L__BB9_6:
	setp.lt.s32 	%p4, %r6, 3;
	@%p4 bra 	$L__BB9_10;

	or.b64  	%rd78, %rd734, %rd20;
	and.b64  	%rd79, %rd78, -4294967296;
	setp.eq.s64 	%p5, %rd79, 0;
	@%p5 bra 	$L__BB9_9;

	div.u64 	%rd734, %rd734, %rd20;
	bra.uni 	$L__BB9_10;

$L__BB9_9:
	cvt.u32.u64 	%r205, %rd20;
	cvt.u32.u64 	%r206, %rd734;
	div.u32 	%r207, %r206, %r205;
	cvt.u64.u32 	%rd734, %r207;

$L__BB9_10:
	setp.lt.s32 	%p6, %r6, 2;
	@%p6 bra 	$L__BB9_14;

	or.b64  	%rd80, %rd734, %rd21;
	and.b64  	%rd81, %rd80, -4294967296;
	setp.eq.s64 	%p7, %rd81, 0;
	@%p7 bra 	$L__BB9_13;

	div.u64 	%rd734, %rd734, %rd21;
	bra.uni 	$L__BB9_14;

$L__BB9_13:
	cvt.u32.u64 	%r208, %rd21;
	cvt.u32.u64 	%r209, %rd734;
	div.u32 	%r210, %r209, %r208;
	cvt.u64.u32 	%rd734, %r210;

$L__BB9_14:
	cvt.s64.s32 	%rd82, %rd734;
	setp.gt.s32 	%p8, %r6, 0;
	selp.b64 	%rd45, %rd82, 0, %p8;
	mul.lo.s64 	%rd83, %rd45, %rd22;
	add.s64 	%rd84, %rd34, %rd83;
	mul.lo.s64 	%rd85, %rd45, %rd23;
	add.s64 	%rd86, %rd14, %rd85;
	ld.global.s32 	%rd87, [%rd86];
	mul.lo.s64 	%rd88, %rd87, %rd24;
	add.s64 	%rd89, %rd13, %rd88;
	ld.global.u32 	%r211, [%rd89];
	add.s32 	%r212, %r211, -1;
	setp.lt.u32 	%p9, %r212, 2;
	ld.global.u8 	%rs89, [%rd84];
	setp.ne.s16 	%p10, %rs89, 0;
	or.pred  	%p11, %p10, %p9;
	@%p11 bra 	$L__BB9_119;

	ld.param.u64 	%rd731, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_8];
	setp.eq.s64 	%p12, %rd731, 0;
	mul.lo.s64 	%rd46, %rd45, %rd26;
	add.s64 	%rd90, %rd17, %rd46;
	mul.lo.s64 	%rd47, %rd45, %rd27;
	add.s64 	%rd91, %rd16, %rd47;
	ld.global.f64 	%fd117, [%rd91];
	ld.global.f64 	%fd118, [%rd90];
	sub.f64 	%fd1, %fd118, %fd117;
	ld.global.f64 	%fd119, [%rd91+8];
	ld.global.f64 	%fd120, [%rd90+8];
	sub.f64 	%fd2, %fd120, %fd119;
	ld.global.f64 	%fd121, [%rd91+16];
	ld.global.f64 	%fd122, [%rd90+16];
	sub.f64 	%fd3, %fd122, %fd121;
	ld.global.f64 	%fd123, [%rd91+24];
	ld.global.f64 	%fd124, [%rd90+24];
	sub.f64 	%fd4, %fd124, %fd123;
	ld.global.f64 	%fd125, [%rd91+32];
	ld.global.f64 	%fd126, [%rd90+32];
	sub.f64 	%fd5, %fd126, %fd125;
	ld.global.f64 	%fd127, [%rd91+40];
	ld.global.f64 	%fd128, [%rd90+40];
	sub.f64 	%fd6, %fd128, %fd127;
	ld.global.f64 	%fd129, [%rd91+48];
	ld.global.f64 	%fd130, [%rd90+48];
	sub.f64 	%fd7, %fd130, %fd129;
	ld.global.f64 	%fd131, [%rd91+56];
	ld.global.f64 	%fd132, [%rd90+56];
	sub.f64 	%fd8, %fd132, %fd131;
	ld.global.f64 	%fd133, [%rd91+64];
	ld.global.f64 	%fd134, [%rd90+64];
	sub.f64 	%fd9, %fd134, %fd133;
	ld.global.f64 	%fd135, [%rd91+72];
	ld.global.f64 	%fd136, [%rd90+72];
	sub.f64 	%fd10, %fd136, %fd135;
	ld.global.f64 	%fd137, [%rd91+80];
	ld.global.f64 	%fd138, [%rd90+80];
	sub.f64 	%fd11, %fd138, %fd137;
	ld.global.f64 	%fd139, [%rd91+88];
	ld.global.f64 	%fd140, [%rd90+88];
	sub.f64 	%fd12, %fd140, %fd139;
	mul.lo.s64 	%rd48, %rd45, %rd28;
	add.s64 	%rd92, %rd15, %rd48;
	ld.global.f64 	%fd13, [%rd92+120];
	ld.global.f64 	%fd14, [%rd92+112];
	ld.global.f64 	%fd15, [%rd92+104];
	ld.global.f64 	%fd16, [%rd92+96];
	ld.global.f64 	%fd17, [%rd92+88];
	ld.global.f64 	%fd18, [%rd92+80];
	ld.global.f64 	%fd19, [%rd92+72];
	ld.global.f64 	%fd20, [%rd92+64];
	ld.global.f64 	%fd21, [%rd92+56];
	ld.global.f64 	%fd22, [%rd92+48];
	ld.global.f64 	%fd23, [%rd92+40];
	ld.global.f64 	%fd24, [%rd92+32];
	ld.global.f64 	%fd25, [%rd92+24];
	ld.global.f64 	%fd26, [%rd92+16];
	ld.global.f64 	%fd27, [%rd92+8];
	ld.global.f64 	%fd28, [%rd92];
	@%p12 bra 	$L__BB9_17;

	mul.lo.s64 	%rd93, %rd45, %rd29;
	add.s64 	%rd94, %rd12, %rd93;
	ld.global.f64 	%fd141, [%rd94];
	add.f64 	%fd1592, %fd141, 0d0000000000000000;
	ld.global.f64 	%fd142, [%rd94+8];
	add.f64 	%fd1591, %fd142, 0d0000000000000000;
	ld.global.f64 	%fd143, [%rd94+16];
	add.f64 	%fd1590, %fd143, 0d0000000000000000;
	ld.global.f64 	%fd144, [%rd94+24];
	add.f64 	%fd1589, %fd144, 0d0000000000000000;
	ld.global.f64 	%fd145, [%rd94+32];
	add.f64 	%fd1588, %fd145, 0d0000000000000000;
	ld.global.f64 	%fd146, [%rd94+40];
	add.f64 	%fd1587, %fd146, 0d0000000000000000;
	ld.global.f64 	%fd147, [%rd94+48];
	add.f64 	%fd1586, %fd147, 0d0000000000000000;
	ld.global.f64 	%fd148, [%rd94+56];
	add.f64 	%fd1585, %fd148, 0d0000000000000000;
	ld.global.f64 	%fd149, [%rd94+64];
	add.f64 	%fd1584, %fd149, 0d0000000000000000;
	ld.global.f64 	%fd150, [%rd94+72];
	add.f64 	%fd1583, %fd150, 0d0000000000000000;
	ld.global.f64 	%fd151, [%rd94+80];
	add.f64 	%fd1582, %fd151, 0d0000000000000000;
	ld.global.f64 	%fd152, [%rd94+88];
	add.f64 	%fd1581, %fd152, 0d0000000000000000;
	bra.uni 	$L__BB9_19;

$L__BB9_17:
	ld.param.u64 	%rd732, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_1+8];
	setp.eq.s64 	%p13, %rd732, 0;
	mov.f64 	%fd1581, 0d0000000000000000;
	mov.f64 	%fd1582, %fd1581;
	mov.f64 	%fd1583, %fd1581;
	mov.f64 	%fd1584, %fd1581;
	mov.f64 	%fd1585, %fd1581;
	mov.f64 	%fd1586, %fd1581;
	mov.f64 	%fd1587, %fd1581;
	mov.f64 	%fd1588, %fd1581;
	mov.f64 	%fd1589, %fd1581;
	mov.f64 	%fd1590, %fd1581;
	mov.f64 	%fd1591, %fd1581;
	mov.f64 	%fd1592, %fd1581;
	@%p13 bra 	$L__BB9_19;

	mul.lo.s64 	%rd95, %rd45, %rd30;
	add.s64 	%rd96, %rd18, %rd95;
	ld.global.f64 	%fd165, [%rd96];
	add.f64 	%fd1592, %fd165, 0d0000000000000000;
	ld.global.f64 	%fd166, [%rd96+8];
	add.f64 	%fd1591, %fd166, 0d0000000000000000;
	ld.global.f64 	%fd167, [%rd96+16];
	add.f64 	%fd1590, %fd167, 0d0000000000000000;
	ld.global.f64 	%fd168, [%rd96+24];
	add.f64 	%fd1589, %fd168, 0d0000000000000000;
	ld.global.f64 	%fd169, [%rd96+32];
	add.f64 	%fd1588, %fd169, 0d0000000000000000;
	ld.global.f64 	%fd170, [%rd96+40];
	add.f64 	%fd1587, %fd170, 0d0000000000000000;
	ld.global.f64 	%fd171, [%rd96+48];
	add.f64 	%fd1586, %fd171, 0d0000000000000000;
	ld.global.f64 	%fd172, [%rd96+56];
	add.f64 	%fd1585, %fd172, 0d0000000000000000;
	ld.global.f64 	%fd173, [%rd96+64];
	add.f64 	%fd1584, %fd173, 0d0000000000000000;
	ld.global.f64 	%fd174, [%rd96+72];
	add.f64 	%fd1583, %fd174, 0d0000000000000000;
	ld.global.f64 	%fd175, [%rd96+80];
	add.f64 	%fd1582, %fd175, 0d0000000000000000;
	ld.global.f64 	%fd176, [%rd96+88];
	add.f64 	%fd1581, %fd176, 0d0000000000000000;

$L__BB9_19:
	add.f64 	%fd177, %fd1581, 0d0000000000000000;
	fma.rn.f64 	%fd178, %fd12, %fd177, 0d0000000000000000;
	fma.rn.f64 	%fd179, %fd13, %fd177, 0d0000000000000000;
	add.f64 	%fd180, %fd1584, 0d0000000000000000;
	fma.rn.f64 	%fd181, %fd12, %fd180, 0d0000000000000000;
	fma.rn.f64 	%fd182, %fd14, %fd180, 0d0000000000000000;
	add.f64 	%fd183, %fd179, %fd182;
	add.f64 	%fd184, %fd1587, 0d0000000000000000;
	fma.rn.f64 	%fd185, %fd12, %fd184, 0d0000000000000000;
	fma.rn.f64 	%fd186, %fd15, %fd184, 0d0000000000000000;
	add.f64 	%fd187, %fd183, %fd186;
	add.f64 	%fd188, %fd1590, 0d0000000000000000;
	fma.rn.f64 	%fd189, %fd12, %fd188, 0d0000000000000000;
	fma.rn.f64 	%fd190, %fd16, %fd188, 0d0000000000000000;
	add.f64 	%fd191, %fd1582, 0d0000000000000000;
	fma.rn.f64 	%fd192, %fd11, %fd191, 0d0000000000000000;
	fma.rn.f64 	%fd193, %fd13, %fd191, 0d0000000000000000;
	add.f64 	%fd194, %fd178, %fd192;
	add.f64 	%fd195, %fd1585, 0d0000000000000000;
	fma.rn.f64 	%fd196, %fd11, %fd195, 0d0000000000000000;
	fma.rn.f64 	%fd197, %fd14, %fd195, 0d0000000000000000;
	add.f64 	%fd198, %fd193, %fd197;
	add.f64 	%fd199, %fd181, %fd196;
	add.f64 	%fd200, %fd1588, 0d0000000000000000;
	fma.rn.f64 	%fd201, %fd11, %fd200, 0d0000000000000000;
	fma.rn.f64 	%fd202, %fd15, %fd200, 0d0000000000000000;
	add.f64 	%fd203, %fd198, %fd202;
	add.f64 	%fd204, %fd185, %fd201;
	add.f64 	%fd205, %fd1591, 0d0000000000000000;
	fma.rn.f64 	%fd206, %fd11, %fd205, 0d0000000000000000;
	fma.rn.f64 	%fd207, %fd16, %fd205, 0d0000000000000000;
	add.f64 	%fd208, %fd189, %fd206;
	add.f64 	%fd209, %fd1583, 0d0000000000000000;
	fma.rn.f64 	%fd210, %fd10, %fd209, 0d0000000000000000;
	fma.rn.f64 	%fd211, %fd13, %fd209, 0d0000000000000000;
	add.f64 	%fd212, %fd194, %fd210;
	add.f64 	%fd213, %fd1586, 0d0000000000000000;
	fma.rn.f64 	%fd214, %fd10, %fd213, 0d0000000000000000;
	fma.rn.f64 	%fd215, %fd14, %fd213, 0d0000000000000000;
	add.f64 	%fd216, %fd211, %fd215;
	add.f64 	%fd217, %fd199, %fd214;
	add.f64 	%fd218, %fd1589, 0d0000000000000000;
	fma.rn.f64 	%fd219, %fd10, %fd218, 0d0000000000000000;
	fma.rn.f64 	%fd220, %fd15, %fd218, 0d0000000000000000;
	add.f64 	%fd221, %fd216, %fd220;
	add.f64 	%fd222, %fd204, %fd219;
	add.f64 	%fd223, %fd1592, 0d0000000000000000;
	fma.rn.f64 	%fd224, %fd10, %fd223, 0d0000000000000000;
	fma.rn.f64 	%fd225, %fd16, %fd223, 0d0000000000000000;
	add.f64 	%fd226, %fd208, %fd224;
	fma.rn.f64 	%fd227, %fd9, %fd177, 0d0000000000000000;
	fma.rn.f64 	%fd228, %fd17, %fd177, 0d0000000000000000;
	fma.rn.f64 	%fd229, %fd9, %fd180, 0d0000000000000000;
	fma.rn.f64 	%fd230, %fd18, %fd180, 0d0000000000000000;
	add.f64 	%fd231, %fd228, %fd230;
	fma.rn.f64 	%fd232, %fd9, %fd184, 0d0000000000000000;
	fma.rn.f64 	%fd233, %fd19, %fd184, 0d0000000000000000;
	add.f64 	%fd234, %fd231, %fd233;
	fma.rn.f64 	%fd235, %fd9, %fd188, 0d0000000000000000;
	fma.rn.f64 	%fd236, %fd20, %fd188, 0d0000000000000000;
	fma.rn.f64 	%fd237, %fd8, %fd191, 0d0000000000000000;
	fma.rn.f64 	%fd238, %fd17, %fd191, 0d0000000000000000;
	add.f64 	%fd239, %fd227, %fd237;
	fma.rn.f64 	%fd240, %fd8, %fd195, 0d0000000000000000;
	fma.rn.f64 	%fd241, %fd18, %fd195, 0d0000000000000000;
	add.f64 	%fd242, %fd238, %fd241;
	add.f64 	%fd243, %fd229, %fd240;
	fma.rn.f64 	%fd244, %fd8, %fd200, 0d0000000000000000;
	fma.rn.f64 	%fd245, %fd19, %fd200, 0d0000000000000000;
	add.f64 	%fd246, %fd242, %fd245;
	add.f64 	%fd247, %fd232, %fd244;
	fma.rn.f64 	%fd248, %fd8, %fd205, 0d0000000000000000;
	fma.rn.f64 	%fd249, %fd20, %fd205, 0d0000000000000000;
	add.f64 	%fd250, %fd235, %fd248;
	fma.rn.f64 	%fd251, %fd7, %fd209, 0d0000000000000000;
	fma.rn.f64 	%fd252, %fd17, %fd209, 0d0000000000000000;
	add.f64 	%fd253, %fd239, %fd251;
	fma.rn.f64 	%fd254, %fd7, %fd213, 0d0000000000000000;
	fma.rn.f64 	%fd255, %fd18, %fd213, 0d0000000000000000;
	add.f64 	%fd256, %fd252, %fd255;
	add.f64 	%fd257, %fd243, %fd254;
	fma.rn.f64 	%fd258, %fd7, %fd218, 0d0000000000000000;
	fma.rn.f64 	%fd259, %fd19, %fd218, 0d0000000000000000;
	add.f64 	%fd260, %fd256, %fd259;
	add.f64 	%fd261, %fd247, %fd258;
	fma.rn.f64 	%fd262, %fd7, %fd223, 0d0000000000000000;
	fma.rn.f64 	%fd263, %fd20, %fd223, 0d0000000000000000;
	add.f64 	%fd264, %fd250, %fd262;
	fma.rn.f64 	%fd265, %fd6, %fd177, 0d0000000000000000;
	fma.rn.f64 	%fd266, %fd21, %fd177, 0d0000000000000000;
	fma.rn.f64 	%fd267, %fd6, %fd180, 0d0000000000000000;
	fma.rn.f64 	%fd268, %fd22, %fd180, 0d0000000000000000;
	add.f64 	%fd269, %fd266, %fd268;
	fma.rn.f64 	%fd270, %fd6, %fd184, 0d0000000000000000;
	fma.rn.f64 	%fd271, %fd23, %fd184, 0d0000000000000000;
	add.f64 	%fd272, %fd269, %fd271;
	fma.rn.f64 	%fd273, %fd6, %fd188, 0d0000000000000000;
	fma.rn.f64 	%fd274, %fd24, %fd188, 0d0000000000000000;
	fma.rn.f64 	%fd275, %fd5, %fd191, 0d0000000000000000;
	fma.rn.f64 	%fd276, %fd21, %fd191, 0d0000000000000000;
	add.f64 	%fd277, %fd265, %fd275;
	fma.rn.f64 	%fd278, %fd5, %fd195, 0d0000000000000000;
	fma.rn.f64 	%fd279, %fd22, %fd195, 0d0000000000000000;
	add.f64 	%fd280, %fd276, %fd279;
	add.f64 	%fd281, %fd267, %fd278;
	fma.rn.f64 	%fd282, %fd5, %fd200, 0d0000000000000000;
	fma.rn.f64 	%fd283, %fd23, %fd200, 0d0000000000000000;
	add.f64 	%fd284, %fd280, %fd283;
	add.f64 	%fd285, %fd270, %fd282;
	fma.rn.f64 	%fd286, %fd5, %fd205, 0d0000000000000000;
	fma.rn.f64 	%fd287, %fd24, %fd205, 0d0000000000000000;
	add.f64 	%fd288, %fd273, %fd286;
	fma.rn.f64 	%fd289, %fd4, %fd209, 0d0000000000000000;
	fma.rn.f64 	%fd290, %fd21, %fd209, 0d0000000000000000;
	add.f64 	%fd291, %fd277, %fd289;
	fma.rn.f64 	%fd292, %fd4, %fd213, 0d0000000000000000;
	fma.rn.f64 	%fd293, %fd22, %fd213, 0d0000000000000000;
	add.f64 	%fd294, %fd290, %fd293;
	add.f64 	%fd295, %fd281, %fd292;
	fma.rn.f64 	%fd296, %fd4, %fd218, 0d0000000000000000;
	fma.rn.f64 	%fd297, %fd23, %fd218, 0d0000000000000000;
	add.f64 	%fd298, %fd294, %fd297;
	add.f64 	%fd299, %fd285, %fd296;
	fma.rn.f64 	%fd300, %fd4, %fd223, 0d0000000000000000;
	fma.rn.f64 	%fd301, %fd24, %fd223, 0d0000000000000000;
	add.f64 	%fd302, %fd288, %fd300;
	fma.rn.f64 	%fd303, %fd3, %fd177, 0d0000000000000000;
	fma.rn.f64 	%fd304, %fd25, %fd177, 0d0000000000000000;
	fma.rn.f64 	%fd305, %fd3, %fd180, 0d0000000000000000;
	fma.rn.f64 	%fd306, %fd26, %fd180, 0d0000000000000000;
	add.f64 	%fd307, %fd304, %fd306;
	fma.rn.f64 	%fd308, %fd3, %fd184, 0d0000000000000000;
	fma.rn.f64 	%fd309, %fd27, %fd184, 0d0000000000000000;
	add.f64 	%fd310, %fd307, %fd309;
	fma.rn.f64 	%fd311, %fd3, %fd188, 0d0000000000000000;
	fma.rn.f64 	%fd312, %fd28, %fd188, 0d0000000000000000;
	fma.rn.f64 	%fd313, %fd2, %fd191, 0d0000000000000000;
	fma.rn.f64 	%fd314, %fd25, %fd191, 0d0000000000000000;
	add.f64 	%fd315, %fd303, %fd313;
	fma.rn.f64 	%fd316, %fd2, %fd195, 0d0000000000000000;
	fma.rn.f64 	%fd317, %fd26, %fd195, 0d0000000000000000;
	add.f64 	%fd318, %fd314, %fd317;
	add.f64 	%fd319, %fd305, %fd316;
	fma.rn.f64 	%fd320, %fd2, %fd200, 0d0000000000000000;
	fma.rn.f64 	%fd321, %fd27, %fd200, 0d0000000000000000;
	add.f64 	%fd322, %fd318, %fd321;
	add.f64 	%fd323, %fd308, %fd320;
	fma.rn.f64 	%fd324, %fd2, %fd205, 0d0000000000000000;
	fma.rn.f64 	%fd325, %fd28, %fd205, 0d0000000000000000;
	add.f64 	%fd326, %fd311, %fd324;
	fma.rn.f64 	%fd327, %fd1, %fd209, 0d0000000000000000;
	fma.rn.f64 	%fd328, %fd25, %fd209, 0d0000000000000000;
	add.f64 	%fd329, %fd315, %fd327;
	fma.rn.f64 	%fd330, %fd1, %fd213, 0d0000000000000000;
	fma.rn.f64 	%fd331, %fd26, %fd213, 0d0000000000000000;
	add.f64 	%fd332, %fd328, %fd331;
	add.f64 	%fd333, %fd319, %fd330;
	fma.rn.f64 	%fd334, %fd1, %fd218, 0d0000000000000000;
	fma.rn.f64 	%fd335, %fd27, %fd218, 0d0000000000000000;
	add.f64 	%fd336, %fd332, %fd335;
	add.f64 	%fd337, %fd323, %fd334;
	fma.rn.f64 	%fd338, %fd1, %fd223, 0d0000000000000000;
	fma.rn.f64 	%fd339, %fd28, %fd223, 0d0000000000000000;
	add.f64 	%fd340, %fd326, %fd338;
	add.f64 	%fd65, %fd340, 0d0000000000000000;
	add.f64 	%fd66, %fd337, 0d0000000000000000;
	add.f64 	%fd67, %fd333, 0d0000000000000000;
	add.f64 	%fd68, %fd329, 0d0000000000000000;
	add.f64 	%fd69, %fd302, 0d0000000000000000;
	add.f64 	%fd70, %fd299, 0d0000000000000000;
	add.f64 	%fd71, %fd295, 0d0000000000000000;
	add.f64 	%fd72, %fd291, 0d0000000000000000;
	add.f64 	%fd73, %fd264, 0d0000000000000000;
	add.f64 	%fd74, %fd261, 0d0000000000000000;
	add.f64 	%fd75, %fd257, 0d0000000000000000;
	add.f64 	%fd76, %fd253, 0d0000000000000000;
	add.f64 	%fd77, %fd226, 0d0000000000000000;
	add.f64 	%fd78, %fd222, 0d0000000000000000;
	add.f64 	%fd79, %fd217, 0d0000000000000000;
	add.f64 	%fd80, %fd212, 0d0000000000000000;
	add.f64 	%fd81, %fd336, %fd339;
	add.f64 	%fd82, %fd322, %fd325;
	add.f64 	%fd83, %fd310, %fd312;
	add.f64 	%fd84, %fd298, %fd301;
	add.f64 	%fd85, %fd284, %fd287;
	add.f64 	%fd86, %fd272, %fd274;
	add.f64 	%fd87, %fd260, %fd263;
	add.f64 	%fd88, %fd246, %fd249;
	add.f64 	%fd89, %fd234, %fd236;
	add.f64 	%fd90, %fd221, %fd225;
	add.f64 	%fd91, %fd203, %fd207;
	add.f64 	%fd92, %fd187, %fd190;
	setp.eq.s64 	%p14, %rd71, 0;
	@%p14 bra 	$L__BB9_21;

	mul.lo.s64 	%rd113, %rd45, %rd31;
	add.s64 	%rd97, %rd71, %rd113;
	// begin inline asm
	{ atom.add.f64 %fd341,[%rd97],%fd65; }

	// end inline asm
	add.s64 	%rd98, %rd97, 8;
	// begin inline asm
	{ atom.add.f64 %fd343,[%rd98],%fd66; }

	// end inline asm
	add.s64 	%rd99, %rd97, 16;
	// begin inline asm
	{ atom.add.f64 %fd345,[%rd99],%fd67; }

	// end inline asm
	add.s64 	%rd100, %rd97, 24;
	// begin inline asm
	{ atom.add.f64 %fd347,[%rd100],%fd68; }

	// end inline asm
	add.s64 	%rd101, %rd97, 32;
	// begin inline asm
	{ atom.add.f64 %fd349,[%rd101],%fd69; }

	// end inline asm
	add.s64 	%rd102, %rd97, 40;
	// begin inline asm
	{ atom.add.f64 %fd351,[%rd102],%fd70; }

	// end inline asm
	add.s64 	%rd103, %rd97, 48;
	// begin inline asm
	{ atom.add.f64 %fd353,[%rd103],%fd71; }

	// end inline asm
	add.s64 	%rd104, %rd97, 56;
	// begin inline asm
	{ atom.add.f64 %fd355,[%rd104],%fd72; }

	// end inline asm
	add.s64 	%rd105, %rd97, 64;
	// begin inline asm
	{ atom.add.f64 %fd357,[%rd105],%fd73; }

	// end inline asm
	add.s64 	%rd106, %rd97, 72;
	// begin inline asm
	{ atom.add.f64 %fd359,[%rd106],%fd74; }

	// end inline asm
	add.s64 	%rd107, %rd97, 80;
	// begin inline asm
	{ atom.add.f64 %fd361,[%rd107],%fd75; }

	// end inline asm
	add.s64 	%rd108, %rd97, 88;
	// begin inline asm
	{ atom.add.f64 %fd363,[%rd108],%fd76; }

	// end inline asm
	add.s64 	%rd109, %rd97, 96;
	// begin inline asm
	{ atom.add.f64 %fd365,[%rd109],%fd77; }

	// end inline asm
	add.s64 	%rd110, %rd97, 104;
	// begin inline asm
	{ atom.add.f64 %fd367,[%rd110],%fd78; }

	// end inline asm
	add.s64 	%rd111, %rd97, 112;
	// begin inline asm
	{ atom.add.f64 %fd369,[%rd111],%fd79; }

	// end inline asm
	add.s64 	%rd112, %rd97, 120;
	// begin inline asm
	{ atom.add.f64 %fd371,[%rd112],%fd80; }

	// end inline asm
	bra.uni 	$L__BB9_23;

$L__BB9_21:
	setp.eq.s64 	%p15, %rd58, 0;
	@%p15 bra 	$L__BB9_23;

	add.s64 	%rd114, %rd58, %rd48;
	// begin inline asm
	{ atom.add.f64 %fd373,[%rd114],%fd65; }

	// end inline asm
	add.s64 	%rd115, %rd114, 8;
	// begin inline asm
	{ atom.add.f64 %fd375,[%rd115],%fd66; }

	// end inline asm
	add.s64 	%rd116, %rd114, 16;
	// begin inline asm
	{ atom.add.f64 %fd377,[%rd116],%fd67; }

	// end inline asm
	add.s64 	%rd117, %rd114, 24;
	// begin inline asm
	{ atom.add.f64 %fd379,[%rd117],%fd68; }

	// end inline asm
	add.s64 	%rd118, %rd114, 32;
	// begin inline asm
	{ atom.add.f64 %fd381,[%rd118],%fd69; }

	// end inline asm
	add.s64 	%rd119, %rd114, 40;
	// begin inline asm
	{ atom.add.f64 %fd383,[%rd119],%fd70; }

	// end inline asm
	add.s64 	%rd120, %rd114, 48;
	// begin inline asm
	{ atom.add.f64 %fd385,[%rd120],%fd71; }

	// end inline asm
	add.s64 	%rd121, %rd114, 56;
	// begin inline asm
	{ atom.add.f64 %fd387,[%rd121],%fd72; }

	// end inline asm
	add.s64 	%rd122, %rd114, 64;
	// begin inline asm
	{ atom.add.f64 %fd389,[%rd122],%fd73; }

	// end inline asm
	add.s64 	%rd123, %rd114, 72;
	// begin inline asm
	{ atom.add.f64 %fd391,[%rd123],%fd74; }

	// end inline asm
	add.s64 	%rd124, %rd114, 80;
	// begin inline asm
	{ atom.add.f64 %fd393,[%rd124],%fd75; }

	// end inline asm
	add.s64 	%rd125, %rd114, 88;
	// begin inline asm
	{ atom.add.f64 %fd395,[%rd125],%fd76; }

	// end inline asm
	add.s64 	%rd126, %rd114, 96;
	// begin inline asm
	{ atom.add.f64 %fd397,[%rd126],%fd77; }

	// end inline asm
	add.s64 	%rd127, %rd114, 104;
	// begin inline asm
	{ atom.add.f64 %fd399,[%rd127],%fd78; }

	// end inline asm
	add.s64 	%rd128, %rd114, 112;
	// begin inline asm
	{ atom.add.f64 %fd401,[%rd128],%fd79; }

	// end inline asm
	add.s64 	%rd129, %rd114, 120;
	// begin inline asm
	{ atom.add.f64 %fd403,[%rd129],%fd80; }

	// end inline asm

$L__BB9_23:
	setp.eq.s64 	%p16, %rd69, 0;
	add.f64 	%fd93, %fd92, 0d0000000000000000;
	mov.f64 	%fd405, 0d0000000000000000;
	sub.f64 	%fd406, %fd405, %fd93;
	add.f64 	%fd94, %fd406, 0d0000000000000000;
	@%p16 bra 	$L__BB9_25;

	mul.lo.s64 	%rd142, %rd45, %rd32;
	add.s64 	%rd130, %rd69, %rd142;
	// begin inline asm
	{ atom.add.f64 %fd407,[%rd130],%fd405; }

	// end inline asm
	add.s64 	%rd131, %rd130, 8;
	// begin inline asm
	{ atom.add.f64 %fd409,[%rd131],%fd405; }

	// end inline asm
	add.s64 	%rd132, %rd130, 16;
	// begin inline asm
	{ atom.add.f64 %fd411,[%rd132],%fd405; }

	// end inline asm
	add.s64 	%rd133, %rd130, 24;
	// begin inline asm
	{ atom.add.f64 %fd413,[%rd133],%fd405; }

	// end inline asm
	add.s64 	%rd134, %rd130, 32;
	// begin inline asm
	{ atom.add.f64 %fd415,[%rd134],%fd405; }

	// end inline asm
	add.s64 	%rd135, %rd130, 40;
	// begin inline asm
	{ atom.add.f64 %fd417,[%rd135],%fd405; }

	// end inline asm
	add.s64 	%rd136, %rd130, 48;
	// begin inline asm
	{ atom.add.f64 %fd419,[%rd136],%fd405; }

	// end inline asm
	add.s64 	%rd137, %rd130, 56;
	// begin inline asm
	{ atom.add.f64 %fd421,[%rd137],%fd405; }

	// end inline asm
	add.s64 	%rd138, %rd130, 64;
	// begin inline asm
	{ atom.add.f64 %fd423,[%rd138],%fd405; }

	// end inline asm
	add.s64 	%rd139, %rd130, 72;
	// begin inline asm
	{ atom.add.f64 %fd425,[%rd139],%fd405; }

	// end inline asm
	add.s64 	%rd140, %rd130, 80;
	// begin inline asm
	{ atom.add.f64 %fd427,[%rd140],%fd405; }

	// end inline asm
	add.s64 	%rd141, %rd130, 88;
	// begin inline asm
	{ atom.add.f64 %fd429,[%rd141],%fd94; }

	// end inline asm
	bra.uni 	$L__BB9_27;

$L__BB9_25:
	setp.eq.s64 	%p17, %rd56, 0;
	@%p17 bra 	$L__BB9_27;

	add.s64 	%rd143, %rd56, %rd47;
	mov.f64 	%fd452, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd431,[%rd143],%fd452; }

	// end inline asm
	add.s64 	%rd144, %rd143, 8;
	// begin inline asm
	{ atom.add.f64 %fd433,[%rd144],%fd452; }

	// end inline asm
	add.s64 	%rd145, %rd143, 16;
	// begin inline asm
	{ atom.add.f64 %fd435,[%rd145],%fd452; }

	// end inline asm
	add.s64 	%rd146, %rd143, 24;
	// begin inline asm
	{ atom.add.f64 %fd437,[%rd146],%fd452; }

	// end inline asm
	add.s64 	%rd147, %rd143, 32;
	// begin inline asm
	{ atom.add.f64 %fd439,[%rd147],%fd452; }

	// end inline asm
	add.s64 	%rd148, %rd143, 40;
	// begin inline asm
	{ atom.add.f64 %fd441,[%rd148],%fd452; }

	// end inline asm
	add.s64 	%rd149, %rd143, 48;
	// begin inline asm
	{ atom.add.f64 %fd443,[%rd149],%fd452; }

	// end inline asm
	add.s64 	%rd150, %rd143, 56;
	// begin inline asm
	{ atom.add.f64 %fd445,[%rd150],%fd452; }

	// end inline asm
	add.s64 	%rd151, %rd143, 64;
	// begin inline asm
	{ atom.add.f64 %fd447,[%rd151],%fd452; }

	// end inline asm
	add.s64 	%rd152, %rd143, 72;
	// begin inline asm
	{ atom.add.f64 %fd449,[%rd152],%fd452; }

	// end inline asm
	add.s64 	%rd153, %rd143, 80;
	// begin inline asm
	{ atom.add.f64 %fd451,[%rd153],%fd452; }

	// end inline asm
	add.s64 	%rd154, %rd143, 88;
	// begin inline asm
	{ atom.add.f64 %fd453,[%rd154],%fd94; }

	// end inline asm

$L__BB9_27:
	setp.eq.s64 	%p18, %rd67, 0;
	@%p18 bra 	$L__BB9_29;

	mul.lo.s64 	%rd167, %rd45, %rd33;
	add.s64 	%rd155, %rd67, %rd167;
	mov.f64 	%fd476, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd455,[%rd155],%fd476; }

	// end inline asm
	add.s64 	%rd156, %rd155, 8;
	// begin inline asm
	{ atom.add.f64 %fd457,[%rd156],%fd476; }

	// end inline asm
	add.s64 	%rd157, %rd155, 16;
	// begin inline asm
	{ atom.add.f64 %fd459,[%rd157],%fd476; }

	// end inline asm
	add.s64 	%rd158, %rd155, 24;
	// begin inline asm
	{ atom.add.f64 %fd461,[%rd158],%fd476; }

	// end inline asm
	add.s64 	%rd159, %rd155, 32;
	// begin inline asm
	{ atom.add.f64 %fd463,[%rd159],%fd476; }

	// end inline asm
	add.s64 	%rd160, %rd155, 40;
	// begin inline asm
	{ atom.add.f64 %fd465,[%rd160],%fd476; }

	// end inline asm
	add.s64 	%rd161, %rd155, 48;
	// begin inline asm
	{ atom.add.f64 %fd467,[%rd161],%fd476; }

	// end inline asm
	add.s64 	%rd162, %rd155, 56;
	// begin inline asm
	{ atom.add.f64 %fd469,[%rd162],%fd476; }

	// end inline asm
	add.s64 	%rd163, %rd155, 64;
	// begin inline asm
	{ atom.add.f64 %fd471,[%rd163],%fd476; }

	// end inline asm
	add.s64 	%rd164, %rd155, 72;
	// begin inline asm
	{ atom.add.f64 %fd473,[%rd164],%fd476; }

	// end inline asm
	add.s64 	%rd165, %rd155, 80;
	// begin inline asm
	{ atom.add.f64 %fd475,[%rd165],%fd476; }

	// end inline asm
	add.s64 	%rd166, %rd155, 88;
	// begin inline asm
	{ atom.add.f64 %fd477,[%rd166],%fd93; }

	// end inline asm
	bra.uni 	$L__BB9_31;

$L__BB9_29:
	setp.eq.s64 	%p19, %rd54, 0;
	@%p19 bra 	$L__BB9_31;

	add.s64 	%rd168, %rd54, %rd46;
	mov.f64 	%fd500, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd479,[%rd168],%fd500; }

	// end inline asm
	add.s64 	%rd169, %rd168, 8;
	// begin inline asm
	{ atom.add.f64 %fd481,[%rd169],%fd500; }

	// end inline asm
	add.s64 	%rd170, %rd168, 16;
	// begin inline asm
	{ atom.add.f64 %fd483,[%rd170],%fd500; }

	// end inline asm
	add.s64 	%rd171, %rd168, 24;
	// begin inline asm
	{ atom.add.f64 %fd485,[%rd171],%fd500; }

	// end inline asm
	add.s64 	%rd172, %rd168, 32;
	// begin inline asm
	{ atom.add.f64 %fd487,[%rd172],%fd500; }

	// end inline asm
	add.s64 	%rd173, %rd168, 40;
	// begin inline asm
	{ atom.add.f64 %fd489,[%rd173],%fd500; }

	// end inline asm
	add.s64 	%rd174, %rd168, 48;
	// begin inline asm
	{ atom.add.f64 %fd491,[%rd174],%fd500; }

	// end inline asm
	add.s64 	%rd175, %rd168, 56;
	// begin inline asm
	{ atom.add.f64 %fd493,[%rd175],%fd500; }

	// end inline asm
	add.s64 	%rd176, %rd168, 64;
	// begin inline asm
	{ atom.add.f64 %fd495,[%rd176],%fd500; }

	// end inline asm
	add.s64 	%rd177, %rd168, 72;
	// begin inline asm
	{ atom.add.f64 %fd497,[%rd177],%fd500; }

	// end inline asm
	add.s64 	%rd178, %rd168, 80;
	// begin inline asm
	{ atom.add.f64 %fd499,[%rd178],%fd500; }

	// end inline asm
	add.s64 	%rd179, %rd168, 88;
	// begin inline asm
	{ atom.add.f64 %fd501,[%rd179],%fd93; }

	// end inline asm

$L__BB9_31:
	add.f64 	%fd95, %fd91, 0d0000000000000000;
	mov.f64 	%fd503, 0d0000000000000000;
	sub.f64 	%fd504, %fd503, %fd95;
	add.f64 	%fd96, %fd504, 0d0000000000000000;
	@%p16 bra 	$L__BB9_33;

	mul.lo.s64 	%rd192, %rd45, %rd32;
	add.s64 	%rd180, %rd69, %rd192;
	// begin inline asm
	{ atom.add.f64 %fd505,[%rd180],%fd503; }

	// end inline asm
	add.s64 	%rd181, %rd180, 8;
	// begin inline asm
	{ atom.add.f64 %fd507,[%rd181],%fd503; }

	// end inline asm
	add.s64 	%rd182, %rd180, 16;
	// begin inline asm
	{ atom.add.f64 %fd509,[%rd182],%fd503; }

	// end inline asm
	add.s64 	%rd183, %rd180, 24;
	// begin inline asm
	{ atom.add.f64 %fd511,[%rd183],%fd503; }

	// end inline asm
	add.s64 	%rd184, %rd180, 32;
	// begin inline asm
	{ atom.add.f64 %fd513,[%rd184],%fd503; }

	// end inline asm
	add.s64 	%rd185, %rd180, 40;
	// begin inline asm
	{ atom.add.f64 %fd515,[%rd185],%fd503; }

	// end inline asm
	add.s64 	%rd186, %rd180, 48;
	// begin inline asm
	{ atom.add.f64 %fd517,[%rd186],%fd503; }

	// end inline asm
	add.s64 	%rd187, %rd180, 56;
	// begin inline asm
	{ atom.add.f64 %fd519,[%rd187],%fd503; }

	// end inline asm
	add.s64 	%rd188, %rd180, 64;
	// begin inline asm
	{ atom.add.f64 %fd521,[%rd188],%fd503; }

	// end inline asm
	add.s64 	%rd189, %rd180, 72;
	// begin inline asm
	{ atom.add.f64 %fd523,[%rd189],%fd503; }

	// end inline asm
	add.s64 	%rd190, %rd180, 80;
	// begin inline asm
	{ atom.add.f64 %fd525,[%rd190],%fd96; }

	// end inline asm
	add.s64 	%rd191, %rd180, 88;
	// begin inline asm
	{ atom.add.f64 %fd527,[%rd191],%fd503; }

	// end inline asm
	bra.uni 	$L__BB9_35;

$L__BB9_33:
	setp.eq.s64 	%p21, %rd56, 0;
	@%p21 bra 	$L__BB9_35;

	add.s64 	%rd193, %rd56, %rd47;
	mov.f64 	%fd552, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd529,[%rd193],%fd552; }

	// end inline asm
	add.s64 	%rd194, %rd193, 8;
	// begin inline asm
	{ atom.add.f64 %fd531,[%rd194],%fd552; }

	// end inline asm
	add.s64 	%rd195, %rd193, 16;
	// begin inline asm
	{ atom.add.f64 %fd533,[%rd195],%fd552; }

	// end inline asm
	add.s64 	%rd196, %rd193, 24;
	// begin inline asm
	{ atom.add.f64 %fd535,[%rd196],%fd552; }

	// end inline asm
	add.s64 	%rd197, %rd193, 32;
	// begin inline asm
	{ atom.add.f64 %fd537,[%rd197],%fd552; }

	// end inline asm
	add.s64 	%rd198, %rd193, 40;
	// begin inline asm
	{ atom.add.f64 %fd539,[%rd198],%fd552; }

	// end inline asm
	add.s64 	%rd199, %rd193, 48;
	// begin inline asm
	{ atom.add.f64 %fd541,[%rd199],%fd552; }

	// end inline asm
	add.s64 	%rd200, %rd193, 56;
	// begin inline asm
	{ atom.add.f64 %fd543,[%rd200],%fd552; }

	// end inline asm
	add.s64 	%rd201, %rd193, 64;
	// begin inline asm
	{ atom.add.f64 %fd545,[%rd201],%fd552; }

	// end inline asm
	add.s64 	%rd202, %rd193, 72;
	// begin inline asm
	{ atom.add.f64 %fd547,[%rd202],%fd552; }

	// end inline asm
	add.s64 	%rd203, %rd193, 80;
	// begin inline asm
	{ atom.add.f64 %fd549,[%rd203],%fd96; }

	// end inline asm
	add.s64 	%rd204, %rd193, 88;
	// begin inline asm
	{ atom.add.f64 %fd551,[%rd204],%fd552; }

	// end inline asm

$L__BB9_35:
	@%p18 bra 	$L__BB9_37;

	mul.lo.s64 	%rd217, %rd45, %rd33;
	add.s64 	%rd205, %rd67, %rd217;
	mov.f64 	%fd576, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd553,[%rd205],%fd576; }

	// end inline asm
	add.s64 	%rd206, %rd205, 8;
	// begin inline asm
	{ atom.add.f64 %fd555,[%rd206],%fd576; }

	// end inline asm
	add.s64 	%rd207, %rd205, 16;
	// begin inline asm
	{ atom.add.f64 %fd557,[%rd207],%fd576; }

	// end inline asm
	add.s64 	%rd208, %rd205, 24;
	// begin inline asm
	{ atom.add.f64 %fd559,[%rd208],%fd576; }

	// end inline asm
	add.s64 	%rd209, %rd205, 32;
	// begin inline asm
	{ atom.add.f64 %fd561,[%rd209],%fd576; }

	// end inline asm
	add.s64 	%rd210, %rd205, 40;
	// begin inline asm
	{ atom.add.f64 %fd563,[%rd210],%fd576; }

	// end inline asm
	add.s64 	%rd211, %rd205, 48;
	// begin inline asm
	{ atom.add.f64 %fd565,[%rd211],%fd576; }

	// end inline asm
	add.s64 	%rd212, %rd205, 56;
	// begin inline asm
	{ atom.add.f64 %fd567,[%rd212],%fd576; }

	// end inline asm
	add.s64 	%rd213, %rd205, 64;
	// begin inline asm
	{ atom.add.f64 %fd569,[%rd213],%fd576; }

	// end inline asm
	add.s64 	%rd214, %rd205, 72;
	// begin inline asm
	{ atom.add.f64 %fd571,[%rd214],%fd576; }

	// end inline asm
	add.s64 	%rd215, %rd205, 80;
	// begin inline asm
	{ atom.add.f64 %fd573,[%rd215],%fd95; }

	// end inline asm
	add.s64 	%rd216, %rd205, 88;
	// begin inline asm
	{ atom.add.f64 %fd575,[%rd216],%fd576; }

	// end inline asm
	bra.uni 	$L__BB9_39;

$L__BB9_37:
	setp.eq.s64 	%p23, %rd54, 0;
	@%p23 bra 	$L__BB9_39;

	add.s64 	%rd218, %rd54, %rd46;
	mov.f64 	%fd600, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd577,[%rd218],%fd600; }

	// end inline asm
	add.s64 	%rd219, %rd218, 8;
	// begin inline asm
	{ atom.add.f64 %fd579,[%rd219],%fd600; }

	// end inline asm
	add.s64 	%rd220, %rd218, 16;
	// begin inline asm
	{ atom.add.f64 %fd581,[%rd220],%fd600; }

	// end inline asm
	add.s64 	%rd221, %rd218, 24;
	// begin inline asm
	{ atom.add.f64 %fd583,[%rd221],%fd600; }

	// end inline asm
	add.s64 	%rd222, %rd218, 32;
	// begin inline asm
	{ atom.add.f64 %fd585,[%rd222],%fd600; }

	// end inline asm
	add.s64 	%rd223, %rd218, 40;
	// begin inline asm
	{ atom.add.f64 %fd587,[%rd223],%fd600; }

	// end inline asm
	add.s64 	%rd224, %rd218, 48;
	// begin inline asm
	{ atom.add.f64 %fd589,[%rd224],%fd600; }

	// end inline asm
	add.s64 	%rd225, %rd218, 56;
	// begin inline asm
	{ atom.add.f64 %fd591,[%rd225],%fd600; }

	// end inline asm
	add.s64 	%rd226, %rd218, 64;
	// begin inline asm
	{ atom.add.f64 %fd593,[%rd226],%fd600; }

	// end inline asm
	add.s64 	%rd227, %rd218, 72;
	// begin inline asm
	{ atom.add.f64 %fd595,[%rd227],%fd600; }

	// end inline asm
	add.s64 	%rd228, %rd218, 80;
	// begin inline asm
	{ atom.add.f64 %fd597,[%rd228],%fd95; }

	// end inline asm
	add.s64 	%rd229, %rd218, 88;
	// begin inline asm
	{ atom.add.f64 %fd599,[%rd229],%fd600; }

	// end inline asm

$L__BB9_39:
	add.f64 	%fd97, %fd90, 0d0000000000000000;
	mov.f64 	%fd601, 0d0000000000000000;
	sub.f64 	%fd602, %fd601, %fd97;
	add.f64 	%fd98, %fd602, 0d0000000000000000;
	@%p16 bra 	$L__BB9_41;

	mul.lo.s64 	%rd242, %rd45, %rd32;
	add.s64 	%rd230, %rd69, %rd242;
	// begin inline asm
	{ atom.add.f64 %fd603,[%rd230],%fd601; }

	// end inline asm
	add.s64 	%rd231, %rd230, 8;
	// begin inline asm
	{ atom.add.f64 %fd605,[%rd231],%fd601; }

	// end inline asm
	add.s64 	%rd232, %rd230, 16;
	// begin inline asm
	{ atom.add.f64 %fd607,[%rd232],%fd601; }

	// end inline asm
	add.s64 	%rd233, %rd230, 24;
	// begin inline asm
	{ atom.add.f64 %fd609,[%rd233],%fd601; }

	// end inline asm
	add.s64 	%rd234, %rd230, 32;
	// begin inline asm
	{ atom.add.f64 %fd611,[%rd234],%fd601; }

	// end inline asm
	add.s64 	%rd235, %rd230, 40;
	// begin inline asm
	{ atom.add.f64 %fd613,[%rd235],%fd601; }

	// end inline asm
	add.s64 	%rd236, %rd230, 48;
	// begin inline asm
	{ atom.add.f64 %fd615,[%rd236],%fd601; }

	// end inline asm
	add.s64 	%rd237, %rd230, 56;
	// begin inline asm
	{ atom.add.f64 %fd617,[%rd237],%fd601; }

	// end inline asm
	add.s64 	%rd238, %rd230, 64;
	// begin inline asm
	{ atom.add.f64 %fd619,[%rd238],%fd601; }

	// end inline asm
	add.s64 	%rd239, %rd230, 72;
	// begin inline asm
	{ atom.add.f64 %fd621,[%rd239],%fd98; }

	// end inline asm
	add.s64 	%rd240, %rd230, 80;
	// begin inline asm
	{ atom.add.f64 %fd623,[%rd240],%fd601; }

	// end inline asm
	add.s64 	%rd241, %rd230, 88;
	// begin inline asm
	{ atom.add.f64 %fd625,[%rd241],%fd601; }

	// end inline asm
	bra.uni 	$L__BB9_43;

$L__BB9_41:
	setp.eq.s64 	%p25, %rd56, 0;
	@%p25 bra 	$L__BB9_43;

	add.s64 	%rd243, %rd56, %rd47;
	mov.f64 	%fd650, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd627,[%rd243],%fd650; }

	// end inline asm
	add.s64 	%rd244, %rd243, 8;
	// begin inline asm
	{ atom.add.f64 %fd629,[%rd244],%fd650; }

	// end inline asm
	add.s64 	%rd245, %rd243, 16;
	// begin inline asm
	{ atom.add.f64 %fd631,[%rd245],%fd650; }

	// end inline asm
	add.s64 	%rd246, %rd243, 24;
	// begin inline asm
	{ atom.add.f64 %fd633,[%rd246],%fd650; }

	// end inline asm
	add.s64 	%rd247, %rd243, 32;
	// begin inline asm
	{ atom.add.f64 %fd635,[%rd247],%fd650; }

	// end inline asm
	add.s64 	%rd248, %rd243, 40;
	// begin inline asm
	{ atom.add.f64 %fd637,[%rd248],%fd650; }

	// end inline asm
	add.s64 	%rd249, %rd243, 48;
	// begin inline asm
	{ atom.add.f64 %fd639,[%rd249],%fd650; }

	// end inline asm
	add.s64 	%rd250, %rd243, 56;
	// begin inline asm
	{ atom.add.f64 %fd641,[%rd250],%fd650; }

	// end inline asm
	add.s64 	%rd251, %rd243, 64;
	// begin inline asm
	{ atom.add.f64 %fd643,[%rd251],%fd650; }

	// end inline asm
	add.s64 	%rd252, %rd243, 72;
	// begin inline asm
	{ atom.add.f64 %fd645,[%rd252],%fd98; }

	// end inline asm
	add.s64 	%rd253, %rd243, 80;
	// begin inline asm
	{ atom.add.f64 %fd647,[%rd253],%fd650; }

	// end inline asm
	add.s64 	%rd254, %rd243, 88;
	// begin inline asm
	{ atom.add.f64 %fd649,[%rd254],%fd650; }

	// end inline asm

$L__BB9_43:
	@%p18 bra 	$L__BB9_45;

	mul.lo.s64 	%rd267, %rd45, %rd33;
	add.s64 	%rd255, %rd67, %rd267;
	mov.f64 	%fd674, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd651,[%rd255],%fd674; }

	// end inline asm
	add.s64 	%rd256, %rd255, 8;
	// begin inline asm
	{ atom.add.f64 %fd653,[%rd256],%fd674; }

	// end inline asm
	add.s64 	%rd257, %rd255, 16;
	// begin inline asm
	{ atom.add.f64 %fd655,[%rd257],%fd674; }

	// end inline asm
	add.s64 	%rd258, %rd255, 24;
	// begin inline asm
	{ atom.add.f64 %fd657,[%rd258],%fd674; }

	// end inline asm
	add.s64 	%rd259, %rd255, 32;
	// begin inline asm
	{ atom.add.f64 %fd659,[%rd259],%fd674; }

	// end inline asm
	add.s64 	%rd260, %rd255, 40;
	// begin inline asm
	{ atom.add.f64 %fd661,[%rd260],%fd674; }

	// end inline asm
	add.s64 	%rd261, %rd255, 48;
	// begin inline asm
	{ atom.add.f64 %fd663,[%rd261],%fd674; }

	// end inline asm
	add.s64 	%rd262, %rd255, 56;
	// begin inline asm
	{ atom.add.f64 %fd665,[%rd262],%fd674; }

	// end inline asm
	add.s64 	%rd263, %rd255, 64;
	// begin inline asm
	{ atom.add.f64 %fd667,[%rd263],%fd674; }

	// end inline asm
	add.s64 	%rd264, %rd255, 72;
	// begin inline asm
	{ atom.add.f64 %fd669,[%rd264],%fd97; }

	// end inline asm
	add.s64 	%rd265, %rd255, 80;
	// begin inline asm
	{ atom.add.f64 %fd671,[%rd265],%fd674; }

	// end inline asm
	add.s64 	%rd266, %rd255, 88;
	// begin inline asm
	{ atom.add.f64 %fd673,[%rd266],%fd674; }

	// end inline asm
	bra.uni 	$L__BB9_47;

$L__BB9_45:
	setp.eq.s64 	%p27, %rd54, 0;
	@%p27 bra 	$L__BB9_47;

	add.s64 	%rd268, %rd54, %rd46;
	mov.f64 	%fd698, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd675,[%rd268],%fd698; }

	// end inline asm
	add.s64 	%rd269, %rd268, 8;
	// begin inline asm
	{ atom.add.f64 %fd677,[%rd269],%fd698; }

	// end inline asm
	add.s64 	%rd270, %rd268, 16;
	// begin inline asm
	{ atom.add.f64 %fd679,[%rd270],%fd698; }

	// end inline asm
	add.s64 	%rd271, %rd268, 24;
	// begin inline asm
	{ atom.add.f64 %fd681,[%rd271],%fd698; }

	// end inline asm
	add.s64 	%rd272, %rd268, 32;
	// begin inline asm
	{ atom.add.f64 %fd683,[%rd272],%fd698; }

	// end inline asm
	add.s64 	%rd273, %rd268, 40;
	// begin inline asm
	{ atom.add.f64 %fd685,[%rd273],%fd698; }

	// end inline asm
	add.s64 	%rd274, %rd268, 48;
	// begin inline asm
	{ atom.add.f64 %fd687,[%rd274],%fd698; }

	// end inline asm
	add.s64 	%rd275, %rd268, 56;
	// begin inline asm
	{ atom.add.f64 %fd689,[%rd275],%fd698; }

	// end inline asm
	add.s64 	%rd276, %rd268, 64;
	// begin inline asm
	{ atom.add.f64 %fd691,[%rd276],%fd698; }

	// end inline asm
	add.s64 	%rd277, %rd268, 72;
	// begin inline asm
	{ atom.add.f64 %fd693,[%rd277],%fd97; }

	// end inline asm
	add.s64 	%rd278, %rd268, 80;
	// begin inline asm
	{ atom.add.f64 %fd695,[%rd278],%fd698; }

	// end inline asm
	add.s64 	%rd279, %rd268, 88;
	// begin inline asm
	{ atom.add.f64 %fd697,[%rd279],%fd698; }

	// end inline asm

$L__BB9_47:
	add.f64 	%fd99, %fd89, 0d0000000000000000;
	mov.f64 	%fd699, 0d0000000000000000;
	sub.f64 	%fd700, %fd699, %fd99;
	add.f64 	%fd100, %fd700, 0d0000000000000000;
	@%p16 bra 	$L__BB9_49;

	mul.lo.s64 	%rd292, %rd45, %rd32;
	add.s64 	%rd280, %rd69, %rd292;
	// begin inline asm
	{ atom.add.f64 %fd701,[%rd280],%fd699; }

	// end inline asm
	add.s64 	%rd281, %rd280, 8;
	// begin inline asm
	{ atom.add.f64 %fd703,[%rd281],%fd699; }

	// end inline asm
	add.s64 	%rd282, %rd280, 16;
	// begin inline asm
	{ atom.add.f64 %fd705,[%rd282],%fd699; }

	// end inline asm
	add.s64 	%rd283, %rd280, 24;
	// begin inline asm
	{ atom.add.f64 %fd707,[%rd283],%fd699; }

	// end inline asm
	add.s64 	%rd284, %rd280, 32;
	// begin inline asm
	{ atom.add.f64 %fd709,[%rd284],%fd699; }

	// end inline asm
	add.s64 	%rd285, %rd280, 40;
	// begin inline asm
	{ atom.add.f64 %fd711,[%rd285],%fd699; }

	// end inline asm
	add.s64 	%rd286, %rd280, 48;
	// begin inline asm
	{ atom.add.f64 %fd713,[%rd286],%fd699; }

	// end inline asm
	add.s64 	%rd287, %rd280, 56;
	// begin inline asm
	{ atom.add.f64 %fd715,[%rd287],%fd699; }

	// end inline asm
	add.s64 	%rd288, %rd280, 64;
	// begin inline asm
	{ atom.add.f64 %fd717,[%rd288],%fd100; }

	// end inline asm
	add.s64 	%rd289, %rd280, 72;
	// begin inline asm
	{ atom.add.f64 %fd719,[%rd289],%fd699; }

	// end inline asm
	add.s64 	%rd290, %rd280, 80;
	// begin inline asm
	{ atom.add.f64 %fd721,[%rd290],%fd699; }

	// end inline asm
	add.s64 	%rd291, %rd280, 88;
	// begin inline asm
	{ atom.add.f64 %fd723,[%rd291],%fd699; }

	// end inline asm
	bra.uni 	$L__BB9_51;

$L__BB9_49:
	setp.eq.s64 	%p29, %rd56, 0;
	@%p29 bra 	$L__BB9_51;

	add.s64 	%rd293, %rd56, %rd47;
	mov.f64 	%fd748, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd725,[%rd293],%fd748; }

	// end inline asm
	add.s64 	%rd294, %rd293, 8;
	// begin inline asm
	{ atom.add.f64 %fd727,[%rd294],%fd748; }

	// end inline asm
	add.s64 	%rd295, %rd293, 16;
	// begin inline asm
	{ atom.add.f64 %fd729,[%rd295],%fd748; }

	// end inline asm
	add.s64 	%rd296, %rd293, 24;
	// begin inline asm
	{ atom.add.f64 %fd731,[%rd296],%fd748; }

	// end inline asm
	add.s64 	%rd297, %rd293, 32;
	// begin inline asm
	{ atom.add.f64 %fd733,[%rd297],%fd748; }

	// end inline asm
	add.s64 	%rd298, %rd293, 40;
	// begin inline asm
	{ atom.add.f64 %fd735,[%rd298],%fd748; }

	// end inline asm
	add.s64 	%rd299, %rd293, 48;
	// begin inline asm
	{ atom.add.f64 %fd737,[%rd299],%fd748; }

	// end inline asm
	add.s64 	%rd300, %rd293, 56;
	// begin inline asm
	{ atom.add.f64 %fd739,[%rd300],%fd748; }

	// end inline asm
	add.s64 	%rd301, %rd293, 64;
	// begin inline asm
	{ atom.add.f64 %fd741,[%rd301],%fd100; }

	// end inline asm
	add.s64 	%rd302, %rd293, 72;
	// begin inline asm
	{ atom.add.f64 %fd743,[%rd302],%fd748; }

	// end inline asm
	add.s64 	%rd303, %rd293, 80;
	// begin inline asm
	{ atom.add.f64 %fd745,[%rd303],%fd748; }

	// end inline asm
	add.s64 	%rd304, %rd293, 88;
	// begin inline asm
	{ atom.add.f64 %fd747,[%rd304],%fd748; }

	// end inline asm

$L__BB9_51:
	@%p18 bra 	$L__BB9_53;

	mul.lo.s64 	%rd317, %rd45, %rd33;
	add.s64 	%rd305, %rd67, %rd317;
	mov.f64 	%fd772, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd749,[%rd305],%fd772; }

	// end inline asm
	add.s64 	%rd306, %rd305, 8;
	// begin inline asm
	{ atom.add.f64 %fd751,[%rd306],%fd772; }

	// end inline asm
	add.s64 	%rd307, %rd305, 16;
	// begin inline asm
	{ atom.add.f64 %fd753,[%rd307],%fd772; }

	// end inline asm
	add.s64 	%rd308, %rd305, 24;
	// begin inline asm
	{ atom.add.f64 %fd755,[%rd308],%fd772; }

	// end inline asm
	add.s64 	%rd309, %rd305, 32;
	// begin inline asm
	{ atom.add.f64 %fd757,[%rd309],%fd772; }

	// end inline asm
	add.s64 	%rd310, %rd305, 40;
	// begin inline asm
	{ atom.add.f64 %fd759,[%rd310],%fd772; }

	// end inline asm
	add.s64 	%rd311, %rd305, 48;
	// begin inline asm
	{ atom.add.f64 %fd761,[%rd311],%fd772; }

	// end inline asm
	add.s64 	%rd312, %rd305, 56;
	// begin inline asm
	{ atom.add.f64 %fd763,[%rd312],%fd772; }

	// end inline asm
	add.s64 	%rd313, %rd305, 64;
	// begin inline asm
	{ atom.add.f64 %fd765,[%rd313],%fd99; }

	// end inline asm
	add.s64 	%rd314, %rd305, 72;
	// begin inline asm
	{ atom.add.f64 %fd767,[%rd314],%fd772; }

	// end inline asm
	add.s64 	%rd315, %rd305, 80;
	// begin inline asm
	{ atom.add.f64 %fd769,[%rd315],%fd772; }

	// end inline asm
	add.s64 	%rd316, %rd305, 88;
	// begin inline asm
	{ atom.add.f64 %fd771,[%rd316],%fd772; }

	// end inline asm
	bra.uni 	$L__BB9_55;

$L__BB9_53:
	setp.eq.s64 	%p31, %rd54, 0;
	@%p31 bra 	$L__BB9_55;

	add.s64 	%rd318, %rd54, %rd46;
	mov.f64 	%fd796, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd773,[%rd318],%fd796; }

	// end inline asm
	add.s64 	%rd319, %rd318, 8;
	// begin inline asm
	{ atom.add.f64 %fd775,[%rd319],%fd796; }

	// end inline asm
	add.s64 	%rd320, %rd318, 16;
	// begin inline asm
	{ atom.add.f64 %fd777,[%rd320],%fd796; }

	// end inline asm
	add.s64 	%rd321, %rd318, 24;
	// begin inline asm
	{ atom.add.f64 %fd779,[%rd321],%fd796; }

	// end inline asm
	add.s64 	%rd322, %rd318, 32;
	// begin inline asm
	{ atom.add.f64 %fd781,[%rd322],%fd796; }

	// end inline asm
	add.s64 	%rd323, %rd318, 40;
	// begin inline asm
	{ atom.add.f64 %fd783,[%rd323],%fd796; }

	// end inline asm
	add.s64 	%rd324, %rd318, 48;
	// begin inline asm
	{ atom.add.f64 %fd785,[%rd324],%fd796; }

	// end inline asm
	add.s64 	%rd325, %rd318, 56;
	// begin inline asm
	{ atom.add.f64 %fd787,[%rd325],%fd796; }

	// end inline asm
	add.s64 	%rd326, %rd318, 64;
	// begin inline asm
	{ atom.add.f64 %fd789,[%rd326],%fd99; }

	// end inline asm
	add.s64 	%rd327, %rd318, 72;
	// begin inline asm
	{ atom.add.f64 %fd791,[%rd327],%fd796; }

	// end inline asm
	add.s64 	%rd328, %rd318, 80;
	// begin inline asm
	{ atom.add.f64 %fd793,[%rd328],%fd796; }

	// end inline asm
	add.s64 	%rd329, %rd318, 88;
	// begin inline asm
	{ atom.add.f64 %fd795,[%rd329],%fd796; }

	// end inline asm

$L__BB9_55:
	add.f64 	%fd101, %fd88, 0d0000000000000000;
	mov.f64 	%fd797, 0d0000000000000000;
	sub.f64 	%fd798, %fd797, %fd101;
	add.f64 	%fd102, %fd798, 0d0000000000000000;
	@%p16 bra 	$L__BB9_57;

	mul.lo.s64 	%rd342, %rd45, %rd32;
	add.s64 	%rd330, %rd69, %rd342;
	// begin inline asm
	{ atom.add.f64 %fd799,[%rd330],%fd797; }

	// end inline asm
	add.s64 	%rd331, %rd330, 8;
	// begin inline asm
	{ atom.add.f64 %fd801,[%rd331],%fd797; }

	// end inline asm
	add.s64 	%rd332, %rd330, 16;
	// begin inline asm
	{ atom.add.f64 %fd803,[%rd332],%fd797; }

	// end inline asm
	add.s64 	%rd333, %rd330, 24;
	// begin inline asm
	{ atom.add.f64 %fd805,[%rd333],%fd797; }

	// end inline asm
	add.s64 	%rd334, %rd330, 32;
	// begin inline asm
	{ atom.add.f64 %fd807,[%rd334],%fd797; }

	// end inline asm
	add.s64 	%rd335, %rd330, 40;
	// begin inline asm
	{ atom.add.f64 %fd809,[%rd335],%fd797; }

	// end inline asm
	add.s64 	%rd336, %rd330, 48;
	// begin inline asm
	{ atom.add.f64 %fd811,[%rd336],%fd797; }

	// end inline asm
	add.s64 	%rd337, %rd330, 56;
	// begin inline asm
	{ atom.add.f64 %fd813,[%rd337],%fd102; }

	// end inline asm
	add.s64 	%rd338, %rd330, 64;
	// begin inline asm
	{ atom.add.f64 %fd815,[%rd338],%fd797; }

	// end inline asm
	add.s64 	%rd339, %rd330, 72;
	// begin inline asm
	{ atom.add.f64 %fd817,[%rd339],%fd797; }

	// end inline asm
	add.s64 	%rd340, %rd330, 80;
	// begin inline asm
	{ atom.add.f64 %fd819,[%rd340],%fd797; }

	// end inline asm
	add.s64 	%rd341, %rd330, 88;
	// begin inline asm
	{ atom.add.f64 %fd821,[%rd341],%fd797; }

	// end inline asm
	bra.uni 	$L__BB9_59;

$L__BB9_57:
	setp.eq.s64 	%p33, %rd56, 0;
	@%p33 bra 	$L__BB9_59;

	add.s64 	%rd343, %rd56, %rd47;
	mov.f64 	%fd846, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd823,[%rd343],%fd846; }

	// end inline asm
	add.s64 	%rd344, %rd343, 8;
	// begin inline asm
	{ atom.add.f64 %fd825,[%rd344],%fd846; }

	// end inline asm
	add.s64 	%rd345, %rd343, 16;
	// begin inline asm
	{ atom.add.f64 %fd827,[%rd345],%fd846; }

	// end inline asm
	add.s64 	%rd346, %rd343, 24;
	// begin inline asm
	{ atom.add.f64 %fd829,[%rd346],%fd846; }

	// end inline asm
	add.s64 	%rd347, %rd343, 32;
	// begin inline asm
	{ atom.add.f64 %fd831,[%rd347],%fd846; }

	// end inline asm
	add.s64 	%rd348, %rd343, 40;
	// begin inline asm
	{ atom.add.f64 %fd833,[%rd348],%fd846; }

	// end inline asm
	add.s64 	%rd349, %rd343, 48;
	// begin inline asm
	{ atom.add.f64 %fd835,[%rd349],%fd846; }

	// end inline asm
	add.s64 	%rd350, %rd343, 56;
	// begin inline asm
	{ atom.add.f64 %fd837,[%rd350],%fd102; }

	// end inline asm
	add.s64 	%rd351, %rd343, 64;
	// begin inline asm
	{ atom.add.f64 %fd839,[%rd351],%fd846; }

	// end inline asm
	add.s64 	%rd352, %rd343, 72;
	// begin inline asm
	{ atom.add.f64 %fd841,[%rd352],%fd846; }

	// end inline asm
	add.s64 	%rd353, %rd343, 80;
	// begin inline asm
	{ atom.add.f64 %fd843,[%rd353],%fd846; }

	// end inline asm
	add.s64 	%rd354, %rd343, 88;
	// begin inline asm
	{ atom.add.f64 %fd845,[%rd354],%fd846; }

	// end inline asm

$L__BB9_59:
	@%p18 bra 	$L__BB9_61;

	mul.lo.s64 	%rd367, %rd45, %rd33;
	add.s64 	%rd355, %rd67, %rd367;
	mov.f64 	%fd870, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd847,[%rd355],%fd870; }

	// end inline asm
	add.s64 	%rd356, %rd355, 8;
	// begin inline asm
	{ atom.add.f64 %fd849,[%rd356],%fd870; }

	// end inline asm
	add.s64 	%rd357, %rd355, 16;
	// begin inline asm
	{ atom.add.f64 %fd851,[%rd357],%fd870; }

	// end inline asm
	add.s64 	%rd358, %rd355, 24;
	// begin inline asm
	{ atom.add.f64 %fd853,[%rd358],%fd870; }

	// end inline asm
	add.s64 	%rd359, %rd355, 32;
	// begin inline asm
	{ atom.add.f64 %fd855,[%rd359],%fd870; }

	// end inline asm
	add.s64 	%rd360, %rd355, 40;
	// begin inline asm
	{ atom.add.f64 %fd857,[%rd360],%fd870; }

	// end inline asm
	add.s64 	%rd361, %rd355, 48;
	// begin inline asm
	{ atom.add.f64 %fd859,[%rd361],%fd870; }

	// end inline asm
	add.s64 	%rd362, %rd355, 56;
	// begin inline asm
	{ atom.add.f64 %fd861,[%rd362],%fd101; }

	// end inline asm
	add.s64 	%rd363, %rd355, 64;
	// begin inline asm
	{ atom.add.f64 %fd863,[%rd363],%fd870; }

	// end inline asm
	add.s64 	%rd364, %rd355, 72;
	// begin inline asm
	{ atom.add.f64 %fd865,[%rd364],%fd870; }

	// end inline asm
	add.s64 	%rd365, %rd355, 80;
	// begin inline asm
	{ atom.add.f64 %fd867,[%rd365],%fd870; }

	// end inline asm
	add.s64 	%rd366, %rd355, 88;
	// begin inline asm
	{ atom.add.f64 %fd869,[%rd366],%fd870; }

	// end inline asm
	bra.uni 	$L__BB9_63;

$L__BB9_61:
	setp.eq.s64 	%p35, %rd54, 0;
	@%p35 bra 	$L__BB9_63;

	add.s64 	%rd368, %rd54, %rd46;
	mov.f64 	%fd894, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd871,[%rd368],%fd894; }

	// end inline asm
	add.s64 	%rd369, %rd368, 8;
	// begin inline asm
	{ atom.add.f64 %fd873,[%rd369],%fd894; }

	// end inline asm
	add.s64 	%rd370, %rd368, 16;
	// begin inline asm
	{ atom.add.f64 %fd875,[%rd370],%fd894; }

	// end inline asm
	add.s64 	%rd371, %rd368, 24;
	// begin inline asm
	{ atom.add.f64 %fd877,[%rd371],%fd894; }

	// end inline asm
	add.s64 	%rd372, %rd368, 32;
	// begin inline asm
	{ atom.add.f64 %fd879,[%rd372],%fd894; }

	// end inline asm
	add.s64 	%rd373, %rd368, 40;
	// begin inline asm
	{ atom.add.f64 %fd881,[%rd373],%fd894; }

	// end inline asm
	add.s64 	%rd374, %rd368, 48;
	// begin inline asm
	{ atom.add.f64 %fd883,[%rd374],%fd894; }

	// end inline asm
	add.s64 	%rd375, %rd368, 56;
	// begin inline asm
	{ atom.add.f64 %fd885,[%rd375],%fd101; }

	// end inline asm
	add.s64 	%rd376, %rd368, 64;
	// begin inline asm
	{ atom.add.f64 %fd887,[%rd376],%fd894; }

	// end inline asm
	add.s64 	%rd377, %rd368, 72;
	// begin inline asm
	{ atom.add.f64 %fd889,[%rd377],%fd894; }

	// end inline asm
	add.s64 	%rd378, %rd368, 80;
	// begin inline asm
	{ atom.add.f64 %fd891,[%rd378],%fd894; }

	// end inline asm
	add.s64 	%rd379, %rd368, 88;
	// begin inline asm
	{ atom.add.f64 %fd893,[%rd379],%fd894; }

	// end inline asm

$L__BB9_63:
	add.f64 	%fd103, %fd87, 0d0000000000000000;
	mov.f64 	%fd895, 0d0000000000000000;
	sub.f64 	%fd896, %fd895, %fd103;
	add.f64 	%fd104, %fd896, 0d0000000000000000;
	@%p16 bra 	$L__BB9_65;

	mul.lo.s64 	%rd392, %rd45, %rd32;
	add.s64 	%rd380, %rd69, %rd392;
	// begin inline asm
	{ atom.add.f64 %fd897,[%rd380],%fd895; }

	// end inline asm
	add.s64 	%rd381, %rd380, 8;
	// begin inline asm
	{ atom.add.f64 %fd899,[%rd381],%fd895; }

	// end inline asm
	add.s64 	%rd382, %rd380, 16;
	// begin inline asm
	{ atom.add.f64 %fd901,[%rd382],%fd895; }

	// end inline asm
	add.s64 	%rd383, %rd380, 24;
	// begin inline asm
	{ atom.add.f64 %fd903,[%rd383],%fd895; }

	// end inline asm
	add.s64 	%rd384, %rd380, 32;
	// begin inline asm
	{ atom.add.f64 %fd905,[%rd384],%fd895; }

	// end inline asm
	add.s64 	%rd385, %rd380, 40;
	// begin inline asm
	{ atom.add.f64 %fd907,[%rd385],%fd895; }

	// end inline asm
	add.s64 	%rd386, %rd380, 48;
	// begin inline asm
	{ atom.add.f64 %fd909,[%rd386],%fd104; }

	// end inline asm
	add.s64 	%rd387, %rd380, 56;
	// begin inline asm
	{ atom.add.f64 %fd911,[%rd387],%fd895; }

	// end inline asm
	add.s64 	%rd388, %rd380, 64;
	// begin inline asm
	{ atom.add.f64 %fd913,[%rd388],%fd895; }

	// end inline asm
	add.s64 	%rd389, %rd380, 72;
	// begin inline asm
	{ atom.add.f64 %fd915,[%rd389],%fd895; }

	// end inline asm
	add.s64 	%rd390, %rd380, 80;
	// begin inline asm
	{ atom.add.f64 %fd917,[%rd390],%fd895; }

	// end inline asm
	add.s64 	%rd391, %rd380, 88;
	// begin inline asm
	{ atom.add.f64 %fd919,[%rd391],%fd895; }

	// end inline asm
	bra.uni 	$L__BB9_67;

$L__BB9_65:
	setp.eq.s64 	%p37, %rd56, 0;
	@%p37 bra 	$L__BB9_67;

	add.s64 	%rd393, %rd56, %rd47;
	mov.f64 	%fd944, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd921,[%rd393],%fd944; }

	// end inline asm
	add.s64 	%rd394, %rd393, 8;
	// begin inline asm
	{ atom.add.f64 %fd923,[%rd394],%fd944; }

	// end inline asm
	add.s64 	%rd395, %rd393, 16;
	// begin inline asm
	{ atom.add.f64 %fd925,[%rd395],%fd944; }

	// end inline asm
	add.s64 	%rd396, %rd393, 24;
	// begin inline asm
	{ atom.add.f64 %fd927,[%rd396],%fd944; }

	// end inline asm
	add.s64 	%rd397, %rd393, 32;
	// begin inline asm
	{ atom.add.f64 %fd929,[%rd397],%fd944; }

	// end inline asm
	add.s64 	%rd398, %rd393, 40;
	// begin inline asm
	{ atom.add.f64 %fd931,[%rd398],%fd944; }

	// end inline asm
	add.s64 	%rd399, %rd393, 48;
	// begin inline asm
	{ atom.add.f64 %fd933,[%rd399],%fd104; }

	// end inline asm
	add.s64 	%rd400, %rd393, 56;
	// begin inline asm
	{ atom.add.f64 %fd935,[%rd400],%fd944; }

	// end inline asm
	add.s64 	%rd401, %rd393, 64;
	// begin inline asm
	{ atom.add.f64 %fd937,[%rd401],%fd944; }

	// end inline asm
	add.s64 	%rd402, %rd393, 72;
	// begin inline asm
	{ atom.add.f64 %fd939,[%rd402],%fd944; }

	// end inline asm
	add.s64 	%rd403, %rd393, 80;
	// begin inline asm
	{ atom.add.f64 %fd941,[%rd403],%fd944; }

	// end inline asm
	add.s64 	%rd404, %rd393, 88;
	// begin inline asm
	{ atom.add.f64 %fd943,[%rd404],%fd944; }

	// end inline asm

$L__BB9_67:
	@%p18 bra 	$L__BB9_69;

	mul.lo.s64 	%rd417, %rd45, %rd33;
	add.s64 	%rd405, %rd67, %rd417;
	mov.f64 	%fd968, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd945,[%rd405],%fd968; }

	// end inline asm
	add.s64 	%rd406, %rd405, 8;
	// begin inline asm
	{ atom.add.f64 %fd947,[%rd406],%fd968; }

	// end inline asm
	add.s64 	%rd407, %rd405, 16;
	// begin inline asm
	{ atom.add.f64 %fd949,[%rd407],%fd968; }

	// end inline asm
	add.s64 	%rd408, %rd405, 24;
	// begin inline asm
	{ atom.add.f64 %fd951,[%rd408],%fd968; }

	// end inline asm
	add.s64 	%rd409, %rd405, 32;
	// begin inline asm
	{ atom.add.f64 %fd953,[%rd409],%fd968; }

	// end inline asm
	add.s64 	%rd410, %rd405, 40;
	// begin inline asm
	{ atom.add.f64 %fd955,[%rd410],%fd968; }

	// end inline asm
	add.s64 	%rd411, %rd405, 48;
	// begin inline asm
	{ atom.add.f64 %fd957,[%rd411],%fd103; }

	// end inline asm
	add.s64 	%rd412, %rd405, 56;
	// begin inline asm
	{ atom.add.f64 %fd959,[%rd412],%fd968; }

	// end inline asm
	add.s64 	%rd413, %rd405, 64;
	// begin inline asm
	{ atom.add.f64 %fd961,[%rd413],%fd968; }

	// end inline asm
	add.s64 	%rd414, %rd405, 72;
	// begin inline asm
	{ atom.add.f64 %fd963,[%rd414],%fd968; }

	// end inline asm
	add.s64 	%rd415, %rd405, 80;
	// begin inline asm
	{ atom.add.f64 %fd965,[%rd415],%fd968; }

	// end inline asm
	add.s64 	%rd416, %rd405, 88;
	// begin inline asm
	{ atom.add.f64 %fd967,[%rd416],%fd968; }

	// end inline asm
	bra.uni 	$L__BB9_71;

$L__BB9_69:
	setp.eq.s64 	%p39, %rd54, 0;
	@%p39 bra 	$L__BB9_71;

	add.s64 	%rd418, %rd54, %rd46;
	mov.f64 	%fd992, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd969,[%rd418],%fd992; }

	// end inline asm
	add.s64 	%rd419, %rd418, 8;
	// begin inline asm
	{ atom.add.f64 %fd971,[%rd419],%fd992; }

	// end inline asm
	add.s64 	%rd420, %rd418, 16;
	// begin inline asm
	{ atom.add.f64 %fd973,[%rd420],%fd992; }

	// end inline asm
	add.s64 	%rd421, %rd418, 24;
	// begin inline asm
	{ atom.add.f64 %fd975,[%rd421],%fd992; }

	// end inline asm
	add.s64 	%rd422, %rd418, 32;
	// begin inline asm
	{ atom.add.f64 %fd977,[%rd422],%fd992; }

	// end inline asm
	add.s64 	%rd423, %rd418, 40;
	// begin inline asm
	{ atom.add.f64 %fd979,[%rd423],%fd992; }

	// end inline asm
	add.s64 	%rd424, %rd418, 48;
	// begin inline asm
	{ atom.add.f64 %fd981,[%rd424],%fd103; }

	// end inline asm
	add.s64 	%rd425, %rd418, 56;
	// begin inline asm
	{ atom.add.f64 %fd983,[%rd425],%fd992; }

	// end inline asm
	add.s64 	%rd426, %rd418, 64;
	// begin inline asm
	{ atom.add.f64 %fd985,[%rd426],%fd992; }

	// end inline asm
	add.s64 	%rd427, %rd418, 72;
	// begin inline asm
	{ atom.add.f64 %fd987,[%rd427],%fd992; }

	// end inline asm
	add.s64 	%rd428, %rd418, 80;
	// begin inline asm
	{ atom.add.f64 %fd989,[%rd428],%fd992; }

	// end inline asm
	add.s64 	%rd429, %rd418, 88;
	// begin inline asm
	{ atom.add.f64 %fd991,[%rd429],%fd992; }

	// end inline asm

$L__BB9_71:
	add.f64 	%fd105, %fd86, 0d0000000000000000;
	mov.f64 	%fd993, 0d0000000000000000;
	sub.f64 	%fd994, %fd993, %fd105;
	add.f64 	%fd106, %fd994, 0d0000000000000000;
	@%p16 bra 	$L__BB9_73;

	mul.lo.s64 	%rd442, %rd45, %rd32;
	add.s64 	%rd430, %rd69, %rd442;
	// begin inline asm
	{ atom.add.f64 %fd995,[%rd430],%fd993; }

	// end inline asm
	add.s64 	%rd431, %rd430, 8;
	// begin inline asm
	{ atom.add.f64 %fd997,[%rd431],%fd993; }

	// end inline asm
	add.s64 	%rd432, %rd430, 16;
	// begin inline asm
	{ atom.add.f64 %fd999,[%rd432],%fd993; }

	// end inline asm
	add.s64 	%rd433, %rd430, 24;
	// begin inline asm
	{ atom.add.f64 %fd1001,[%rd433],%fd993; }

	// end inline asm
	add.s64 	%rd434, %rd430, 32;
	// begin inline asm
	{ atom.add.f64 %fd1003,[%rd434],%fd993; }

	// end inline asm
	add.s64 	%rd435, %rd430, 40;
	// begin inline asm
	{ atom.add.f64 %fd1005,[%rd435],%fd106; }

	// end inline asm
	add.s64 	%rd436, %rd430, 48;
	// begin inline asm
	{ atom.add.f64 %fd1007,[%rd436],%fd993; }

	// end inline asm
	add.s64 	%rd437, %rd430, 56;
	// begin inline asm
	{ atom.add.f64 %fd1009,[%rd437],%fd993; }

	// end inline asm
	add.s64 	%rd438, %rd430, 64;
	// begin inline asm
	{ atom.add.f64 %fd1011,[%rd438],%fd993; }

	// end inline asm
	add.s64 	%rd439, %rd430, 72;
	// begin inline asm
	{ atom.add.f64 %fd1013,[%rd439],%fd993; }

	// end inline asm
	add.s64 	%rd440, %rd430, 80;
	// begin inline asm
	{ atom.add.f64 %fd1015,[%rd440],%fd993; }

	// end inline asm
	add.s64 	%rd441, %rd430, 88;
	// begin inline asm
	{ atom.add.f64 %fd1017,[%rd441],%fd993; }

	// end inline asm
	bra.uni 	$L__BB9_75;

$L__BB9_73:
	setp.eq.s64 	%p41, %rd56, 0;
	@%p41 bra 	$L__BB9_75;

	add.s64 	%rd443, %rd56, %rd47;
	mov.f64 	%fd1042, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1019,[%rd443],%fd1042; }

	// end inline asm
	add.s64 	%rd444, %rd443, 8;
	// begin inline asm
	{ atom.add.f64 %fd1021,[%rd444],%fd1042; }

	// end inline asm
	add.s64 	%rd445, %rd443, 16;
	// begin inline asm
	{ atom.add.f64 %fd1023,[%rd445],%fd1042; }

	// end inline asm
	add.s64 	%rd446, %rd443, 24;
	// begin inline asm
	{ atom.add.f64 %fd1025,[%rd446],%fd1042; }

	// end inline asm
	add.s64 	%rd447, %rd443, 32;
	// begin inline asm
	{ atom.add.f64 %fd1027,[%rd447],%fd1042; }

	// end inline asm
	add.s64 	%rd448, %rd443, 40;
	// begin inline asm
	{ atom.add.f64 %fd1029,[%rd448],%fd106; }

	// end inline asm
	add.s64 	%rd449, %rd443, 48;
	// begin inline asm
	{ atom.add.f64 %fd1031,[%rd449],%fd1042; }

	// end inline asm
	add.s64 	%rd450, %rd443, 56;
	// begin inline asm
	{ atom.add.f64 %fd1033,[%rd450],%fd1042; }

	// end inline asm
	add.s64 	%rd451, %rd443, 64;
	// begin inline asm
	{ atom.add.f64 %fd1035,[%rd451],%fd1042; }

	// end inline asm
	add.s64 	%rd452, %rd443, 72;
	// begin inline asm
	{ atom.add.f64 %fd1037,[%rd452],%fd1042; }

	// end inline asm
	add.s64 	%rd453, %rd443, 80;
	// begin inline asm
	{ atom.add.f64 %fd1039,[%rd453],%fd1042; }

	// end inline asm
	add.s64 	%rd454, %rd443, 88;
	// begin inline asm
	{ atom.add.f64 %fd1041,[%rd454],%fd1042; }

	// end inline asm

$L__BB9_75:
	@%p18 bra 	$L__BB9_77;

	mul.lo.s64 	%rd467, %rd45, %rd33;
	add.s64 	%rd455, %rd67, %rd467;
	mov.f64 	%fd1066, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1043,[%rd455],%fd1066; }

	// end inline asm
	add.s64 	%rd456, %rd455, 8;
	// begin inline asm
	{ atom.add.f64 %fd1045,[%rd456],%fd1066; }

	// end inline asm
	add.s64 	%rd457, %rd455, 16;
	// begin inline asm
	{ atom.add.f64 %fd1047,[%rd457],%fd1066; }

	// end inline asm
	add.s64 	%rd458, %rd455, 24;
	// begin inline asm
	{ atom.add.f64 %fd1049,[%rd458],%fd1066; }

	// end inline asm
	add.s64 	%rd459, %rd455, 32;
	// begin inline asm
	{ atom.add.f64 %fd1051,[%rd459],%fd1066; }

	// end inline asm
	add.s64 	%rd460, %rd455, 40;
	// begin inline asm
	{ atom.add.f64 %fd1053,[%rd460],%fd105; }

	// end inline asm
	add.s64 	%rd461, %rd455, 48;
	// begin inline asm
	{ atom.add.f64 %fd1055,[%rd461],%fd1066; }

	// end inline asm
	add.s64 	%rd462, %rd455, 56;
	// begin inline asm
	{ atom.add.f64 %fd1057,[%rd462],%fd1066; }

	// end inline asm
	add.s64 	%rd463, %rd455, 64;
	// begin inline asm
	{ atom.add.f64 %fd1059,[%rd463],%fd1066; }

	// end inline asm
	add.s64 	%rd464, %rd455, 72;
	// begin inline asm
	{ atom.add.f64 %fd1061,[%rd464],%fd1066; }

	// end inline asm
	add.s64 	%rd465, %rd455, 80;
	// begin inline asm
	{ atom.add.f64 %fd1063,[%rd465],%fd1066; }

	// end inline asm
	add.s64 	%rd466, %rd455, 88;
	// begin inline asm
	{ atom.add.f64 %fd1065,[%rd466],%fd1066; }

	// end inline asm
	bra.uni 	$L__BB9_79;

$L__BB9_77:
	setp.eq.s64 	%p43, %rd54, 0;
	@%p43 bra 	$L__BB9_79;

	add.s64 	%rd468, %rd54, %rd46;
	mov.f64 	%fd1090, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1067,[%rd468],%fd1090; }

	// end inline asm
	add.s64 	%rd469, %rd468, 8;
	// begin inline asm
	{ atom.add.f64 %fd1069,[%rd469],%fd1090; }

	// end inline asm
	add.s64 	%rd470, %rd468, 16;
	// begin inline asm
	{ atom.add.f64 %fd1071,[%rd470],%fd1090; }

	// end inline asm
	add.s64 	%rd471, %rd468, 24;
	// begin inline asm
	{ atom.add.f64 %fd1073,[%rd471],%fd1090; }

	// end inline asm
	add.s64 	%rd472, %rd468, 32;
	// begin inline asm
	{ atom.add.f64 %fd1075,[%rd472],%fd1090; }

	// end inline asm
	add.s64 	%rd473, %rd468, 40;
	// begin inline asm
	{ atom.add.f64 %fd1077,[%rd473],%fd105; }

	// end inline asm
	add.s64 	%rd474, %rd468, 48;
	// begin inline asm
	{ atom.add.f64 %fd1079,[%rd474],%fd1090; }

	// end inline asm
	add.s64 	%rd475, %rd468, 56;
	// begin inline asm
	{ atom.add.f64 %fd1081,[%rd475],%fd1090; }

	// end inline asm
	add.s64 	%rd476, %rd468, 64;
	// begin inline asm
	{ atom.add.f64 %fd1083,[%rd476],%fd1090; }

	// end inline asm
	add.s64 	%rd477, %rd468, 72;
	// begin inline asm
	{ atom.add.f64 %fd1085,[%rd477],%fd1090; }

	// end inline asm
	add.s64 	%rd478, %rd468, 80;
	// begin inline asm
	{ atom.add.f64 %fd1087,[%rd478],%fd1090; }

	// end inline asm
	add.s64 	%rd479, %rd468, 88;
	// begin inline asm
	{ atom.add.f64 %fd1089,[%rd479],%fd1090; }

	// end inline asm

$L__BB9_79:
	add.f64 	%fd107, %fd85, 0d0000000000000000;
	mov.f64 	%fd1091, 0d0000000000000000;
	sub.f64 	%fd1092, %fd1091, %fd107;
	add.f64 	%fd108, %fd1092, 0d0000000000000000;
	@%p16 bra 	$L__BB9_81;

	mul.lo.s64 	%rd492, %rd45, %rd32;
	add.s64 	%rd480, %rd69, %rd492;
	// begin inline asm
	{ atom.add.f64 %fd1093,[%rd480],%fd1091; }

	// end inline asm
	add.s64 	%rd481, %rd480, 8;
	// begin inline asm
	{ atom.add.f64 %fd1095,[%rd481],%fd1091; }

	// end inline asm
	add.s64 	%rd482, %rd480, 16;
	// begin inline asm
	{ atom.add.f64 %fd1097,[%rd482],%fd1091; }

	// end inline asm
	add.s64 	%rd483, %rd480, 24;
	// begin inline asm
	{ atom.add.f64 %fd1099,[%rd483],%fd1091; }

	// end inline asm
	add.s64 	%rd484, %rd480, 32;
	// begin inline asm
	{ atom.add.f64 %fd1101,[%rd484],%fd108; }

	// end inline asm
	add.s64 	%rd485, %rd480, 40;
	// begin inline asm
	{ atom.add.f64 %fd1103,[%rd485],%fd1091; }

	// end inline asm
	add.s64 	%rd486, %rd480, 48;
	// begin inline asm
	{ atom.add.f64 %fd1105,[%rd486],%fd1091; }

	// end inline asm
	add.s64 	%rd487, %rd480, 56;
	// begin inline asm
	{ atom.add.f64 %fd1107,[%rd487],%fd1091; }

	// end inline asm
	add.s64 	%rd488, %rd480, 64;
	// begin inline asm
	{ atom.add.f64 %fd1109,[%rd488],%fd1091; }

	// end inline asm
	add.s64 	%rd489, %rd480, 72;
	// begin inline asm
	{ atom.add.f64 %fd1111,[%rd489],%fd1091; }

	// end inline asm
	add.s64 	%rd490, %rd480, 80;
	// begin inline asm
	{ atom.add.f64 %fd1113,[%rd490],%fd1091; }

	// end inline asm
	add.s64 	%rd491, %rd480, 88;
	// begin inline asm
	{ atom.add.f64 %fd1115,[%rd491],%fd1091; }

	// end inline asm
	bra.uni 	$L__BB9_83;

$L__BB9_81:
	setp.eq.s64 	%p45, %rd56, 0;
	@%p45 bra 	$L__BB9_83;

	add.s64 	%rd493, %rd56, %rd47;
	mov.f64 	%fd1140, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1117,[%rd493],%fd1140; }

	// end inline asm
	add.s64 	%rd494, %rd493, 8;
	// begin inline asm
	{ atom.add.f64 %fd1119,[%rd494],%fd1140; }

	// end inline asm
	add.s64 	%rd495, %rd493, 16;
	// begin inline asm
	{ atom.add.f64 %fd1121,[%rd495],%fd1140; }

	// end inline asm
	add.s64 	%rd496, %rd493, 24;
	// begin inline asm
	{ atom.add.f64 %fd1123,[%rd496],%fd1140; }

	// end inline asm
	add.s64 	%rd497, %rd493, 32;
	// begin inline asm
	{ atom.add.f64 %fd1125,[%rd497],%fd108; }

	// end inline asm
	add.s64 	%rd498, %rd493, 40;
	// begin inline asm
	{ atom.add.f64 %fd1127,[%rd498],%fd1140; }

	// end inline asm
	add.s64 	%rd499, %rd493, 48;
	// begin inline asm
	{ atom.add.f64 %fd1129,[%rd499],%fd1140; }

	// end inline asm
	add.s64 	%rd500, %rd493, 56;
	// begin inline asm
	{ atom.add.f64 %fd1131,[%rd500],%fd1140; }

	// end inline asm
	add.s64 	%rd501, %rd493, 64;
	// begin inline asm
	{ atom.add.f64 %fd1133,[%rd501],%fd1140; }

	// end inline asm
	add.s64 	%rd502, %rd493, 72;
	// begin inline asm
	{ atom.add.f64 %fd1135,[%rd502],%fd1140; }

	// end inline asm
	add.s64 	%rd503, %rd493, 80;
	// begin inline asm
	{ atom.add.f64 %fd1137,[%rd503],%fd1140; }

	// end inline asm
	add.s64 	%rd504, %rd493, 88;
	// begin inline asm
	{ atom.add.f64 %fd1139,[%rd504],%fd1140; }

	// end inline asm

$L__BB9_83:
	@%p18 bra 	$L__BB9_85;

	mul.lo.s64 	%rd517, %rd45, %rd33;
	add.s64 	%rd505, %rd67, %rd517;
	mov.f64 	%fd1164, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1141,[%rd505],%fd1164; }

	// end inline asm
	add.s64 	%rd506, %rd505, 8;
	// begin inline asm
	{ atom.add.f64 %fd1143,[%rd506],%fd1164; }

	// end inline asm
	add.s64 	%rd507, %rd505, 16;
	// begin inline asm
	{ atom.add.f64 %fd1145,[%rd507],%fd1164; }

	// end inline asm
	add.s64 	%rd508, %rd505, 24;
	// begin inline asm
	{ atom.add.f64 %fd1147,[%rd508],%fd1164; }

	// end inline asm
	add.s64 	%rd509, %rd505, 32;
	// begin inline asm
	{ atom.add.f64 %fd1149,[%rd509],%fd107; }

	// end inline asm
	add.s64 	%rd510, %rd505, 40;
	// begin inline asm
	{ atom.add.f64 %fd1151,[%rd510],%fd1164; }

	// end inline asm
	add.s64 	%rd511, %rd505, 48;
	// begin inline asm
	{ atom.add.f64 %fd1153,[%rd511],%fd1164; }

	// end inline asm
	add.s64 	%rd512, %rd505, 56;
	// begin inline asm
	{ atom.add.f64 %fd1155,[%rd512],%fd1164; }

	// end inline asm
	add.s64 	%rd513, %rd505, 64;
	// begin inline asm
	{ atom.add.f64 %fd1157,[%rd513],%fd1164; }

	// end inline asm
	add.s64 	%rd514, %rd505, 72;
	// begin inline asm
	{ atom.add.f64 %fd1159,[%rd514],%fd1164; }

	// end inline asm
	add.s64 	%rd515, %rd505, 80;
	// begin inline asm
	{ atom.add.f64 %fd1161,[%rd515],%fd1164; }

	// end inline asm
	add.s64 	%rd516, %rd505, 88;
	// begin inline asm
	{ atom.add.f64 %fd1163,[%rd516],%fd1164; }

	// end inline asm
	bra.uni 	$L__BB9_87;

$L__BB9_85:
	setp.eq.s64 	%p47, %rd54, 0;
	@%p47 bra 	$L__BB9_87;

	add.s64 	%rd518, %rd54, %rd46;
	mov.f64 	%fd1188, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1165,[%rd518],%fd1188; }

	// end inline asm
	add.s64 	%rd519, %rd518, 8;
	// begin inline asm
	{ atom.add.f64 %fd1167,[%rd519],%fd1188; }

	// end inline asm
	add.s64 	%rd520, %rd518, 16;
	// begin inline asm
	{ atom.add.f64 %fd1169,[%rd520],%fd1188; }

	// end inline asm
	add.s64 	%rd521, %rd518, 24;
	// begin inline asm
	{ atom.add.f64 %fd1171,[%rd521],%fd1188; }

	// end inline asm
	add.s64 	%rd522, %rd518, 32;
	// begin inline asm
	{ atom.add.f64 %fd1173,[%rd522],%fd107; }

	// end inline asm
	add.s64 	%rd523, %rd518, 40;
	// begin inline asm
	{ atom.add.f64 %fd1175,[%rd523],%fd1188; }

	// end inline asm
	add.s64 	%rd524, %rd518, 48;
	// begin inline asm
	{ atom.add.f64 %fd1177,[%rd524],%fd1188; }

	// end inline asm
	add.s64 	%rd525, %rd518, 56;
	// begin inline asm
	{ atom.add.f64 %fd1179,[%rd525],%fd1188; }

	// end inline asm
	add.s64 	%rd526, %rd518, 64;
	// begin inline asm
	{ atom.add.f64 %fd1181,[%rd526],%fd1188; }

	// end inline asm
	add.s64 	%rd527, %rd518, 72;
	// begin inline asm
	{ atom.add.f64 %fd1183,[%rd527],%fd1188; }

	// end inline asm
	add.s64 	%rd528, %rd518, 80;
	// begin inline asm
	{ atom.add.f64 %fd1185,[%rd528],%fd1188; }

	// end inline asm
	add.s64 	%rd529, %rd518, 88;
	// begin inline asm
	{ atom.add.f64 %fd1187,[%rd529],%fd1188; }

	// end inline asm

$L__BB9_87:
	add.f64 	%fd109, %fd84, 0d0000000000000000;
	mov.f64 	%fd1189, 0d0000000000000000;
	sub.f64 	%fd1190, %fd1189, %fd109;
	add.f64 	%fd110, %fd1190, 0d0000000000000000;
	@%p16 bra 	$L__BB9_89;

	mul.lo.s64 	%rd542, %rd45, %rd32;
	add.s64 	%rd530, %rd69, %rd542;
	// begin inline asm
	{ atom.add.f64 %fd1191,[%rd530],%fd1189; }

	// end inline asm
	add.s64 	%rd531, %rd530, 8;
	// begin inline asm
	{ atom.add.f64 %fd1193,[%rd531],%fd1189; }

	// end inline asm
	add.s64 	%rd532, %rd530, 16;
	// begin inline asm
	{ atom.add.f64 %fd1195,[%rd532],%fd1189; }

	// end inline asm
	add.s64 	%rd533, %rd530, 24;
	// begin inline asm
	{ atom.add.f64 %fd1197,[%rd533],%fd110; }

	// end inline asm
	add.s64 	%rd534, %rd530, 32;
	// begin inline asm
	{ atom.add.f64 %fd1199,[%rd534],%fd1189; }

	// end inline asm
	add.s64 	%rd535, %rd530, 40;
	// begin inline asm
	{ atom.add.f64 %fd1201,[%rd535],%fd1189; }

	// end inline asm
	add.s64 	%rd536, %rd530, 48;
	// begin inline asm
	{ atom.add.f64 %fd1203,[%rd536],%fd1189; }

	// end inline asm
	add.s64 	%rd537, %rd530, 56;
	// begin inline asm
	{ atom.add.f64 %fd1205,[%rd537],%fd1189; }

	// end inline asm
	add.s64 	%rd538, %rd530, 64;
	// begin inline asm
	{ atom.add.f64 %fd1207,[%rd538],%fd1189; }

	// end inline asm
	add.s64 	%rd539, %rd530, 72;
	// begin inline asm
	{ atom.add.f64 %fd1209,[%rd539],%fd1189; }

	// end inline asm
	add.s64 	%rd540, %rd530, 80;
	// begin inline asm
	{ atom.add.f64 %fd1211,[%rd540],%fd1189; }

	// end inline asm
	add.s64 	%rd541, %rd530, 88;
	// begin inline asm
	{ atom.add.f64 %fd1213,[%rd541],%fd1189; }

	// end inline asm
	bra.uni 	$L__BB9_91;

$L__BB9_89:
	setp.eq.s64 	%p49, %rd56, 0;
	@%p49 bra 	$L__BB9_91;

	add.s64 	%rd543, %rd56, %rd47;
	mov.f64 	%fd1238, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1215,[%rd543],%fd1238; }

	// end inline asm
	add.s64 	%rd544, %rd543, 8;
	// begin inline asm
	{ atom.add.f64 %fd1217,[%rd544],%fd1238; }

	// end inline asm
	add.s64 	%rd545, %rd543, 16;
	// begin inline asm
	{ atom.add.f64 %fd1219,[%rd545],%fd1238; }

	// end inline asm
	add.s64 	%rd546, %rd543, 24;
	// begin inline asm
	{ atom.add.f64 %fd1221,[%rd546],%fd110; }

	// end inline asm
	add.s64 	%rd547, %rd543, 32;
	// begin inline asm
	{ atom.add.f64 %fd1223,[%rd547],%fd1238; }

	// end inline asm
	add.s64 	%rd548, %rd543, 40;
	// begin inline asm
	{ atom.add.f64 %fd1225,[%rd548],%fd1238; }

	// end inline asm
	add.s64 	%rd549, %rd543, 48;
	// begin inline asm
	{ atom.add.f64 %fd1227,[%rd549],%fd1238; }

	// end inline asm
	add.s64 	%rd550, %rd543, 56;
	// begin inline asm
	{ atom.add.f64 %fd1229,[%rd550],%fd1238; }

	// end inline asm
	add.s64 	%rd551, %rd543, 64;
	// begin inline asm
	{ atom.add.f64 %fd1231,[%rd551],%fd1238; }

	// end inline asm
	add.s64 	%rd552, %rd543, 72;
	// begin inline asm
	{ atom.add.f64 %fd1233,[%rd552],%fd1238; }

	// end inline asm
	add.s64 	%rd553, %rd543, 80;
	// begin inline asm
	{ atom.add.f64 %fd1235,[%rd553],%fd1238; }

	// end inline asm
	add.s64 	%rd554, %rd543, 88;
	// begin inline asm
	{ atom.add.f64 %fd1237,[%rd554],%fd1238; }

	// end inline asm

$L__BB9_91:
	@%p18 bra 	$L__BB9_93;

	mul.lo.s64 	%rd567, %rd45, %rd33;
	add.s64 	%rd555, %rd67, %rd567;
	mov.f64 	%fd1262, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1239,[%rd555],%fd1262; }

	// end inline asm
	add.s64 	%rd556, %rd555, 8;
	// begin inline asm
	{ atom.add.f64 %fd1241,[%rd556],%fd1262; }

	// end inline asm
	add.s64 	%rd557, %rd555, 16;
	// begin inline asm
	{ atom.add.f64 %fd1243,[%rd557],%fd1262; }

	// end inline asm
	add.s64 	%rd558, %rd555, 24;
	// begin inline asm
	{ atom.add.f64 %fd1245,[%rd558],%fd109; }

	// end inline asm
	add.s64 	%rd559, %rd555, 32;
	// begin inline asm
	{ atom.add.f64 %fd1247,[%rd559],%fd1262; }

	// end inline asm
	add.s64 	%rd560, %rd555, 40;
	// begin inline asm
	{ atom.add.f64 %fd1249,[%rd560],%fd1262; }

	// end inline asm
	add.s64 	%rd561, %rd555, 48;
	// begin inline asm
	{ atom.add.f64 %fd1251,[%rd561],%fd1262; }

	// end inline asm
	add.s64 	%rd562, %rd555, 56;
	// begin inline asm
	{ atom.add.f64 %fd1253,[%rd562],%fd1262; }

	// end inline asm
	add.s64 	%rd563, %rd555, 64;
	// begin inline asm
	{ atom.add.f64 %fd1255,[%rd563],%fd1262; }

	// end inline asm
	add.s64 	%rd564, %rd555, 72;
	// begin inline asm
	{ atom.add.f64 %fd1257,[%rd564],%fd1262; }

	// end inline asm
	add.s64 	%rd565, %rd555, 80;
	// begin inline asm
	{ atom.add.f64 %fd1259,[%rd565],%fd1262; }

	// end inline asm
	add.s64 	%rd566, %rd555, 88;
	// begin inline asm
	{ atom.add.f64 %fd1261,[%rd566],%fd1262; }

	// end inline asm
	bra.uni 	$L__BB9_95;

$L__BB9_93:
	setp.eq.s64 	%p51, %rd54, 0;
	@%p51 bra 	$L__BB9_95;

	add.s64 	%rd568, %rd54, %rd46;
	mov.f64 	%fd1286, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1263,[%rd568],%fd1286; }

	// end inline asm
	add.s64 	%rd569, %rd568, 8;
	// begin inline asm
	{ atom.add.f64 %fd1265,[%rd569],%fd1286; }

	// end inline asm
	add.s64 	%rd570, %rd568, 16;
	// begin inline asm
	{ atom.add.f64 %fd1267,[%rd570],%fd1286; }

	// end inline asm
	add.s64 	%rd571, %rd568, 24;
	// begin inline asm
	{ atom.add.f64 %fd1269,[%rd571],%fd109; }

	// end inline asm
	add.s64 	%rd572, %rd568, 32;
	// begin inline asm
	{ atom.add.f64 %fd1271,[%rd572],%fd1286; }

	// end inline asm
	add.s64 	%rd573, %rd568, 40;
	// begin inline asm
	{ atom.add.f64 %fd1273,[%rd573],%fd1286; }

	// end inline asm
	add.s64 	%rd574, %rd568, 48;
	// begin inline asm
	{ atom.add.f64 %fd1275,[%rd574],%fd1286; }

	// end inline asm
	add.s64 	%rd575, %rd568, 56;
	// begin inline asm
	{ atom.add.f64 %fd1277,[%rd575],%fd1286; }

	// end inline asm
	add.s64 	%rd576, %rd568, 64;
	// begin inline asm
	{ atom.add.f64 %fd1279,[%rd576],%fd1286; }

	// end inline asm
	add.s64 	%rd577, %rd568, 72;
	// begin inline asm
	{ atom.add.f64 %fd1281,[%rd577],%fd1286; }

	// end inline asm
	add.s64 	%rd578, %rd568, 80;
	// begin inline asm
	{ atom.add.f64 %fd1283,[%rd578],%fd1286; }

	// end inline asm
	add.s64 	%rd579, %rd568, 88;
	// begin inline asm
	{ atom.add.f64 %fd1285,[%rd579],%fd1286; }

	// end inline asm

$L__BB9_95:
	add.f64 	%fd111, %fd83, 0d0000000000000000;
	mov.f64 	%fd1287, 0d0000000000000000;
	sub.f64 	%fd1288, %fd1287, %fd111;
	add.f64 	%fd112, %fd1288, 0d0000000000000000;
	@%p16 bra 	$L__BB9_97;

	mul.lo.s64 	%rd592, %rd45, %rd32;
	add.s64 	%rd580, %rd69, %rd592;
	// begin inline asm
	{ atom.add.f64 %fd1289,[%rd580],%fd1287; }

	// end inline asm
	add.s64 	%rd581, %rd580, 8;
	// begin inline asm
	{ atom.add.f64 %fd1291,[%rd581],%fd1287; }

	// end inline asm
	add.s64 	%rd582, %rd580, 16;
	// begin inline asm
	{ atom.add.f64 %fd1293,[%rd582],%fd112; }

	// end inline asm
	add.s64 	%rd583, %rd580, 24;
	// begin inline asm
	{ atom.add.f64 %fd1295,[%rd583],%fd1287; }

	// end inline asm
	add.s64 	%rd584, %rd580, 32;
	// begin inline asm
	{ atom.add.f64 %fd1297,[%rd584],%fd1287; }

	// end inline asm
	add.s64 	%rd585, %rd580, 40;
	// begin inline asm
	{ atom.add.f64 %fd1299,[%rd585],%fd1287; }

	// end inline asm
	add.s64 	%rd586, %rd580, 48;
	// begin inline asm
	{ atom.add.f64 %fd1301,[%rd586],%fd1287; }

	// end inline asm
	add.s64 	%rd587, %rd580, 56;
	// begin inline asm
	{ atom.add.f64 %fd1303,[%rd587],%fd1287; }

	// end inline asm
	add.s64 	%rd588, %rd580, 64;
	// begin inline asm
	{ atom.add.f64 %fd1305,[%rd588],%fd1287; }

	// end inline asm
	add.s64 	%rd589, %rd580, 72;
	// begin inline asm
	{ atom.add.f64 %fd1307,[%rd589],%fd1287; }

	// end inline asm
	add.s64 	%rd590, %rd580, 80;
	// begin inline asm
	{ atom.add.f64 %fd1309,[%rd590],%fd1287; }

	// end inline asm
	add.s64 	%rd591, %rd580, 88;
	// begin inline asm
	{ atom.add.f64 %fd1311,[%rd591],%fd1287; }

	// end inline asm
	bra.uni 	$L__BB9_99;

$L__BB9_97:
	setp.eq.s64 	%p53, %rd56, 0;
	@%p53 bra 	$L__BB9_99;

	add.s64 	%rd593, %rd56, %rd47;
	mov.f64 	%fd1336, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1313,[%rd593],%fd1336; }

	// end inline asm
	add.s64 	%rd594, %rd593, 8;
	// begin inline asm
	{ atom.add.f64 %fd1315,[%rd594],%fd1336; }

	// end inline asm
	add.s64 	%rd595, %rd593, 16;
	// begin inline asm
	{ atom.add.f64 %fd1317,[%rd595],%fd112; }

	// end inline asm
	add.s64 	%rd596, %rd593, 24;
	// begin inline asm
	{ atom.add.f64 %fd1319,[%rd596],%fd1336; }

	// end inline asm
	add.s64 	%rd597, %rd593, 32;
	// begin inline asm
	{ atom.add.f64 %fd1321,[%rd597],%fd1336; }

	// end inline asm
	add.s64 	%rd598, %rd593, 40;
	// begin inline asm
	{ atom.add.f64 %fd1323,[%rd598],%fd1336; }

	// end inline asm
	add.s64 	%rd599, %rd593, 48;
	// begin inline asm
	{ atom.add.f64 %fd1325,[%rd599],%fd1336; }

	// end inline asm
	add.s64 	%rd600, %rd593, 56;
	// begin inline asm
	{ atom.add.f64 %fd1327,[%rd600],%fd1336; }

	// end inline asm
	add.s64 	%rd601, %rd593, 64;
	// begin inline asm
	{ atom.add.f64 %fd1329,[%rd601],%fd1336; }

	// end inline asm
	add.s64 	%rd602, %rd593, 72;
	// begin inline asm
	{ atom.add.f64 %fd1331,[%rd602],%fd1336; }

	// end inline asm
	add.s64 	%rd603, %rd593, 80;
	// begin inline asm
	{ atom.add.f64 %fd1333,[%rd603],%fd1336; }

	// end inline asm
	add.s64 	%rd604, %rd593, 88;
	// begin inline asm
	{ atom.add.f64 %fd1335,[%rd604],%fd1336; }

	// end inline asm

$L__BB9_99:
	@%p18 bra 	$L__BB9_101;

	mul.lo.s64 	%rd617, %rd45, %rd33;
	add.s64 	%rd605, %rd67, %rd617;
	mov.f64 	%fd1360, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1337,[%rd605],%fd1360; }

	// end inline asm
	add.s64 	%rd606, %rd605, 8;
	// begin inline asm
	{ atom.add.f64 %fd1339,[%rd606],%fd1360; }

	// end inline asm
	add.s64 	%rd607, %rd605, 16;
	// begin inline asm
	{ atom.add.f64 %fd1341,[%rd607],%fd111; }

	// end inline asm
	add.s64 	%rd608, %rd605, 24;
	// begin inline asm
	{ atom.add.f64 %fd1343,[%rd608],%fd1360; }

	// end inline asm
	add.s64 	%rd609, %rd605, 32;
	// begin inline asm
	{ atom.add.f64 %fd1345,[%rd609],%fd1360; }

	// end inline asm
	add.s64 	%rd610, %rd605, 40;
	// begin inline asm
	{ atom.add.f64 %fd1347,[%rd610],%fd1360; }

	// end inline asm
	add.s64 	%rd611, %rd605, 48;
	// begin inline asm
	{ atom.add.f64 %fd1349,[%rd611],%fd1360; }

	// end inline asm
	add.s64 	%rd612, %rd605, 56;
	// begin inline asm
	{ atom.add.f64 %fd1351,[%rd612],%fd1360; }

	// end inline asm
	add.s64 	%rd613, %rd605, 64;
	// begin inline asm
	{ atom.add.f64 %fd1353,[%rd613],%fd1360; }

	// end inline asm
	add.s64 	%rd614, %rd605, 72;
	// begin inline asm
	{ atom.add.f64 %fd1355,[%rd614],%fd1360; }

	// end inline asm
	add.s64 	%rd615, %rd605, 80;
	// begin inline asm
	{ atom.add.f64 %fd1357,[%rd615],%fd1360; }

	// end inline asm
	add.s64 	%rd616, %rd605, 88;
	// begin inline asm
	{ atom.add.f64 %fd1359,[%rd616],%fd1360; }

	// end inline asm
	bra.uni 	$L__BB9_103;

$L__BB9_101:
	setp.eq.s64 	%p55, %rd54, 0;
	@%p55 bra 	$L__BB9_103;

	add.s64 	%rd618, %rd54, %rd46;
	mov.f64 	%fd1384, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1361,[%rd618],%fd1384; }

	// end inline asm
	add.s64 	%rd619, %rd618, 8;
	// begin inline asm
	{ atom.add.f64 %fd1363,[%rd619],%fd1384; }

	// end inline asm
	add.s64 	%rd620, %rd618, 16;
	// begin inline asm
	{ atom.add.f64 %fd1365,[%rd620],%fd111; }

	// end inline asm
	add.s64 	%rd621, %rd618, 24;
	// begin inline asm
	{ atom.add.f64 %fd1367,[%rd621],%fd1384; }

	// end inline asm
	add.s64 	%rd622, %rd618, 32;
	// begin inline asm
	{ atom.add.f64 %fd1369,[%rd622],%fd1384; }

	// end inline asm
	add.s64 	%rd623, %rd618, 40;
	// begin inline asm
	{ atom.add.f64 %fd1371,[%rd623],%fd1384; }

	// end inline asm
	add.s64 	%rd624, %rd618, 48;
	// begin inline asm
	{ atom.add.f64 %fd1373,[%rd624],%fd1384; }

	// end inline asm
	add.s64 	%rd625, %rd618, 56;
	// begin inline asm
	{ atom.add.f64 %fd1375,[%rd625],%fd1384; }

	// end inline asm
	add.s64 	%rd626, %rd618, 64;
	// begin inline asm
	{ atom.add.f64 %fd1377,[%rd626],%fd1384; }

	// end inline asm
	add.s64 	%rd627, %rd618, 72;
	// begin inline asm
	{ atom.add.f64 %fd1379,[%rd627],%fd1384; }

	// end inline asm
	add.s64 	%rd628, %rd618, 80;
	// begin inline asm
	{ atom.add.f64 %fd1381,[%rd628],%fd1384; }

	// end inline asm
	add.s64 	%rd629, %rd618, 88;
	// begin inline asm
	{ atom.add.f64 %fd1383,[%rd629],%fd1384; }

	// end inline asm

$L__BB9_103:
	add.f64 	%fd113, %fd82, 0d0000000000000000;
	mov.f64 	%fd1385, 0d0000000000000000;
	sub.f64 	%fd1386, %fd1385, %fd113;
	add.f64 	%fd114, %fd1386, 0d0000000000000000;
	@%p16 bra 	$L__BB9_105;

	mul.lo.s64 	%rd642, %rd45, %rd32;
	add.s64 	%rd630, %rd69, %rd642;
	// begin inline asm
	{ atom.add.f64 %fd1387,[%rd630],%fd1385; }

	// end inline asm
	add.s64 	%rd631, %rd630, 8;
	// begin inline asm
	{ atom.add.f64 %fd1389,[%rd631],%fd114; }

	// end inline asm
	add.s64 	%rd632, %rd630, 16;
	// begin inline asm
	{ atom.add.f64 %fd1391,[%rd632],%fd1385; }

	// end inline asm
	add.s64 	%rd633, %rd630, 24;
	// begin inline asm
	{ atom.add.f64 %fd1393,[%rd633],%fd1385; }

	// end inline asm
	add.s64 	%rd634, %rd630, 32;
	// begin inline asm
	{ atom.add.f64 %fd1395,[%rd634],%fd1385; }

	// end inline asm
	add.s64 	%rd635, %rd630, 40;
	// begin inline asm
	{ atom.add.f64 %fd1397,[%rd635],%fd1385; }

	// end inline asm
	add.s64 	%rd636, %rd630, 48;
	// begin inline asm
	{ atom.add.f64 %fd1399,[%rd636],%fd1385; }

	// end inline asm
	add.s64 	%rd637, %rd630, 56;
	// begin inline asm
	{ atom.add.f64 %fd1401,[%rd637],%fd1385; }

	// end inline asm
	add.s64 	%rd638, %rd630, 64;
	// begin inline asm
	{ atom.add.f64 %fd1403,[%rd638],%fd1385; }

	// end inline asm
	add.s64 	%rd639, %rd630, 72;
	// begin inline asm
	{ atom.add.f64 %fd1405,[%rd639],%fd1385; }

	// end inline asm
	add.s64 	%rd640, %rd630, 80;
	// begin inline asm
	{ atom.add.f64 %fd1407,[%rd640],%fd1385; }

	// end inline asm
	add.s64 	%rd641, %rd630, 88;
	// begin inline asm
	{ atom.add.f64 %fd1409,[%rd641],%fd1385; }

	// end inline asm
	bra.uni 	$L__BB9_107;

$L__BB9_105:
	setp.eq.s64 	%p57, %rd56, 0;
	@%p57 bra 	$L__BB9_107;

	add.s64 	%rd643, %rd56, %rd47;
	mov.f64 	%fd1434, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1411,[%rd643],%fd1434; }

	// end inline asm
	add.s64 	%rd644, %rd643, 8;
	// begin inline asm
	{ atom.add.f64 %fd1413,[%rd644],%fd114; }

	// end inline asm
	add.s64 	%rd645, %rd643, 16;
	// begin inline asm
	{ atom.add.f64 %fd1415,[%rd645],%fd1434; }

	// end inline asm
	add.s64 	%rd646, %rd643, 24;
	// begin inline asm
	{ atom.add.f64 %fd1417,[%rd646],%fd1434; }

	// end inline asm
	add.s64 	%rd647, %rd643, 32;
	// begin inline asm
	{ atom.add.f64 %fd1419,[%rd647],%fd1434; }

	// end inline asm
	add.s64 	%rd648, %rd643, 40;
	// begin inline asm
	{ atom.add.f64 %fd1421,[%rd648],%fd1434; }

	// end inline asm
	add.s64 	%rd649, %rd643, 48;
	// begin inline asm
	{ atom.add.f64 %fd1423,[%rd649],%fd1434; }

	// end inline asm
	add.s64 	%rd650, %rd643, 56;
	// begin inline asm
	{ atom.add.f64 %fd1425,[%rd650],%fd1434; }

	// end inline asm
	add.s64 	%rd651, %rd643, 64;
	// begin inline asm
	{ atom.add.f64 %fd1427,[%rd651],%fd1434; }

	// end inline asm
	add.s64 	%rd652, %rd643, 72;
	// begin inline asm
	{ atom.add.f64 %fd1429,[%rd652],%fd1434; }

	// end inline asm
	add.s64 	%rd653, %rd643, 80;
	// begin inline asm
	{ atom.add.f64 %fd1431,[%rd653],%fd1434; }

	// end inline asm
	add.s64 	%rd654, %rd643, 88;
	// begin inline asm
	{ atom.add.f64 %fd1433,[%rd654],%fd1434; }

	// end inline asm

$L__BB9_107:
	@%p18 bra 	$L__BB9_109;

	mul.lo.s64 	%rd667, %rd45, %rd33;
	add.s64 	%rd655, %rd67, %rd667;
	mov.f64 	%fd1458, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1435,[%rd655],%fd1458; }

	// end inline asm
	add.s64 	%rd656, %rd655, 8;
	// begin inline asm
	{ atom.add.f64 %fd1437,[%rd656],%fd113; }

	// end inline asm
	add.s64 	%rd657, %rd655, 16;
	// begin inline asm
	{ atom.add.f64 %fd1439,[%rd657],%fd1458; }

	// end inline asm
	add.s64 	%rd658, %rd655, 24;
	// begin inline asm
	{ atom.add.f64 %fd1441,[%rd658],%fd1458; }

	// end inline asm
	add.s64 	%rd659, %rd655, 32;
	// begin inline asm
	{ atom.add.f64 %fd1443,[%rd659],%fd1458; }

	// end inline asm
	add.s64 	%rd660, %rd655, 40;
	// begin inline asm
	{ atom.add.f64 %fd1445,[%rd660],%fd1458; }

	// end inline asm
	add.s64 	%rd661, %rd655, 48;
	// begin inline asm
	{ atom.add.f64 %fd1447,[%rd661],%fd1458; }

	// end inline asm
	add.s64 	%rd662, %rd655, 56;
	// begin inline asm
	{ atom.add.f64 %fd1449,[%rd662],%fd1458; }

	// end inline asm
	add.s64 	%rd663, %rd655, 64;
	// begin inline asm
	{ atom.add.f64 %fd1451,[%rd663],%fd1458; }

	// end inline asm
	add.s64 	%rd664, %rd655, 72;
	// begin inline asm
	{ atom.add.f64 %fd1453,[%rd664],%fd1458; }

	// end inline asm
	add.s64 	%rd665, %rd655, 80;
	// begin inline asm
	{ atom.add.f64 %fd1455,[%rd665],%fd1458; }

	// end inline asm
	add.s64 	%rd666, %rd655, 88;
	// begin inline asm
	{ atom.add.f64 %fd1457,[%rd666],%fd1458; }

	// end inline asm
	bra.uni 	$L__BB9_111;

$L__BB9_109:
	setp.eq.s64 	%p59, %rd54, 0;
	@%p59 bra 	$L__BB9_111;

	add.s64 	%rd668, %rd54, %rd46;
	mov.f64 	%fd1482, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1459,[%rd668],%fd1482; }

	// end inline asm
	add.s64 	%rd669, %rd668, 8;
	// begin inline asm
	{ atom.add.f64 %fd1461,[%rd669],%fd113; }

	// end inline asm
	add.s64 	%rd670, %rd668, 16;
	// begin inline asm
	{ atom.add.f64 %fd1463,[%rd670],%fd1482; }

	// end inline asm
	add.s64 	%rd671, %rd668, 24;
	// begin inline asm
	{ atom.add.f64 %fd1465,[%rd671],%fd1482; }

	// end inline asm
	add.s64 	%rd672, %rd668, 32;
	// begin inline asm
	{ atom.add.f64 %fd1467,[%rd672],%fd1482; }

	// end inline asm
	add.s64 	%rd673, %rd668, 40;
	// begin inline asm
	{ atom.add.f64 %fd1469,[%rd673],%fd1482; }

	// end inline asm
	add.s64 	%rd674, %rd668, 48;
	// begin inline asm
	{ atom.add.f64 %fd1471,[%rd674],%fd1482; }

	// end inline asm
	add.s64 	%rd675, %rd668, 56;
	// begin inline asm
	{ atom.add.f64 %fd1473,[%rd675],%fd1482; }

	// end inline asm
	add.s64 	%rd676, %rd668, 64;
	// begin inline asm
	{ atom.add.f64 %fd1475,[%rd676],%fd1482; }

	// end inline asm
	add.s64 	%rd677, %rd668, 72;
	// begin inline asm
	{ atom.add.f64 %fd1477,[%rd677],%fd1482; }

	// end inline asm
	add.s64 	%rd678, %rd668, 80;
	// begin inline asm
	{ atom.add.f64 %fd1479,[%rd678],%fd1482; }

	// end inline asm
	add.s64 	%rd679, %rd668, 88;
	// begin inline asm
	{ atom.add.f64 %fd1481,[%rd679],%fd1482; }

	// end inline asm

$L__BB9_111:
	add.f64 	%fd115, %fd81, 0d0000000000000000;
	mov.f64 	%fd1483, 0d0000000000000000;
	sub.f64 	%fd1484, %fd1483, %fd115;
	add.f64 	%fd116, %fd1484, 0d0000000000000000;
	@%p16 bra 	$L__BB9_113;

	mul.lo.s64 	%rd692, %rd45, %rd32;
	add.s64 	%rd680, %rd69, %rd692;
	// begin inline asm
	{ atom.add.f64 %fd1485,[%rd680],%fd116; }

	// end inline asm
	add.s64 	%rd681, %rd680, 8;
	// begin inline asm
	{ atom.add.f64 %fd1487,[%rd681],%fd1483; }

	// end inline asm
	add.s64 	%rd682, %rd680, 16;
	// begin inline asm
	{ atom.add.f64 %fd1489,[%rd682],%fd1483; }

	// end inline asm
	add.s64 	%rd683, %rd680, 24;
	// begin inline asm
	{ atom.add.f64 %fd1491,[%rd683],%fd1483; }

	// end inline asm
	add.s64 	%rd684, %rd680, 32;
	// begin inline asm
	{ atom.add.f64 %fd1493,[%rd684],%fd1483; }

	// end inline asm
	add.s64 	%rd685, %rd680, 40;
	// begin inline asm
	{ atom.add.f64 %fd1495,[%rd685],%fd1483; }

	// end inline asm
	add.s64 	%rd686, %rd680, 48;
	// begin inline asm
	{ atom.add.f64 %fd1497,[%rd686],%fd1483; }

	// end inline asm
	add.s64 	%rd687, %rd680, 56;
	// begin inline asm
	{ atom.add.f64 %fd1499,[%rd687],%fd1483; }

	// end inline asm
	add.s64 	%rd688, %rd680, 64;
	// begin inline asm
	{ atom.add.f64 %fd1501,[%rd688],%fd1483; }

	// end inline asm
	add.s64 	%rd689, %rd680, 72;
	// begin inline asm
	{ atom.add.f64 %fd1503,[%rd689],%fd1483; }

	// end inline asm
	add.s64 	%rd690, %rd680, 80;
	// begin inline asm
	{ atom.add.f64 %fd1505,[%rd690],%fd1483; }

	// end inline asm
	add.s64 	%rd691, %rd680, 88;
	// begin inline asm
	{ atom.add.f64 %fd1507,[%rd691],%fd1483; }

	// end inline asm
	bra.uni 	$L__BB9_115;

$L__BB9_113:
	setp.eq.s64 	%p61, %rd56, 0;
	@%p61 bra 	$L__BB9_115;

	add.s64 	%rd693, %rd56, %rd47;
	// begin inline asm
	{ atom.add.f64 %fd1509,[%rd693],%fd116; }

	// end inline asm
	add.s64 	%rd694, %rd693, 8;
	mov.f64 	%fd1532, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1511,[%rd694],%fd1532; }

	// end inline asm
	add.s64 	%rd695, %rd693, 16;
	// begin inline asm
	{ atom.add.f64 %fd1513,[%rd695],%fd1532; }

	// end inline asm
	add.s64 	%rd696, %rd693, 24;
	// begin inline asm
	{ atom.add.f64 %fd1515,[%rd696],%fd1532; }

	// end inline asm
	add.s64 	%rd697, %rd693, 32;
	// begin inline asm
	{ atom.add.f64 %fd1517,[%rd697],%fd1532; }

	// end inline asm
	add.s64 	%rd698, %rd693, 40;
	// begin inline asm
	{ atom.add.f64 %fd1519,[%rd698],%fd1532; }

	// end inline asm
	add.s64 	%rd699, %rd693, 48;
	// begin inline asm
	{ atom.add.f64 %fd1521,[%rd699],%fd1532; }

	// end inline asm
	add.s64 	%rd700, %rd693, 56;
	// begin inline asm
	{ atom.add.f64 %fd1523,[%rd700],%fd1532; }

	// end inline asm
	add.s64 	%rd701, %rd693, 64;
	// begin inline asm
	{ atom.add.f64 %fd1525,[%rd701],%fd1532; }

	// end inline asm
	add.s64 	%rd702, %rd693, 72;
	// begin inline asm
	{ atom.add.f64 %fd1527,[%rd702],%fd1532; }

	// end inline asm
	add.s64 	%rd703, %rd693, 80;
	// begin inline asm
	{ atom.add.f64 %fd1529,[%rd703],%fd1532; }

	// end inline asm
	add.s64 	%rd704, %rd693, 88;
	// begin inline asm
	{ atom.add.f64 %fd1531,[%rd704],%fd1532; }

	// end inline asm

$L__BB9_115:
	@%p18 bra 	$L__BB9_117;

	mul.lo.s64 	%rd717, %rd45, %rd33;
	add.s64 	%rd705, %rd67, %rd717;
	// begin inline asm
	{ atom.add.f64 %fd1533,[%rd705],%fd115; }

	// end inline asm
	add.s64 	%rd706, %rd705, 8;
	mov.f64 	%fd1556, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1535,[%rd706],%fd1556; }

	// end inline asm
	add.s64 	%rd707, %rd705, 16;
	// begin inline asm
	{ atom.add.f64 %fd1537,[%rd707],%fd1556; }

	// end inline asm
	add.s64 	%rd708, %rd705, 24;
	// begin inline asm
	{ atom.add.f64 %fd1539,[%rd708],%fd1556; }

	// end inline asm
	add.s64 	%rd709, %rd705, 32;
	// begin inline asm
	{ atom.add.f64 %fd1541,[%rd709],%fd1556; }

	// end inline asm
	add.s64 	%rd710, %rd705, 40;
	// begin inline asm
	{ atom.add.f64 %fd1543,[%rd710],%fd1556; }

	// end inline asm
	add.s64 	%rd711, %rd705, 48;
	// begin inline asm
	{ atom.add.f64 %fd1545,[%rd711],%fd1556; }

	// end inline asm
	add.s64 	%rd712, %rd705, 56;
	// begin inline asm
	{ atom.add.f64 %fd1547,[%rd712],%fd1556; }

	// end inline asm
	add.s64 	%rd713, %rd705, 64;
	// begin inline asm
	{ atom.add.f64 %fd1549,[%rd713],%fd1556; }

	// end inline asm
	add.s64 	%rd714, %rd705, 72;
	// begin inline asm
	{ atom.add.f64 %fd1551,[%rd714],%fd1556; }

	// end inline asm
	add.s64 	%rd715, %rd705, 80;
	// begin inline asm
	{ atom.add.f64 %fd1553,[%rd715],%fd1556; }

	// end inline asm
	add.s64 	%rd716, %rd705, 88;
	// begin inline asm
	{ atom.add.f64 %fd1555,[%rd716],%fd1556; }

	// end inline asm
	bra.uni 	$L__BB9_119;

$L__BB9_117:
	setp.eq.s64 	%p63, %rd54, 0;
	@%p63 bra 	$L__BB9_119;

	add.s64 	%rd718, %rd54, %rd46;
	// begin inline asm
	{ atom.add.f64 %fd1557,[%rd718],%fd115; }

	// end inline asm
	add.s64 	%rd719, %rd718, 8;
	mov.f64 	%fd1580, 0d0000000000000000;
	// begin inline asm
	{ atom.add.f64 %fd1559,[%rd719],%fd1580; }

	// end inline asm
	add.s64 	%rd720, %rd718, 16;
	// begin inline asm
	{ atom.add.f64 %fd1561,[%rd720],%fd1580; }

	// end inline asm
	add.s64 	%rd721, %rd718, 24;
	// begin inline asm
	{ atom.add.f64 %fd1563,[%rd721],%fd1580; }

	// end inline asm
	add.s64 	%rd722, %rd718, 32;
	// begin inline asm
	{ atom.add.f64 %fd1565,[%rd722],%fd1580; }

	// end inline asm
	add.s64 	%rd723, %rd718, 40;
	// begin inline asm
	{ atom.add.f64 %fd1567,[%rd723],%fd1580; }

	// end inline asm
	add.s64 	%rd724, %rd718, 48;
	// begin inline asm
	{ atom.add.f64 %fd1569,[%rd724],%fd1580; }

	// end inline asm
	add.s64 	%rd725, %rd718, 56;
	// begin inline asm
	{ atom.add.f64 %fd1571,[%rd725],%fd1580; }

	// end inline asm
	add.s64 	%rd726, %rd718, 64;
	// begin inline asm
	{ atom.add.f64 %fd1573,[%rd726],%fd1580; }

	// end inline asm
	add.s64 	%rd727, %rd718, 72;
	// begin inline asm
	{ atom.add.f64 %fd1575,[%rd727],%fd1580; }

	// end inline asm
	add.s64 	%rd728, %rd718, 80;
	// begin inline asm
	{ atom.add.f64 %fd1577,[%rd728],%fd1580; }

	// end inline asm
	add.s64 	%rd729, %rd718, 88;
	// begin inline asm
	{ atom.add.f64 %fd1579,[%rd729],%fd1580; }

	// end inline asm

$L__BB9_119:
	ld.param.u64 	%rd730, [compute_inertia_energy_grad_affine_y_cuda_kernel_backward_param_0+24];
	add.s64 	%rd733, %rd733, %rd25;
	setp.lt.u64 	%p64, %rd733, %rd730;
	@%p64 bra 	$L__BB9_2;

$L__BB9_120:
	ret;

}
	// .globl	compute_inertia_energy_grad_soft_x_cuda_kernel_forward
.visible .entry compute_inertia_energy_grad_soft_x_cuda_kernel_forward(
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_4[56],
	.param .u32 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_5,
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_6[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_7[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_8[56]
)
{
	.reg .pred 	%p<13>;
	.reg .b16 	%rs<58>;
	.reg .b32 	%r<149>;
	.reg .f64 	%fd<17>;
	.reg .b64 	%rd<80>;


	ld.param.v2.u32 	{%r71, %r72}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_0];
	ld.param.v2.u32 	{%r73, %r74}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_0+8];
	ld.param.v2.u32 	{%r79, %r80}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_1+32];
	ld.param.v2.u32 	{%r87, %r88}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_2+32];
	ld.param.v2.u32 	{%r95, %r96}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_3+32];
	ld.param.v2.u32 	{%r103, %r104}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_4+32];
	ld.param.u32 	%r43, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_5];
	ld.param.v2.u32 	{%r111, %r112}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_6+32];
	ld.param.v2.u32 	{%r119, %r120}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_7+32];
	ld.param.v2.u32 	{%r127, %r128}, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_8+32];
	ld.param.u64 	%rd48, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_8];
	ld.param.u64 	%rd46, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_7];
	ld.param.u64 	%rd44, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_6];
	ld.param.u64 	%rd42, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_4];
	ld.param.u64 	%rd40, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_3];
	ld.param.u64 	%rd38, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_2];
	ld.param.u64 	%rd36, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_1];
	ld.param.u64 	%rd35, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_0+24];
	ld.param.u32 	%r6, [compute_inertia_energy_grad_soft_x_cuda_kernel_forward_param_0+16];
	mov.u32 	%r131, %ntid.x;
	cvt.u64.u32 	%rd1, %r131;
	mov.u32 	%r132, %ctaid.x;
	mul.wide.u32 	%rd50, %r131, %r132;
	mov.u32 	%r133, %tid.x;
	cvt.u64.u32 	%rd51, %r133;
	add.s64 	%rd76, %rd50, %rd51;
	setp.ge.u64 	%p1, %rd76, %rd35;
	@%p1 bra 	$L__BB10_17;

	cvta.to.global.u64 	%rd4, %rd48;
	cvta.to.global.u64 	%rd5, %rd46;
	cvta.to.global.u64 	%rd6, %rd42;
	cvta.to.global.u64 	%rd7, %rd40;
	cvta.to.global.u64 	%rd8, %rd38;
	cvt.s64.s32 	%rd10, %r74;
	cvt.s64.s32 	%rd11, %r73;
	cvt.s64.s32 	%rd12, %r72;
	cvt.s64.s32 	%rd13, %r111;
	cvt.s64.s32 	%rd14, %r119;
	cvt.s64.s32 	%rd15, %r127;
	mov.u32 	%r134, %nctaid.x;
	cvt.u64.u32 	%rd52, %r134;
	mul.lo.s64 	%rd16, %rd1, %rd52;
	cvt.s64.s32 	%rd17, %r103;
	cvt.s64.s32 	%rd18, %r87;
	cvt.s64.s32 	%rd19, %r95;
	cvt.s64.s32 	%rd20, %r79;
	cvta.to.global.u64 	%rd21, %rd44;

$L__BB10_2:
	setp.lt.s32 	%p2, %r6, 4;
	mov.u64 	%rd77, %rd76;
	@%p2 bra 	$L__BB10_6;

	or.b64  	%rd53, %rd76, %rd10;
	and.b64  	%rd54, %rd53, -4294967296;
	setp.eq.s64 	%p3, %rd54, 0;
	@%p3 bra 	$L__BB10_5;

	div.u64 	%rd77, %rd76, %rd10;
	bra.uni 	$L__BB10_6;

$L__BB10_5:
	cvt.u32.u64 	%r135, %rd10;
	cvt.u32.u64 	%r136, %rd76;
	div.u32 	%r137, %r136, %r135;
	cvt.u64.u32 	%rd77, %r137;

$L__BB10_6:
	setp.lt.s32 	%p4, %r6, 3;
	@%p4 bra 	$L__BB10_10;

	or.b64  	%rd55, %rd77, %rd11;
	and.b64  	%rd56, %rd55, -4294967296;
	setp.eq.s64 	%p5, %rd56, 0;
	@%p5 bra 	$L__BB10_9;

	div.u64 	%rd77, %rd77, %rd11;
	bra.uni 	$L__BB10_10;

$L__BB10_9:
	cvt.u32.u64 	%r138, %rd11;
	cvt.u32.u64 	%r139, %rd77;
	div.u32 	%r140, %r139, %r138;
	cvt.u64.u32 	%rd77, %r140;

$L__BB10_10:
	setp.lt.s32 	%p6, %r6, 2;
	@%p6 bra 	$L__BB10_14;

	or.b64  	%rd57, %rd77, %rd12;
	and.b64  	%rd58, %rd57, -4294967296;
	setp.eq.s64 	%p7, %rd58, 0;
	@%p7 bra 	$L__BB10_13;

	div.u64 	%rd77, %rd77, %rd12;
	bra.uni 	$L__BB10_14;

$L__BB10_13:
	cvt.u32.u64 	%r141, %rd12;
	cvt.u32.u64 	%r142, %rd77;
	div.u32 	%r143, %r142, %r141;
	cvt.u64.u32 	%rd77, %r143;

$L__BB10_14:
	cvt.u32.u64 	%r144, %rd77;
	setp.gt.s32 	%p8, %r6, 0;
	selp.b32 	%r145, %r144, 0, %p8;
	cvt.s64.s32 	%rd32, %r145;
	mul.lo.s64 	%rd59, %rd32, %rd13;
	add.s64 	%rd60, %rd21, %rd59;
	add.s32 	%r146, %r145, %r43;
	cvt.s64.s32 	%rd33, %r146;
	mul.lo.s64 	%rd61, %rd33, %rd14;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.s32 	%rd63, [%rd62];
	mul.lo.s64 	%rd64, %rd63, %rd15;
	add.s64 	%rd65, %rd4, %rd64;
	ld.global.u32 	%r147, [%rd65];
	add.s32 	%r148, %r147, -1;
	setp.lt.u32 	%p9, %r148, 2;
	ld.global.u8 	%rs57, [%rd60];
	setp.ne.s16 	%p10, %rs57, 0;
	or.pred  	%p11, %p10, %p9;
	@%p11 bra 	$L__BB10_16;

	mul.lo.s64 	%rd69, %rd32, %rd17;
	add.s64 	%rd70, %rd6, %rd69;
	mul.lo.s64 	%rd71, %rd33, %rd18;
	add.s64 	%rd72, %rd8, %rd71;
	mul.lo.s64 	%rd73, %rd32, %rd19;
	add.s64 	%rd74, %rd7, %rd73;
	ld.global.f64 	%fd7, [%rd74];
	ld.global.f64 	%fd8, [%rd72];
	sub.f64 	%fd9, %fd8, %fd7;
	ld.global.f64 	%fd10, [%rd74+8];
	ld.global.f64 	%fd11, [%rd72+8];
	sub.f64 	%fd12, %fd11, %fd10;
	ld.global.f64 	%fd13, [%rd74+16];
	ld.global.f64 	%fd14, [%rd72+16];
	sub.f64 	%fd15, %fd14, %fd13;
	ld.global.f64 	%fd16, [%rd70];
	mul.f64 	%fd2, %fd9, %fd16;
	mul.f64 	%fd4, %fd12, %fd16;
	mul.f64 	%fd6, %fd15, %fd16;
	mul.lo.s64 	%rd75, %rd32, %rd20;
	add.s64 	%rd66, %rd36, %rd75;
	// begin inline asm
	{ atom.add.f64 %fd1,[%rd66],%fd2; }

	// end inline asm
	add.s64 	%rd67, %rd66, 8;
	// begin inline asm
	{ atom.add.f64 %fd3,[%rd67],%fd4; }

	// end inline asm
	add.s64 	%rd68, %rd66, 16;
	// begin inline asm
	{ atom.add.f64 %fd5,[%rd68],%fd6; }

	// end inline asm

$L__BB10_16:
	add.s64 	%rd76, %rd76, %rd16;
	setp.lt.u64 	%p12, %rd76, %rd35;
	@%p12 bra 	$L__BB10_2;

$L__BB10_17:
	ret;

}
	// .globl	compute_inertia_energy_grad_soft_x_cuda_kernel_backward
.visible .entry compute_inertia_energy_grad_soft_x_cuda_kernel_backward(
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_0[32],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_1[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_2[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_3[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_4[56],
	.param .u32 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_5,
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_6[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_7[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_8[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_9[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_10[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_11[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_12[56],
	.param .u32 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_13,
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_14[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_15[56],
	.param .align 8 .b8 compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_16[56]
)
{
	.reg .pred 	%p<21>;
	.reg .b16 	%rs<90>;
	.reg .b32 	%r<218>;
	.reg .f64 	%fd<71>;
	.reg .b64 	%rd<121>;


	ld.param.v2.u32 	{%r107, %r108}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_0];
	ld.param.v2.u32 	{%r109, %r110}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_0+8];
	ld.param.v2.u32 	{%r115, %r116}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_1+32];
	ld.param.v2.u32 	{%r123, %r124}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_2+32];
	ld.param.v2.u32 	{%r131, %r132}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_3+32];
	ld.param.v2.u32 	{%r139, %r140}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_4+32];
	ld.param.v2.u32 	{%r147, %r148}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_6+32];
	ld.param.v2.u32 	{%r155, %r156}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_7+32];
	ld.param.v2.u32 	{%r163, %r164}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_8+32];
	ld.param.v2.u32 	{%r171, %r172}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_9+32];
	ld.param.v2.u32 	{%r179, %r180}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_10+32];
	ld.param.v2.u32 	{%r187, %r188}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_11+32];
	ld.param.v2.u32 	{%r195, %r196}, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_12+32];
	ld.param.u64 	%rd72, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_12];
	ld.param.u64 	%rd70, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_11];
	ld.param.u64 	%rd68, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_10];
	ld.param.u64 	%rd66, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_9];
	ld.param.u64 	%rd64, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_8];
	ld.param.u64 	%rd62, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_7];
	ld.param.u64 	%rd60, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_6];
	ld.param.u64 	%rd59, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_4+8];
	ld.param.u64 	%rd58, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_4];
	ld.param.u64 	%rd57, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_3+8];
	ld.param.u64 	%rd56, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_3];
	ld.param.u64 	%rd55, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_2+8];
	ld.param.u64 	%rd54, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_2];
	ld.param.u64 	%rd53, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_1+8];
	ld.param.u64 	%rd51, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_0+24];
	ld.param.u32 	%r6, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_0+16];
	mov.u32 	%r199, %ntid.x;
	cvt.u64.u32 	%rd1, %r199;
	mov.u32 	%r200, %ctaid.x;
	mul.wide.u32 	%rd74, %r199, %r200;
	mov.u32 	%r201, %tid.x;
	cvt.u64.u32 	%rd75, %r201;
	add.s64 	%rd117, %rd74, %rd75;
	setp.ge.u64 	%p1, %rd117, %rd51;
	@%p1 bra 	$L__BB11_32;

	cvta.to.global.u64 	%rd12, %rd66;
	cvta.to.global.u64 	%rd13, %rd64;
	cvta.to.global.u64 	%rd14, %rd62;
	cvta.to.global.u64 	%rd15, %rd58;
	cvta.to.global.u64 	%rd16, %rd56;
	cvta.to.global.u64 	%rd17, %rd54;
	cvta.to.global.u64 	%rd18, %rd53;
	cvt.s64.s32 	%rd19, %r110;
	cvt.s64.s32 	%rd20, %r109;
	cvt.s64.s32 	%rd21, %r108;
	cvt.s64.s32 	%rd22, %r147;
	cvt.s64.s32 	%rd23, %r155;
	cvt.s64.s32 	%rd24, %r163;
	mov.u32 	%r202, %nctaid.x;
	cvt.u64.u32 	%rd76, %r202;
	mul.lo.s64 	%rd25, %rd1, %rd76;
	cvt.s64.s32 	%rd26, %r139;
	cvt.s64.s32 	%rd27, %r123;
	cvt.s64.s32 	%rd28, %r131;
	cvt.s64.s32 	%rd29, %r171;
	cvt.s64.s32 	%rd30, %r115;
	cvt.s64.s32 	%rd31, %r187;
	cvt.s64.s32 	%rd32, %r179;
	cvt.s64.s32 	%rd33, %r195;
	cvta.to.global.u64 	%rd34, %rd60;

$L__BB11_2:
	setp.lt.s32 	%p2, %r6, 4;
	mov.u64 	%rd118, %rd117;
	@%p2 bra 	$L__BB11_6;

	or.b64  	%rd77, %rd117, %rd19;
	and.b64  	%rd78, %rd77, -4294967296;
	setp.eq.s64 	%p3, %rd78, 0;
	@%p3 bra 	$L__BB11_5;

	div.u64 	%rd118, %rd117, %rd19;
	bra.uni 	$L__BB11_6;

$L__BB11_5:
	cvt.u32.u64 	%r203, %rd19;
	cvt.u32.u64 	%r204, %rd117;
	div.u32 	%r205, %r204, %r203;
	cvt.u64.u32 	%rd118, %r205;

$L__BB11_6:
	setp.lt.s32 	%p4, %r6, 3;
	@%p4 bra 	$L__BB11_10;

	or.b64  	%rd79, %rd118, %rd20;
	and.b64  	%rd80, %rd79, -4294967296;
	setp.eq.s64 	%p5, %rd80, 0;
	@%p5 bra 	$L__BB11_9;

	div.u64 	%rd118, %rd118, %rd20;
	bra.uni 	$L__BB11_10;

$L__BB11_9:
	cvt.u32.u64 	%r206, %rd20;
	cvt.u32.u64 	%r207, %rd118;
	div.u32 	%r208, %r207, %r206;
	cvt.u64.u32 	%rd118, %r208;

$L__BB11_10:
	setp.lt.s32 	%p6, %r6, 2;
	@%p6 bra 	$L__BB11_14;

	or.b64  	%rd81, %rd118, %rd21;
	and.b64  	%rd82, %rd81, -4294967296;
	setp.eq.s64 	%p7, %rd82, 0;
	@%p7 bra 	$L__BB11_13;

	div.u64 	%rd118, %rd118, %rd21;
	bra.uni 	$L__BB11_14;

$L__BB11_13:
	cvt.u32.u64 	%r209, %rd21;
	cvt.u32.u64 	%r210, %rd118;
	div.u32 	%r211, %r210, %r209;
	cvt.u64.u32 	%rd118, %r211;

$L__BB11_14:
	ld.param.u32 	%r217, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_5];
	cvt.u32.u64 	%r212, %rd118;
	setp.gt.s32 	%p8, %r6, 0;
	selp.b32 	%r213, %r212, 0, %p8;
	cvt.s64.s32 	%rd45, %r213;
	mul.lo.s64 	%rd83, %rd45, %rd22;
	add.s64 	%rd84, %rd34, %rd83;
	add.s32 	%r214, %r213, %r217;
	cvt.s64.s32 	%rd46, %r214;
	mul.lo.s64 	%rd85, %rd46, %rd23;
	add.s64 	%rd86, %rd14, %rd85;
	ld.global.s32 	%rd87, [%rd86];
	mul.lo.s64 	%rd88, %rd87, %rd24;
	add.s64 	%rd89, %rd13, %rd88;
	ld.global.u32 	%r215, [%rd89];
	add.s32 	%r216, %r215, -1;
	setp.lt.u32 	%p9, %r216, 2;
	ld.global.u8 	%rs89, [%rd84];
	setp.ne.s16 	%p10, %rs89, 0;
	or.pred  	%p11, %p10, %p9;
	@%p11 bra 	$L__BB11_31;

	ld.param.u64 	%rd115, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_9];
	setp.eq.s64 	%p12, %rd115, 0;
	mul.lo.s64 	%rd47, %rd45, %rd26;
	add.s64 	%rd90, %rd15, %rd47;
	mul.lo.s64 	%rd48, %rd46, %rd27;
	add.s64 	%rd91, %rd17, %rd48;
	mul.lo.s64 	%rd49, %rd45, %rd28;
	add.s64 	%rd92, %rd16, %rd49;
	ld.global.f64 	%fd21, [%rd92];
	ld.global.f64 	%fd22, [%rd91];
	sub.f64 	%fd1, %fd22, %fd21;
	ld.global.f64 	%fd23, [%rd92+8];
	ld.global.f64 	%fd24, [%rd91+8];
	sub.f64 	%fd2, %fd24, %fd23;
	ld.global.f64 	%fd25, [%rd92+16];
	ld.global.f64 	%fd26, [%rd91+16];
	sub.f64 	%fd3, %fd26, %fd25;
	ld.global.f64 	%fd4, [%rd90];
	@%p12 bra 	$L__BB11_17;

	mul.lo.s64 	%rd93, %rd45, %rd29;
	add.s64 	%rd94, %rd12, %rd93;
	ld.global.f64 	%fd27, [%rd94];
	add.f64 	%fd70, %fd27, 0d0000000000000000;
	ld.global.f64 	%fd28, [%rd94+8];
	add.f64 	%fd69, %fd28, 0d0000000000000000;
	ld.global.f64 	%fd29, [%rd94+16];
	add.f64 	%fd68, %fd29, 0d0000000000000000;
	bra.uni 	$L__BB11_19;

$L__BB11_17:
	ld.param.u64 	%rd116, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_1+8];
	setp.eq.s64 	%p13, %rd116, 0;
	mov.f64 	%fd68, 0d0000000000000000;
	mov.f64 	%fd69, %fd68;
	mov.f64 	%fd70, %fd68;
	@%p13 bra 	$L__BB11_19;

	mul.lo.s64 	%rd95, %rd45, %rd30;
	add.s64 	%rd96, %rd18, %rd95;
	ld.global.f64 	%fd33, [%rd96];
	add.f64 	%fd70, %fd33, 0d0000000000000000;
	ld.global.f64 	%fd34, [%rd96+8];
	add.f64 	%fd69, %fd34, 0d0000000000000000;
	ld.global.f64 	%fd35, [%rd96+16];
	add.f64 	%fd68, %fd35, 0d0000000000000000;

$L__BB11_19:
	fma.rn.f64 	%fd14, %fd4, %fd70, 0d0000000000000000;
	mov.f64 	%fd36, 0d0000000000000000;
	fma.rn.f64 	%fd15, %fd4, %fd69, 0d0000000000000000;
	fma.rn.f64 	%fd16, %fd4, %fd68, 0d0000000000000000;
	mul.f64 	%fd37, %fd2, %fd69;
	fma.rn.f64 	%fd38, %fd1, %fd70, %fd37;
	fma.rn.f64 	%fd39, %fd3, %fd68, %fd38;
	add.f64 	%fd17, %fd39, 0d0000000000000000;
	sub.f64 	%fd18, %fd36, %fd14;
	sub.f64 	%fd19, %fd36, %fd15;
	sub.f64 	%fd20, %fd36, %fd16;
	setp.eq.s64 	%p14, %rd70, 0;
	@%p14 bra 	$L__BB11_21;

	mul.lo.s64 	%rd100, %rd45, %rd31;
	add.s64 	%rd97, %rd70, %rd100;
	// begin inline asm
	{ atom.add.f64 %fd40,[%rd97],%fd18; }

	// end inline asm
	add.s64 	%rd98, %rd97, 8;
	// begin inline asm
	{ atom.add.f64 %fd42,[%rd98],%fd19; }

	// end inline asm
	add.s64 	%rd99, %rd97, 16;
	// begin inline asm
	{ atom.add.f64 %fd44,[%rd99],%fd20; }

	// end inline asm
	bra.uni 	$L__BB11_23;

$L__BB11_21:
	setp.eq.s64 	%p15, %rd57, 0;
	@%p15 bra 	$L__BB11_23;

	add.s64 	%rd101, %rd57, %rd49;
	// begin inline asm
	{ atom.add.f64 %fd46,[%rd101],%fd18; }

	// end inline asm
	add.s64 	%rd102, %rd101, 8;
	// begin inline asm
	{ atom.add.f64 %fd48,[%rd102],%fd19; }

	// end inline asm
	add.s64 	%rd103, %rd101, 16;
	// begin inline asm
	{ atom.add.f64 %fd50,[%rd103],%fd20; }

	// end inline asm

$L__BB11_23:
	setp.eq.s64 	%p16, %rd68, 0;
	@%p16 bra 	$L__BB11_25;

	mul.lo.s64 	%rd107, %rd46, %rd32;
	add.s64 	%rd104, %rd68, %rd107;
	// begin inline asm
	{ atom.add.f64 %fd52,[%rd104],%fd14; }

	// end inline asm
	add.s64 	%rd105, %rd104, 8;
	// begin inline asm
	{ atom.add.f64 %fd54,[%rd105],%fd15; }

	// end inline asm
	add.s64 	%rd106, %rd104, 16;
	// begin inline asm
	{ atom.add.f64 %fd56,[%rd106],%fd16; }

	// end inline asm
	bra.uni 	$L__BB11_27;

$L__BB11_25:
	setp.eq.s64 	%p17, %rd55, 0;
	@%p17 bra 	$L__BB11_27;

	add.s64 	%rd108, %rd55, %rd48;
	// begin inline asm
	{ atom.add.f64 %fd58,[%rd108],%fd14; }

	// end inline asm
	add.s64 	%rd109, %rd108, 8;
	// begin inline asm
	{ atom.add.f64 %fd60,[%rd109],%fd15; }

	// end inline asm
	add.s64 	%rd110, %rd108, 16;
	// begin inline asm
	{ atom.add.f64 %fd62,[%rd110],%fd16; }

	// end inline asm

$L__BB11_27:
	setp.eq.s64 	%p18, %rd72, 0;
	@%p18 bra 	$L__BB11_29;

	mul.lo.s64 	%rd112, %rd45, %rd33;
	add.s64 	%rd111, %rd72, %rd112;
	// begin inline asm
	{ atom.add.f64 %fd64,[%rd111],%fd17; }

	// end inline asm
	bra.uni 	$L__BB11_31;

$L__BB11_29:
	setp.eq.s64 	%p19, %rd59, 0;
	@%p19 bra 	$L__BB11_31;

	add.s64 	%rd113, %rd59, %rd47;
	// begin inline asm
	{ atom.add.f64 %fd66,[%rd113],%fd17; }

	// end inline asm

$L__BB11_31:
	ld.param.u64 	%rd114, [compute_inertia_energy_grad_soft_x_cuda_kernel_backward_param_0+24];
	add.s64 	%rd117, %rd117, %rd25;
	setp.lt.u64 	%p20, %rd117, %rd114;
	@%p20 bra 	$L__BB11_2;

$L__BB11_32:
	ret;

}

 