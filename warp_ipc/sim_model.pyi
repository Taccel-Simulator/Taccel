import warp.sim.model
import warp_ipc.collision_detection as collision_detection
import warp_ipc.energy.barrier_energy as barrier_energy
import warp_ipc.energy.garment_stitch_energy as garment_stitch_energy
import warp_ipc.energy.kinematic_constraint_energy as kinematic_constraint_energy
import warp_ipc.utils.log as log
import warp_ipc.utils.matrix as matrix
from warp_ipc.body_handle import TetMeshBodyHandle as TetMeshBodyHandle, TriMeshBodyHandle as TriMeshBodyHandle
from warp_ipc.joint_handle import WorldJointHandle as WorldJointHandle, WorldJointType as WorldJointType
from warp_ipc.kinematic_kernels import check_is_satisfied_kernel as check_is_satisfied_kernel, project_system_kernel as project_system_kernel, update_dof_satisfied_kernel as update_dof_satisfied_kernel
from warp_ipc.linear_constraint_kernels import linear_constraint_project_system_kernel as linear_constraint_project_system_kernel
from warp_ipc.robots import Robot as Robot
from warp_ipc.set_state_kernels import set_sim_affine_state as set_sim_affine_state, set_sim_affine_vel as set_sim_affine_vel, set_sim_soft_state as set_sim_soft_state, set_sim_soft_vel as set_sim_soft_vel
from warp_ipc.sim_data import SimCacheDevice as SimCacheDevice
from warp_ipc.sim_kernels import affine_to_sys_grad as affine_to_sys_grad, init_affine_diag_hess_inds_kernel as init_affine_diag_hess_inds_kernel, init_affine_mass_matrix_kernel as init_affine_mass_matrix_kernel, init_soft_diag_hess_inds_kernel as init_soft_diag_hess_inds_kernel, initialize_soft_tilde_x as initialize_soft_tilde_x, initialize_tilde_y as initialize_tilde_y, negate_arr_vec12d as negate_arr_vec12d, negate_arr_vec3d as negate_arr_vec3d, safeguard_direction_x_kernel as safeguard_direction_x_kernel, soft_to_sys_grad as soft_to_sys_grad, sys_to_x_affine as sys_to_x_affine, sys_to_x_soft as sys_to_x_soft, update_x_kernel as update_x_kernel, y_to_x as y_to_x
from warp_ipc.utils.constants import BodyType as BodyType, MembraneType as MembraneType
from warp_ipc.utils.graph import collect_bending as collect_bending, collect_edge_and_point as collect_edge_and_point
from warp_ipc.utils.matrix import COOMatrix3x3 as COOMatrix3x3
from warp_ipc.utils.np_math import gauss_eliminate as gauss_eliminate
from warp_ipc.utils.wp_math import bsr_scipy_to_warp as bsr_scipy_to_warp, bsr_warp_to_scipy as bsr_warp_to_scipy

GEO_MESH: int
__test__: dict

class ASRModel(warp.sim.model.Model):
    class KinematicConstraintHelper:
        def __init__(self, *args, **kwargs) -> None: ...
        def increase_stiffness(self, *args, **kwargs): ...
        def init(self, *args, **kwargs): ...
        def initialize_stiffness(self, *args, **kwargs): ...
        def is_satisfied(self, *args, **kwargs): ...
        def project_system(self, *args, **kwargs): ...
        def reset(self, *args, **kwargs): ...
        def reset_dof_satisfied(self, *args, **kwargs): ...
        def set_initial_stiffness(self, *args, **kwargs): ...
        def update_satisfied(self, *args, **kwargs): ...

    class LinearConstraintHelper:
        def __init__(self, *args, **kwargs) -> None: ...
        def add_constraint(self, *args, **kwargs): ...
        def add_constraints(self, *args, **kwargs): ...
        def finalize(self, *args, **kwargs): ...
        def init(self, *args, **kwargs): ...
        def project_system(self, *args, **kwargs): ...

    class SetStateHelper:
        def __init__(self, *args, **kwargs) -> None: ...
        def clear_mask(self, *args, **kwargs): ...
        def init(self, *args, **kwargs): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add_affine_body(self, *args, **kwargs): ...
    def add_garment_stitch(self, *args, **kwargs): ...
    def add_plane(self, *args, **kwargs): ...
    def add_robot(self, *args, **kwargs): ...
    def add_soft_shell_body(self, *args, **kwargs): ...
    def add_soft_vol_body(self, *args, **kwargs): ...
    def add_world_prismatic_joint(self, *args, **kwargs): ...
    def add_world_revolute_joint(self, *args, **kwargs): ...
    def allocate_sim_cache(self, *args, **kwargs): ...
    def append_sim_data(self, *args, **kwargs): ...
    def apply_set_state(self, *args, **kwargs): ...
    def check_initial_state_valid(self, *args, **kwargs): ...
    def clear_force(self, *args, **kwargs): ...
    def clear_grad(self, *args, **kwargs): ...
    def collision_map(self, *args, **kwargs): ...
    def disable_affine_kinematic_constraint(self, *args, **kwargs): ...
    def enable_affine_kinematic_constraint(self, *args, **kwargs): ...
    def finalize(self, *args, **kwargs): ...
    def get_affine_body_mesh_from_handle(self, *args, **kwargs): ...
    def get_affine_body_meshes_from_handle(self, *args, **kwargs): ...
    def get_affine_body_state(self, *args, **kwargs): ...
    def get_affine_body_state_matrix(self, *args, **kwargs): ...
    def get_affine_body_velocity(self, *args, **kwargs): ...
    def get_affine_body_velocity_matrix(self, *args, **kwargs): ...
    def get_affine_body_wp_meshes_from_handle(self, *args, **kwargs): ...
    def get_body_env_id(self, *args, **kwargs): ...
    def get_body_face(self, *args, **kwargs): ...
    def get_body_mesh(self, *args, **kwargs): ...
    def get_body_nodal_collision_force(self, *args, **kwargs): ...
    def get_body_nodal_contact_force(self, *args, **kwargs): ...
    def get_body_nodal_friction_force(self, *args, **kwargs): ...
    def get_body_resultant_contact_force(self, *args, **kwargs): ...
    def get_body_target_mesh(self, *args, **kwargs): ...
    def get_body_x(self, *args, **kwargs): ...
    def get_body_x_target(self, *args, **kwargs): ...
    def get_element_by_handle(self, *args, **kwargs): ...
    @staticmethod
    def get_env_pos(*args, **kwargs): ...
    def get_environment_states(self, *args, **kwargs): ...
    def get_joint_value(self, *args, **kwargs): ...
    def get_scene_mesh(self, *args, **kwargs): ...
    def get_soft_body_from_handle(self, *args, **kwargs): ...
    def get_soft_body_mesh_from_handle(self, *args, **kwargs): ...
    def get_soft_body_meshes_from_handle(self, *args, **kwargs): ...
    def get_soft_body_pos(self, *args, **kwargs): ...
    def get_soft_body_velocity(self, *args, **kwargs): ...
    def get_soft_nodes_from_idxs(self, *args, **kwargs): ...
    def get_soft_surf_verts_from_handle(self, *args, **kwargs): ...
    def get_soft_verts_from_handle(self, *args, **kwargs): ...
    def init(self, *args, **kwargs): ...
    def initialize_hat_x_y(self, *args, **kwargs): ...
    def initialize_tilde_x_y(self, *args, **kwargs): ...
    def initialize_tilde_x_y_adjoint(self, *args, **kwargs): ...
    def merge_sys_grad(self, *args, **kwargs): ...
    def negate(self, *args, **kwargs): ...
    def negate_vec12d(self, *args, **kwargs): ...
    def negate_vec3d(self, *args, **kwargs): ...
    def requires_grad(self, *args, **kwargs): ...
    def reset_environement(self, *args, **kwargs): ...
    def safeguard_direction_x(self, *args, **kwargs): ...
    def save_sim_x_to_xt(self, *args, **kwargs): ...
    def set_affine_external_force_field(self, *args, **kwargs): ...
    def set_affine_external_torque(self, *args, **kwargs): ...
    def set_affine_external_wrench(self, *args, **kwargs): ...
    def set_affine_kinematic_target(self, *args, **kwargs): ...
    def set_affine_state(self, *args, **kwargs): ...
    def set_body_collision_layer(self, *args, **kwargs): ...
    def set_body_env_id(self, *args, **kwargs): ...
    def set_body_self_collision(self, *args, **kwargs): ...
    def set_collision_layer_filter(self, *args, **kwargs): ...
    def set_kinematic_stiffness(self, *args, **kwargs): ...
    def set_robot_state(self, *args, **kwargs): ...
    def set_soft_kinematic_constraint(self, *args, **kwargs): ...
    def set_soft_kinematic_target(self, *args, **kwargs): ...
    def set_soft_state(self, *args, **kwargs): ...
    def state(self, *args, **kwargs): ...
    def step(self, *args, **kwargs): ...
    def sys_to_x(self, *args, **kwargs): ...
    def update_contact_force(self, *args, **kwargs): ...
    def write_scene(self, *args, **kwargs): ...
    def write_target_scene(self, *args, **kwargs): ...
    def y_to_x(self, *args, **kwargs): ...
    @property
    def affine_body_num(self): ...
    @property
    def dummy_robot(self): ...
    @property
    def dx_div_dv_scale(self): ...
    @property
    def n_affine_dofs(self): ...
    @property
    def n_dofs(self): ...
    @property
    def num_HS(self): ...
    @property
    def num_body(self): ...
    @property
    def num_cloth_edges(self): ...
    @property
    def num_edge(self): ...
    @property
    def num_face(self): ...
    @property
    def num_surf_verts(self): ...
    @property
    def num_x(self): ...
    @property
    def shape_count_sim(self): ...
    @property
    def soft_bending_connectivity_num(self): ...
    @property
    def soft_kinematic_constraint(self): ...
    @property
    def soft_kinematic_target(self): ...
    @property
    def soft_shell_elastic_connectivity_num(self): ...
    @property
    def soft_shell_elastic_connectivity_offset(self): ...
    @property
    def soft_shell_tris_num(self): ...
    @property
    def soft_verts_num(self): ...
    @property
    def soft_vol_body_offset(self): ...
    @property
    def soft_vol_elastic_connectivity_num(self): ...
    @property
    def soft_vol_tets_num(self): ...
    @property
    def tac_handles(self): ...
    @property
    def x_target(self): ...
