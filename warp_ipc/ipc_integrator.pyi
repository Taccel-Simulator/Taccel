import warp.sim.integrator
import warp_ipc.collision_detection as collision_detection
import warp_ipc.energy.arap_membrane_energy as arap_membrane_energy
import warp_ipc.energy.barrier_energy as barrier_energy
import warp_ipc.energy.body_force_energy as body_force_energy
import warp_ipc.energy.check_min_dist as check_min_dist
import warp_ipc.energy.cloth_elastic_energy as cloth_elastic_energy
import warp_ipc.energy.cloth_mass_spring_energy as cloth_mass_spring_energy
import warp_ipc.energy.damping_energy as damping_energy
import warp_ipc.energy.dihedral_bending_energy as dihedral_bending_energy
import warp_ipc.energy.garment_stitch_energy as garment_stitch_energy
import warp_ipc.energy.inertia_energy as inertia_energy
import warp_ipc.energy.kinematic_constraint_energy as kinematic_constraint_energy
import warp_ipc.energy.nhk_elastic_energy as nhk_elastic_energy
import warp_ipc.energy.rigidity_energy as rigidity_energy
import warp_ipc.energy.rigidity_neohookean_energy as affine_neohookean_energy
import warp_ipc.energy.strain_based_elastic_energy as strain_elastic_energy
import warp_ipc.energy.stvk_elastic_energy as stvk_elastic_energy
import warp_ipc.utils.log as log
import warp_ipc.utils.matrix as matrix
from typing import ClassVar
from warp_ipc.sim_kernels import absolutize_arr_vec3d as absolutize_arr_vec3d, advection_x as advection_x, advection_y as advection_y, clamp_search_direction as clamp_search_direction, initialize_soft_tilde_x as initialize_soft_tilde_x, initialize_tilde_y as initialize_tilde_y, multiply_arr_vec3d_mul_scalar as multiply_arr_vec3d_mul_scalar, step_affine_y as step_affine_y, step_x as step_x, update_x_kernel as update_x_kernel, y_to_x as y_to_x
from warp_ipc.sim_model import ASRModel as ASRModel
from warp_ipc.utils.conjugate_gradient import conjugate_gradient as conjugate_gradient
from warp_ipc.utils.constants import AffineMaterialType as AffineMaterialType, MembraneType as MembraneType, VolMaterialType as VolMaterialType
from warp_ipc.utils.env_ops import reduce_env_energy_affine_body as reduce_env_energy_affine_body, reduce_env_energy_edge as reduce_env_energy_edge, reduce_env_energy_soft_shell as reduce_env_energy_soft_shell, reduce_env_energy_soft_tet as reduce_env_energy_soft_tet, reduce_env_energy_soft_vert as reduce_env_energy_soft_vert, reduce_env_energy_vert as reduce_env_energy_vert
from warp_ipc.utils.profile import MemoryProfiler as MemoryProfiler, Profiler as Profiler
from warp_ipc.utils.wp_math import bsr_warp_to_scipy as bsr_warp_to_scipy

__test__: dict

class IPCIntegrator(warp.sim.integrator.Integrator):
    class ProfileStatistics:
        def __init__(self, *args, **kwargs) -> None: ...
        def new_newton_iter(self, *args, **kwargs): ...
        def new_timestep(self, *args, **kwargs): ...
        def record_iter_timer(self, *args, **kwargs): ...
        def record_timestep_timer(self, *args, **kwargs): ...
        @property
        def current_newton_iter_data(self): ...
        @property
        def current_timestep_data(self): ...
        @property
        def full_json(self): ...
    ENERGY_NAMES: ClassVar[list] = ...
    _last_step_time: ClassVar[float] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def absolutize(self, *args, **kwargs): ...
    def add_cloth_elastic_hess(self, *args, **kwargs): ...
    def add_rigidity_hess(self, *args, **kwargs): ...
    def add_vol_elastic_hess(self, *args, **kwargs): ...
    def advance_func(self, *args, **kwargs): ...
    def advection(self, *args, **kwargs): ...
    def backward(self, *args, **kwargs): ...
    def check_grad(self, *args, **kwargs): ...
    def clamp_search_direction(self, *args, **kwargs): ...
    def diff_test(self, *args, **kwargs): ...
    def get_hess_to_damp(self, *args, **kwargs): ...
    def grad_IP(self, *args, **kwargs): ...
    def hess_IP(self, *args, **kwargs): ...
    def simulate(self, *args, **kwargs): ...
    def step_forward(self, *args, **kwargs): ...
    def step_forward_with_alphas(self, *args, **kwargs): ...
    def step_forward_with_consistent_alpha(self, *args, **kwargs): ...
    def val_IP(self, *args, **kwargs): ...
    @property
    def dx_div_dv_scale(self): ...
    @property
    def last_step_time(self): ...
